// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:55
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8612

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	428, 57,
	-2, 920,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	171, 755,
	188, 755,
	-2, 0,
	-1, 60,
	103, 920,
	177, 920,
	375, 920,
	376, 920,
	-2, 0,
	-1, 74,
	116, 894,
	129, 894,
	185, 894,
	212, 894,
	240, 894,
	248, 894,
	372, 894,
	-2, 883,
	-1, 108,
	121, 564,
	201, 564,
	362, 564,
	-2, 0,
	-1, 113,
	4, 922,
	21, 922,
	22, 922,
	23, 922,
	24, 922,
	26, 922,
	31, 922,
	36, 922,
	37, 922,
	38, 922,
	39, 922,
	40, 922,
	41, 922,
	42, 922,
	43, 922,
	44, 922,
	45, 922,
	47, 922,
	48, 922,
	49, 922,
	50, 922,
	51, 922,
	52, 922,
	53, 922,
	56, 922,
	57, 922,
	58, 922,
	59, 922,
	61, 922,
	62, 922,
	66, 922,
	67, 922,
	68, 922,
	69, 922,
	70, 922,
	72, 922,
	73, 922,
	74, 922,
	75, 922,
	77, 922,
	79, 922,
	80, 922,
	83, 922,
	84, 922,
	92, 922,
	93, 922,
	94, 922,
	95, 922,
	96, 922,
	97, 922,
	98, 922,
	99, 922,
	101, 922,
	103, 922,
	105, 922,
	108, 922,
	109, 922,
	110, 922,
	112, 922,
	114, 922,
	115, 922,
	117, 922,
	118, 922,
	119, 922,
	120, 922,
	121, 922,
	122, 922,
	123, 922,
	124, 922,
	125, 922,
	126, 922,
	134, 922,
	135, 922,
	136, 922,
	137, 922,
	138, 922,
	139, 922,
	141, 922,
	143, 922,
	147, 922,
	149, 922,
	150, 922,
	152, 922,
	153, 922,
	155, 922,
	156, 922,
	157, 922,
	158, 922,
	159, 922,
	160, 922,
	161, 922,
	162, 922,
	163, 922,
	166, 922,
	167, 922,
	172, 922,
	173, 922,
	174, 922,
	177, 922,
	178, 922,
	179, 922,
	180, 922,
	181, 922,
	182, 922,
	183, 922,
	184, 922,
	186, 922,
	188, 922,
	191, 922,
	192, 922,
	193, 922,
	195, 922,
	196, 922,
	199, 922,
	200, 922,
	201, 922,
	203, 922,
	204, 922,
	206, 922,
	207, 922,
	209, 922,
	210, 922,
	213, 922,
	214, 922,
	217, 922,
	219, 922,
	222, 922,
	223, 922,
	224, 922,
	225, 922,
	226, 922,
	228, 922,
	229, 922,
	230, 922,
	231, 922,
	236, 922,
	237, 922,
	238, 922,
	239, 922,
	241, 922,
	242, 922,
	244, 922,
	245, 922,
	246, 922,
	249, 922,
	250, 922,
	252, 922,
	254, 922,
	255, 922,
	256, 922,
	257, 922,
	258, 922,
	259, 922,
	260, 922,
	261, 922,
	263, 922,
	264, 922,
	265, 922,
	266, 922,
	267, 922,
	269, 922,
	270, 922,
	271, 922,
	272, 922,
	273, 922,
	274, 922,
	275, 922,
	276, 922,
	277, 922,
	279, 922,
	280, 922,
	281, 922,
	282, 922,
	283, 922,
	285, 922,
	286, 922,
	287, 922,
	288, 922,
	289, 922,
	290, 922,
	291, 922,
	293, 922,
	295, 922,
	296, 922,
	297, 922,
	298, 922,
	299, 922,
	300, 922,
	302, 922,
	303, 922,
	304, 922,
	305, 922,
	306, 922,
	307, 922,
	308, 922,
	310, 922,
	311, 922,
	312, 922,
	313, 922,
	314, 922,
	315, 922,
	316, 922,
	317, 922,
	318, 922,
	320, 922,
	321, 922,
	322, 922,
	323, 922,
	325, 922,
	326, 922,
	327, 922,
	328, 922,
	330, 922,
	331, 922,
	332, 922,
	333, 922,
	334, 922,
	335, 922,
	336, 922,
	337, 922,
	338, 922,
	339, 922,
	340, 922,
	341, 922,
	343, 922,
	344, 922,
	346, 922,
	347, 922,
	348, 922,
	349, 922,
	350, 922,
	351, 922,
	352, 922,
	353, 922,
	354, 922,
	356, 922,
	357, 922,
	358, 922,
	359, 922,
	362, 922,
	363, 922,
	364, 922,
	365, 922,
	367, 922,
	368, 922,
	370, 922,
	371, 922,
	374, 922,
	375, 922,
	376, 922,
	377, 922,
	379, 922,
	381, 922,
	382, 922,
	383, 922,
	384, 922,
	385, 922,
	386, 922,
	387, 922,
	389, 922,
	390, 922,
	391, 922,
	396, 922,
	397, 922,
	398, 922,
	399, 922,
	400, 922,
	401, 922,
	-2, 0,
	-1, 135,
	116, 893,
	129, 893,
	185, 893,
	212, 893,
	240, 893,
	248, 893,
	372, 893,
	-2, 886,
	-1, 140,
	1, 816,
	191, 816,
	269, 816,
	274, 816,
	427, 816,
	428, 816,
	-2, 0,
	-1, 142,
	1, 816,
	427, 816,
	428, 816,
	-2, 0,
	-1, 143,
	1, 816,
	427, 816,
	428, 816,
	-2, 0,
	-1, 144,
	1, 820,
	427, 820,
	428, 820,
	-2, 0,
	-1, 172,
	4, 929,
	5, 929,
	6, 929,
	7, 929,
	8, 929,
	9, 929,
	10, 929,
	21, 929,
	22, 929,
	23, 929,
	24, 929,
	26, 929,
	31, 929,
	32, 929,
	36, 929,
	37, 929,
	38, 929,
	39, 929,
	40, 929,
	41, 929,
	42, 929,
	43, 929,
	44, 929,
	45, 929,
	47, 929,
	48, 929,
	49, 929,
	50, 929,
	51, 929,
	52, 929,
	53, 929,
	54, 929,
	55, 929,
	56, 929,
	57, 929,
	58, 929,
	59, 929,
	61, 929,
	62, 929,
	64, 929,
	66, 929,
	67, 929,
	68, 929,
	69, 929,
	70, 929,
	72, 929,
	73, 929,
	74, 929,
	75, 929,
	77, 929,
	79, 929,
	80, 929,
	82, 929,
	83, 929,
	84, 929,
	85, 929,
	86, 929,
	87, 929,
	88, 929,
	89, 929,
	90, 929,
	91, 929,
	92, 929,
	93, 929,
	94, 929,
	95, 929,
	96, 929,
	97, 929,
	98, 929,
	99, 929,
	100, 929,
	101, 929,
	103, 929,
	105, 929,
	108, 929,
	109, 929,
	110, 929,
	112, 929,
	114, 929,
	115, 929,
	117, 929,
	118, 929,
	119, 929,
	120, 929,
	121, 929,
	122, 929,
	123, 929,
	124, 929,
	125, 929,
	126, 929,
	127, 929,
	128, 929,
	134, 929,
	135, 929,
	136, 929,
	137, 929,
	138, 929,
	139, 929,
	141, 929,
	143, 929,
	146, 929,
	147, 929,
	149, 929,
	150, 929,
	152, 929,
	153, 929,
	155, 929,
	156, 929,
	157, 929,
	158, 929,
	159, 929,
	160, 929,
	161, 929,
	162, 929,
	163, 929,
	164, 929,
	166, 929,
	167, 929,
	172, 929,
	173, 929,
	174, 929,
	176, 929,
	177, 929,
	178, 929,
	179, 929,
	180, 929,
	181, 929,
	182, 929,
	183, 929,
	184, 929,
	186, 929,
	188, 929,
	189, 929,
	190, 929,
	191, 929,
	192, 929,
	193, 929,
	194, 929,
	195, 929,
	196, 929,
	199, 929,
	200, 929,
	201, 929,
	203, 929,
	204, 929,
	206, 929,
	207, 929,
	208, 929,
	209, 929,
	210, 929,
	211, 929,
	213, 929,
	214, 929,
	217, 929,
	219, 929,
	220, 929,
	221, 929,
	222, 929,
	223, 929,
	224, 929,
	225, 929,
	226, 929,
	227, 929,
	228, 929,
	229, 929,
	230, 929,
	231, 929,
	232, 929,
	234, 929,
	235, 929,
	236, 929,
	237, 929,
	238, 929,
	239, 929,
	241, 929,
	242, 929,
	245, 929,
	246, 929,
	249, 929,
	250, 929,
	251, 929,
	252, 929,
	253, 929,
	254, 929,
	255, 929,
	256, 929,
	257, 929,
	258, 929,
	259, 929,
	260, 929,
	261, 929,
	263, 929,
	264, 929,
	265, 929,
	266, 929,
	267, 929,
	269, 929,
	270, 929,
	271, 929,
	272, 929,
	273, 929,
	274, 929,
	275, 929,
	276, 929,
	277, 929,
	279, 929,
	280, 929,
	281, 929,
	282, 929,
	283, 929,
	285, 929,
	286, 929,
	287, 929,
	288, 929,
	289, 929,
	290, 929,
	291, 929,
	293, 929,
	294, 929,
	295, 929,
	296, 929,
	297, 929,
	298, 929,
	299, 929,
	300, 929,
	302, 929,
	303, 929,
	304, 929,
	305, 929,
	306, 929,
	307, 929,
	308, 929,
	310, 929,
	311, 929,
	312, 929,
	313, 929,
	314, 929,
	315, 929,
	316, 929,
	317, 929,
	318, 929,
	319, 929,
	320, 929,
	321, 929,
	322, 929,
	323, 929,
	324, 929,
	325, 929,
	326, 929,
	327, 929,
	328, 929,
	330, 929,
	331, 929,
	332, 929,
	333, 929,
	334, 929,
	335, 929,
	336, 929,
	337, 929,
	338, 929,
	339, 929,
	340, 929,
	341, 929,
	343, 929,
	344, 929,
	346, 929,
	347, 929,
	348, 929,
	349, 929,
	350, 929,
	351, 929,
	352, 929,
	353, 929,
	354, 929,
	356, 929,
	357, 929,
	358, 929,
	359, 929,
	362, 929,
	363, 929,
	364, 929,
	365, 929,
	366, 929,
	367, 929,
	368, 929,
	370, 929,
	371, 929,
	374, 929,
	375, 929,
	376, 929,
	377, 929,
	378, 929,
	379, 929,
	381, 929,
	382, 929,
	383, 929,
	384, 929,
	385, 929,
	386, 929,
	387, 929,
	389, 929,
	390, 929,
	391, 929,
	396, 929,
	397, 929,
	398, 929,
	399, 929,
	400, 929,
	401, 929,
	402, 929,
	410, 929,
	415, 929,
	416, 929,
	417, 929,
	424, 929,
	430, 929,
	-2, 0,
	-1, 175,
	1, 57,
	428, 57,
	-2, 920,
	-1, 208,
	426, 1525,
	429, 1525,
	-2, 607,
	-1, 209,
	426, 1527,
	429, 1527,
	-2, 608,
	-1, 210,
	426, 1526,
	429, 1526,
	-2, 609,
	-1, 211,
	429, 1477,
	-2, 610,
	-1, 624,
	145, 1645,
	360, 1645,
	407, 1645,
	426, 1645,
	-2, 0,
	-1, 625,
	145, 1565,
	360, 1565,
	407, 1565,
	426, 1565,
	-2, 0,
	-1, 627,
	145, 1718,
	360, 1718,
	407, 1718,
	426, 1718,
	-2, 0,
	-1, 629,
	145, 1746,
	360, 1746,
	407, 1746,
	426, 1746,
	-2, 0,
	-1, 636,
	145, 1650,
	360, 1650,
	407, 1650,
	426, 1650,
	-2, 441,
	-1, 669,
	1, 537,
	423, 537,
	425, 537,
	427, 537,
	428, 537,
	-2, 0,
	-1, 670,
	1, 606,
	142, 606,
	423, 606,
	425, 606,
	427, 606,
	428, 606,
	-2, 0,
	-1, 676,
	1, 551,
	423, 551,
	425, 551,
	427, 551,
	428, 551,
	-2, 0,
	-1, 678,
	1, 555,
	423, 555,
	425, 555,
	427, 555,
	428, 555,
	-2, 0,
	-1, 680,
	1, 565,
	423, 565,
	425, 565,
	427, 565,
	428, 565,
	-2, 0,
	-1, 681,
	1, 571,
	423, 571,
	425, 571,
	427, 571,
	428, 571,
	-2, 0,
	-1, 682,
	1, 574,
	423, 574,
	425, 574,
	427, 574,
	428, 574,
	-2, 0,
	-1, 686,
	1, 588,
	423, 588,
	425, 588,
	427, 588,
	428, 588,
	-2, 0,
	-1, 687,
	1, 590,
	423, 590,
	425, 590,
	427, 590,
	428, 590,
	-2, 0,
	-1, 717,
	129, 933,
	212, 933,
	240, 933,
	-2, 889,
	-1, 725,
	129, 932,
	212, 932,
	240, 932,
	-2, 887,
	-1, 752,
	424, 1823,
	-2, 1226,
	-1, 753,
	424, 1824,
	-2, 1227,
	-1, 781,
	424, 1519,
	-2, 1510,
	-1, 787,
	5, 1055,
	-2, 1555,
	-1, 788,
	5, 1056,
	-2, 1560,
	-1, 789,
	5, 1057,
	-2, 1559,
	-1, 790,
	5, 1058,
	-2, 1743,
	-1, 791,
	5, 1059,
	-2, 1652,
	-1, 792,
	5, 1060,
	-2, 1711,
	-1, 793,
	5, 1061,
	-2, 1713,
	-1, 794,
	5, 1062,
	-2, 1723,
	-1, 795,
	5, 1063,
	-2, 1714,
	-1, 796,
	5, 1064,
	-2, 1715,
	-1, 797,
	5, 1065,
	-2, 1554,
	-1, 798,
	5, 1066,
	-2, 1754,
	-1, 799,
	5, 1067,
	-2, 1621,
	-1, 800,
	5, 1068,
	-2, 1659,
	-1, 801,
	5, 1069,
	-2, 1660,
	-1, 802,
	5, 1070,
	-2, 1625,
	-1, 803,
	5, 1071,
	424, 1534,
	-2, 1525,
	-1, 804,
	5, 1124,
	424, 1124,
	-2, 1789,
	-1, 809,
	424, 1535,
	-2, 1526,
	-1, 811,
	5, 1075,
	-2, 1787,
	-1, 812,
	5, 1076,
	-2, 1788,
	-1, 813,
	5, 1077,
	-2, 1624,
	-1, 814,
	5, 1078,
	-2, 1800,
	-1, 815,
	5, 1079,
	-2, 1626,
	-1, 816,
	5, 1080,
	-2, 1627,
	-1, 817,
	5, 1081,
	-2, 1628,
	-1, 818,
	5, 1082,
	-2, 1769,
	-1, 819,
	5, 1083,
	-2, 1798,
	-1, 820,
	5, 1084,
	-2, 1607,
	-1, 821,
	5, 1085,
	-2, 1608,
	-1, 822,
	5, 1099,
	-2, 1781,
	-1, 824,
	5, 1074,
	-2, 1777,
	-1, 825,
	5, 1074,
	-2, 1776,
	-1, 826,
	5, 1074,
	-2, 1793,
	-1, 827,
	5, 1091,
	-2, 1771,
	-1, 828,
	5, 1092,
	-2, 1556,
	-1, 829,
	5, 1102,
	-2, 1770,
	-1, 830,
	5, 1104,
	-2, 1808,
	-1, 832,
	5, 1115,
	-2, 1584,
	-1, 833,
	5, 1116,
	-2, 1802,
	-1, 834,
	5, 1118,
	-2, 1803,
	-1, 835,
	5, 1120,
	-2, 1804,
	-1, 836,
	5, 1122,
	-2, 1744,
	-1, 837,
	5, 1043,
	-2, 1634,
	-1, 838,
	5, 1044,
	-2, 1635,
	-1, 858,
	5, 1110,
	-2, 1733,
	-1, 876,
	5, 1109,
	-2, 1809,
	-1, 877,
	5, 1111,
	390, 1111,
	-2, 1772,
	-1, 878,
	5, 1112,
	390, 1112,
	-2, 1773,
	-1, 939,
	424, 1534,
	-2, 1525,
	-1, 1043,
	285, 1507,
	417, 1507,
	-2, 1506,
	-1, 1105,
	259, 918,
	-2, 734,
	-1, 1117,
	243, 1529,
	-2, 0,
	-1, 1160,
	1, 308,
	423, 308,
	427, 308,
	428, 308,
	-2, 892,
	-1, 1163,
	4, 1807,
	11, 1807,
	12, 1807,
	14, 1807,
	15, 1807,
	16, 1807,
	17, 1807,
	18, 1807,
	19, 1807,
	21, 1807,
	22, 1807,
	23, 1807,
	24, 1807,
	26, 1807,
	29, 1807,
	31, 1807,
	33, 1807,
	36, 1807,
	37, 1807,
	38, 1807,
	39, 1807,
	40, 1807,
	41, 1807,
	42, 1807,
	43, 1807,
	44, 1807,
	45, 1807,
	47, 1807,
	48, 1807,
	49, 1807,
	50, 1807,
	51, 1807,
	52, 1807,
	53, 1807,
	56, 1807,
	57, 1807,
	58, 1807,
	59, 1807,
	61, 1807,
	62, 1807,
	63, 1807,
	66, 1807,
	67, 1807,
	68, 1807,
	69, 1807,
	70, 1807,
	71, 1807,
	72, 1807,
	73, 1807,
	74, 1807,
	75, 1807,
	77, 1807,
	78, 1807,
	79, 1807,
	80, 1807,
	82, 1807,
	83, 1807,
	84, 1807,
	92, 1807,
	93, 1807,
	94, 1807,
	95, 1807,
	96, 1807,
	97, 1807,
	98, 1807,
	99, 1807,
	101, 1807,
	103, 1807,
	105, 1807,
	108, 1807,
	109, 1807,
	110, 1807,
	112, 1807,
	114, 1807,
	115, 1807,
	117, 1807,
	118, 1807,
	119, 1807,
	120, 1807,
	121, 1807,
	122, 1807,
	123, 1807,
	124, 1807,
	125, 1807,
	126, 1807,
	130, 1807,
	131, 1807,
	132, 1807,
	133, 1807,
	134, 1807,
	135, 1807,
	136, 1807,
	137, 1807,
	138, 1807,
	139, 1807,
	140, 1807,
	141, 1807,
	143, 1807,
	146, 1807,
	147, 1807,
	149, 1807,
	150, 1807,
	152, 1807,
	153, 1807,
	155, 1807,
	156, 1807,
	157, 1807,
	158, 1807,
	159, 1807,
	160, 1807,
	161, 1807,
	162, 1807,
	163, 1807,
	164, 1807,
	165, 1807,
	166, 1807,
	167, 1807,
	168, 1807,
	169, 1807,
	170, 1807,
	172, 1807,
	173, 1807,
	174, 1807,
	176, 1807,
	177, 1807,
	178, 1807,
	179, 1807,
	180, 1807,
	181, 1807,
	182, 1807,
	183, 1807,
	184, 1807,
	186, 1807,
	188, 1807,
	189, 1807,
	190, 1807,
	191, 1807,
	192, 1807,
	193, 1807,
	194, 1807,
	195, 1807,
	196, 1807,
	197, 1807,
	198, 1807,
	199, 1807,
	200, 1807,
	201, 1807,
	203, 1807,
	204, 1807,
	206, 1807,
	207, 1807,
	208, 1807,
	209, 1807,
	210, 1807,
	211, 1807,
	213, 1807,
	214, 1807,
	217, 1807,
	218, 1807,
	219, 1807,
	222, 1807,
	223, 1807,
	224, 1807,
	225, 1807,
	226, 1807,
	227, 1807,
	228, 1807,
	229, 1807,
	230, 1807,
	231, 1807,
	234, 1807,
	236, 1807,
	237, 1807,
	238, 1807,
	239, 1807,
	241, 1807,
	242, 1807,
	245, 1807,
	246, 1807,
	247, 1807,
	249, 1807,
	250, 1807,
	252, 1807,
	254, 1807,
	255, 1807,
	256, 1807,
	257, 1807,
	258, 1807,
	259, 1807,
	260, 1807,
	261, 1807,
	263, 1807,
	264, 1807,
	265, 1807,
	266, 1807,
	267, 1807,
	269, 1807,
	270, 1807,
	271, 1807,
	272, 1807,
	273, 1807,
	274, 1807,
	275, 1807,
	276, 1807,
	277, 1807,
	279, 1807,
	280, 1807,
	281, 1807,
	282, 1807,
	283, 1807,
	284, 1807,
	285, 1807,
	286, 1807,
	287, 1807,
	288, 1807,
	289, 1807,
	290, 1807,
	291, 1807,
	293, 1807,
	294, 1807,
	295, 1807,
	296, 1807,
	297, 1807,
	298, 1807,
	299, 1807,
	300, 1807,
	301, 1807,
	302, 1807,
	303, 1807,
	304, 1807,
	305, 1807,
	306, 1807,
	307, 1807,
	308, 1807,
	310, 1807,
	311, 1807,
	312, 1807,
	313, 1807,
	314, 1807,
	315, 1807,
	316, 1807,
	317, 1807,
	318, 1807,
	320, 1807,
	321, 1807,
	322, 1807,
	323, 1807,
	324, 1807,
	325, 1807,
	326, 1807,
	327, 1807,
	328, 1807,
	330, 1807,
	331, 1807,
	332, 1807,
	333, 1807,
	334, 1807,
	335, 1807,
	336, 1807,
	337, 1807,
	338, 1807,
	339, 1807,
	340, 1807,
	341, 1807,
	343, 1807,
	344, 1807,
	346, 1807,
	347, 1807,
	348, 1807,
	349, 1807,
	350, 1807,
	351, 1807,
	352, 1807,
	353, 1807,
	354, 1807,
	356, 1807,
	357, 1807,
	358, 1807,
	359, 1807,
	362, 1807,
	363, 1807,
	364, 1807,
	365, 1807,
	367, 1807,
	368, 1807,
	370, 1807,
	371, 1807,
	374, 1807,
	375, 1807,
	376, 1807,
	377, 1807,
	379, 1807,
	381, 1807,
	382, 1807,
	383, 1807,
	384, 1807,
	385, 1807,
	386, 1807,
	387, 1807,
	389, 1807,
	390, 1807,
	391, 1807,
	396, 1807,
	397, 1807,
	398, 1807,
	399, 1807,
	400, 1807,
	401, 1807,
	402, 1807,
	403, 1807,
	405, 1807,
	406, 1807,
	407, 1807,
	408, 1807,
	409, 1807,
	410, 1807,
	412, 1807,
	413, 1807,
	414, 1807,
	415, 1807,
	416, 1807,
	417, 1807,
	418, 1807,
	419, 1807,
	420, 1807,
	422, 1807,
	425, 1807,
	426, 1807,
	429, 1807,
	430, 1807,
	-2, 0,
	-1, 1182,
	145, 1718,
	360, 1718,
	407, 1718,
	426, 1718,
	-2, 0,
	-1, 1210,
	145, 1746,
	360, 1746,
	407, 1746,
	426, 1746,
	-2, 0,
	-1, 1211,
	191, 828,
	269, 828,
	274, 828,
	-2, 429,
	-1, 1284,
	1, 1761,
	423, 1761,
	425, 1761,
	426, 1761,
	427, 1761,
	428, 1761,
	-2, 586,
	-1, 1285,
	1, 1716,
	423, 1716,
	425, 1716,
	426, 1716,
	427, 1716,
	428, 1716,
	-2, 587,
	-1, 1297,
	129, 932,
	212, 932,
	240, 932,
	-2, 890,
	-1, 1387,
	116, 894,
	129, 894,
	185, 894,
	212, 894,
	240, 894,
	248, 894,
	372, 894,
	-2, 1280,
	-1, 1437,
	425, 1412,
	-2, 0,
	-1, 1441,
	191, 828,
	269, 828,
	274, 828,
	-2, 823,
	-1, 1475,
	116, 894,
	129, 894,
	185, 894,
	212, 894,
	240, 894,
	248, 894,
	372, 894,
	-2, 1002,
	-1, 1651,
	424, 1114,
	-2, 1102,
	-1, 1695,
	191, 828,
	269, 828,
	274, 828,
	-2, 431,
	-1, 1796,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1159,
	-1, 1797,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1160,
	-1, 1798,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1161,
	-1, 1799,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1162,
	-1, 1800,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1163,
	-1, 1801,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1164,
	-1, 1802,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1165,
	-1, 1803,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1166,
	-1, 1815,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1178,
	-1, 1816,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1179,
	-1, 1817,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1180,
	-1, 1820,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1185,
	-1, 1826,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1189,
	-1, 1828,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1197,
	-1, 1829,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1198,
	-1, 1830,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1199,
	-1, 1831,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1200,
	-1, 1919,
	5, 1071,
	145, 1423,
	424, 1534,
	-2, 1525,
	-1, 1920,
	145, 1424,
	-2, 1765,
	-1, 1921,
	145, 1425,
	-2, 1649,
	-1, 1922,
	145, 1426,
	-2, 1585,
	-1, 1923,
	145, 1427,
	-2, 1616,
	-1, 1924,
	145, 1428,
	-2, 1648,
	-1, 1925,
	145, 1429,
	-2, 1710,
	-1, 1994,
	1, 1003,
	82, 1003,
	116, 1003,
	129, 1003,
	146, 1003,
	151, 1003,
	154, 1003,
	176, 1003,
	185, 1003,
	194, 1003,
	208, 1003,
	212, 1003,
	227, 1003,
	240, 1003,
	243, 1003,
	248, 1003,
	292, 1003,
	294, 1003,
	372, 1003,
	380, 1003,
	393, 1003,
	394, 1003,
	404, 1003,
	423, 1003,
	425, 1003,
	427, 1003,
	428, 1003,
	429, 1003,
	-2, 1002,
	-1, 1999,
	424, 1511,
	-2, 1523,
	-1, 2080,
	425, 1482,
	429, 1482,
	-2, 1498,
	-1, 2166,
	424, 1113,
	-2, 1103,
	-1, 2220,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1187,
	-1, 2221,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1191,
	-1, 2227,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1193,
	-1, 2462,
	259, 918,
	-2, 734,
	-1, 2528,
	191, 828,
	269, 828,
	274, 828,
	-2, 428,
	-1, 2551,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1195,
	-1, 2558,
	189, 0,
	190, 0,
	234, 0,
	-2, 1214,
	-1, 2619,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1244,
	-1, 2620,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1245,
	-1, 2621,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1246,
	-1, 2625,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1250,
	-1, 2626,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1251,
	-1, 2627,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1252,
	-1, 2669,
	424, 1512,
	-2, 1524,
	-1, 2785,
	189, 0,
	190, 0,
	234, 0,
	-2, 1215,
	-1, 2788,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1218,
	-1, 2789,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1220,
	-1, 2931,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1219,
	-1, 2932,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1221,
	-1, 2942,
	189, 0,
	-2, 1253,
	-1, 3029,
	189, 0,
	-2, 1254,
	-1, 3126,
	39, 0,
	164, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1768,
}

const sqlPrivate = 57344

const sqlLast = 62851

var sqlAct = [...]int{

	809, 3125, 2887, 3135, 2970, 3192, 3101, 3103, 2714, 2113,
	3088, 3136, 2589, 3100, 3137, 2121, 1615, 3033, 1954, 2959,
	2902, 2923, 3124, 2213, 2727, 2732, 2842, 1783, 740, 1843,
	2857, 1047, 1621, 2248, 726, 1089, 2737, 2472, 2480, 2679,
	1300, 210, 1150, 634, 948, 2110, 500, 2946, 2485, 2246,
	2078, 2377, 2474, 500, 2328, 2146, 2678, 2366, 593, 2342,
	500, 1468, 495, 500, 500, 1040, 500, 210, 1622, 500,
	500, 1111, 2148, 808, 1986, 2122, 500, 2082, 1449, 1565,
	1566, 2820, 1562, 1574, 500, 1982, 1509, 2011, 1385, 1577,
	2002, 2081, 2353, 2642, 1987, 1500, 1780, 2063, 1855, 1470,
	734, 129, 3034, 1872, 2209, 551, 1395, 1775, 1059, 2327,
	2484, 547, 2443, 1146, 73, 1563, 1527, 1533, 1441, 1222,
	1488, 805, 1450, 1486, 1883, 1056, 1840, 1213, 2041, 585,
	2064, 1407, 1866, 2079, 1161, 1133, 1143, 2040, 1049, 1559,
	497, 781, 211, 924, 2115, 212, 2085, 1974, 2680, 496,
	927, 1459, 1915, 1989, 1376, 135, 1301, 2888, 206, 1299,
	1959, 129, 906, 614, 1478, 588, 766, 500, 500, 1583,
	725, 628, 1856, 1067, 1951, 136, 1159, 1130, 929, 1499,
	904, 480, 1589, 1440, 2384, 661, 1305, 1114, 2658, 2244,
	483, 2659, 1591, 1386, 1153, 1591, 1469, 1591, 608, 500,
	951, 500, 500, 1052, 500, 951, 500, 480, 2114, 2546,
	730, 579, 1616, 544, 500, 500, 483, 2524, 2492, 600,
	3222, 2065, 40, 3215, 1968, 602, 3214, 1968, 730, 1548,
	1968, 1316, 1317, 932, 3189, 3187, 3184, 44, 2856, 2856,
	1540, 3155, 1316, 1317, 2491, 1968, 1603, 3154, 935, 3151,
	3148, 1968, 731, 3152, 3149, 1968, 1319, 3145, 3122, 1088,
	1536, 1540, 1540, 2456, 1043, 3121, 578, 1319, 3120, 1540,
	3119, 3083, 1603, 3070, 1603, 2159, 129, 1540, 3064, 2065,
	3062, 2263, 2856, 1318, 2856, 718, 3060, 2264, 3058, 3031,
	2856, 1338, 2856, 2159, 1318, 580, 3084, 3000, 2998, 3018,
	1082, 1540, 2856, 59, 2645, 717, 2988, 2987, 60, 2980,
	1540, 1540, 2144, 1540, 2979, 1961, 938, 1198, 2856, 1062,
	907, 907, 2952, 2933, 735, 2916, 1540, 2159, 2883, 2506,
	2877, 1603, 1968, 2855, 1968, 2781, 2787, 2856, 1540, 921,
	2159, 2645, 944, 63, 1037, 1042, 1540, 1960, 908, 1076,
	1341, 1342, 1343, 1344, 480, 2878, 1069, 2751, 2743, 1068,
	1324, 2744, 2744, 483, 2664, 2654, 1185, 1698, 2665, 2655,
	807, 1324, 2648, 2582, 2513, 2339, 1968, 1540, 2448, 1968,
	2295, 2294, 2290, 2275, 1968, 1968, 1968, 2276, 1346, 1347,
	1348, 1968, 2176, 910, 2158, 911, 1968, 1045, 2159, 1346,
	1347, 1348, 2055, 2141, 2138, 1316, 1317, 1608, 1968, 2247,
	2074, 1359, 1360, 1361, 1540, 1967, 1607, 2118, 1087, 1968,
	1608, 2000, 733, 2506, 2300, 2301, 2095, 2448, 764, 1592,
	1319, 2212, 1592, 1365, 1592, 1186, 2187, 1539, 1339, 1445,
	1066, 175, 2493, 1181, 1070, 64, 1180, 1179, 1178, 1339,
	1177, 1176, 1175, 1174, 1985, 1173, 1172, 1318, 1171, 1081,
	1170, 2494, 3021, 1169, 1168, 1338, 1167, 1166, 1165, 2300,
	2301, 1869, 912, 138, 66, 172, 67, 909, 724, 723,
	722, 2155, 721, 720, 716, 715, 714, 713, 712, 1717,
	711, 710, 40, 709, 172, 708, 707, 706, 705, 172,
	2835, 1186, 2491, 701, 1345, 581, 700, 44, 108, 500,
	500, 174, 500, 1052, 1052, 500, 500, 500, 699, 500,
	659, 1340, 500, 658, 1341, 1342, 1343, 1344, 500, 657,
	174, 1870, 1340, 656, 1324, 174, 2156, 655, 500, 500,
	500, 500, 500, 1052, 1052, 934, 654, 1540, 653, 652,
	1052, 173, 651, 2306, 650, 2300, 2301, 649, 1356, 1366,
	648, 166, 1346, 1347, 1348, 2157, 172, 647, 1599, 167,
	173, 1590, 646, 1759, 1104, 173, 645, 1101, 1115, 1115,
	166, 644, 500, 500, 2058, 643, 1154, 642, 167, 641,
	137, 640, 639, 1993, 1052, 500, 1871, 1868, 2306, 1960,
	638, 1186, 174, 936, 623, 1354, 622, 172, 621, 137,
	620, 767, 1339, 63, 137, 619, 618, 500, 535, 534,
	506, 505, 504, 486, 485, 484, 172, 196, 500, 195,
	194, 2316, 1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325,
	1326, 1183, 173, 174, 1119, 1328, 1320, 1321, 1322, 1323,
	1325, 1326, 166, 193, 949, 192, 172, 191, 2799, 1060,
	167, 1221, 174, 190, 731, 1226, 1052, 1147, 189, 188,
	187, 1132, 186, 185, 1137, 1140, 2316, 184, 1345, 183,
	182, 137, 1873, 173, 2306, 579, 500, 172, 1162, 181,
	180, 179, 174, 166, 178, 1340, 40, 177, 176, 2745,
	2662, 167, 173, 500, 1116, 2380, 1386, 1105, 1108, 2269,
	2259, 44, 166, 2196, 2317, 64, 2075, 2068, 1357, 1722,
	167, 1485, 137, 174, 1397, 1471, 2103, 1906, 1904, 172,
	1902, 1900, 173, 1618, 1898, 1316, 1317, 1401, 1228, 1091,
	578, 2117, 166, 138, 66, 1072, 67, 1312, 1211, 3142,
	167, 1297, 1298, 3123, 3024, 3001, 2969, 2921, 2917, 2317,
	1319, 3019, 2316, 173, 172, 174, 1316, 1317, 2910, 580,
	2819, 137, 1571, 166, 1867, 581, 2818, 59, 108, 2806,
	2805, 167, 60, 2804, 2803, 2300, 2301, 1318, 1188, 2797,
	2796, 1319, 2795, 2794, 2767, 1338, 1355, 1617, 2164, 1208,
	174, 2766, 137, 1397, 1358, 173, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 166, 2764, 63, 1318, 2451,
	2668, 2639, 2638, 167, 2300, 2301, 1338, 2310, 2302, 2303,
	2304, 2305, 2307, 2308, 2637, 2566, 2562, 2028, 1545, 2555,
	173, 2447, 2375, 2335, 137, 2317, 1296, 1398, 1229, 1396,
	166, 2326, 2299, 2296, 1341, 1342, 1343, 1344, 167, 2293,
	1236, 3022, 1384, 2291, 1324, 2274, 2253, 2252, 2245, 2145,
	2550, 2309, 2310, 2302, 2303, 2304, 2305, 2307, 2308, 137,
	2517, 1994, 1877, 920, 2104, 1341, 1342, 1343, 1344, 731,
	718, 1312, 1346, 1347, 1348, 1324, 1718, 2042, 1543, 1311,
	3220, 500, 1316, 1317, 3200, 2208, 500, 3199, 1090, 2591,
	717, 3115, 3113, 3108, 2306, 1308, 1309, 3056, 3054, 64,
	3051, 3050, 1313, 1346, 1347, 1348, 3045, 1319, 1852, 3042,
	3017, 3016, 500, 1846, 2965, 2944, 2900, 2896, 1456, 2892,
	172, 2890, 1339, 1447, 2834, 2817, 2721, 138, 66, 2909,
	67, 2720, 2718, 2306, 1318, 1316, 1317, 1409, 1410, 2302,
	2303, 2304, 2305, 2307, 2308, 2696, 2695, 2685, 172, 2684,
	2650, 2557, 2519, 1339, 2507, 2466, 174, 2434, 2415, 581,
	1319, 2394, 108, 2393, 2338, 2273, 2272, 2258, 2236, 1316,
	1317, 1408, 1405, 1453, 1454, 2168, 2167, 1997, 1979, 1966,
	935, 1896, 935, 1380, 174, 1554, 1484, 1318, 1345, 1448,
	1439, 1438, 1466, 1437, 1319, 1436, 173, 2300, 2301, 1435,
	2318, 2319, 2320, 1434, 129, 1340, 166, 1433, 1432, 1479,
	1431, 1324, 1429, 1428, 167, 1467, 2102, 1427, 1426, 1345,
	1425, 1318, 1424, 731, 173, 1423, 1422, 1421, 1420, 1419,
	1418, 1417, 1381, 1379, 166, 137, 1340, 1207, 1193, 907,
	1164, 1158, 167, 3036, 1444, 2920, 1052, 500, 938, 2791,
	938, 1398, 2394, 951, 2763, 1442, 1619, 2315, 2657, 1476,
	2653, 2262, 2161, 137, 1324, 1980, 1446, 2300, 2301, 2515,
	1377, 500, 951, 500, 500, 1480, 3055, 2475, 831, 2915,
	2879, 500, 1494, 1223, 2660, 1473, 2509, 2508, 1717, 2065,
	1717, 1471, 1346, 1347, 1348, 1244, 1414, 1225, 500, 2280,
	1412, 1717, 1415, 2359, 1294, 500, 1413, 500, 2418, 500,
	1704, 1555, 2279, 500, 2278, 2277, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 1424, 2306, 1570, 2218, 2030,
	1905, 1903, 1524, 1901, 1899, 1526, 1508, 1897, 1530, 1220,
	3020, 2044, 1339, 1572, 1224, 1052, 2694, 1329, 1327, 1328,
	1320, 1321, 1322, 1323, 1325, 1326, 1403, 1606, 2968, 1616,
	1567, 2526, 902, 500, 1052, 210, 500, 500, 1052, 2302,
	2303, 2304, 2305, 2307, 2308, 1052, 1869, 2429, 210, 500,
	1580, 1522, 500, 500, 2947, 1424, 500, 480, 2114, 1069,
	1504, 2593, 1068, 1884, 765, 1551, 483, 903, 3143, 2267,
	1534, 2166, 1430, 1411, 2316, 3153, 1693, 3150, 2487, 951,
	2304, 2305, 2307, 2308, 2674, 1553, 3097, 1684, 1052, 1052,
	1538, 500, 1529, 2728, 2152, 1340, 202, 500, 543, 1692,
	513, 1720, 210, 500, 1233, 500, 1870, 500, 3177, 500,
	1537, 500, 3069, 3178, 2869, 744, 2177, 2530, 1132, 896,
	3144, 500, 524, 500, 894, 3219, 2994, 2991, 2990, 892,
	2989, 1383, 500, 1749, 1728, 1705, 1587, 1316, 1317, 2710,
	2707, 889, 1268, 2706, 2671, 2516, 2670, 934, 1585, 934,
	1937, 898, 1582, 1162, 729, 919, 2257, 2317, 1322, 1323,
	1325, 1326, 1319, 1747, 2256, 500, 2255, 2254, 1225, 951,
	1594, 1871, 1868, 1596, 2013, 480, 1598, 1688, 2222, 1695,
	1601, 542, 2143, 512, 483, 2060, 2054, 2051, 480, 1318,
	2032, 1609, 1762, 1611, 1827, 1443, 525, 483, 1065, 1716,
	2886, 1895, 1613, 1894, 1208, 936, 1685, 936, 1779, 1320,
	1321, 1322, 1323, 1325, 1326, 1224, 1708, 1707, 1893, 1892,
	1717, 1714, 1267, 728, 1785, 2111, 2928, 2533, 1610, 2004,
	2004, 1200, 1614, 1225, 2031, 1781, 1782, 1709, 1756, 1093,
	2699, 2003, 480, 1757, 1231, 2713, 703, 1724, 1326, 1857,
	1858, 483, 951, 2417, 3068, 1842, 2073, 1873, 2016, 197,
	1738, 2312, 2313, 2314, 2023, 1612, 1324, 1857, 2311, 2309,
	2310, 2302, 2303, 2304, 2305, 2307, 2308, 3117, 1686, 1315,
	1224, 1731, 1726, 1727, 1842, 1279, 730, 2300, 2301, 1501,
	2022, 1586, 2535, 1206, 500, 2865, 500, 536, 1914, 2972,
	1918, 1918, 1928, 1930, 1935, 1245, 1857, 1761, 1760, 2300,
	2301, 718, 1711, 2534, 718, 718, 1498, 1958, 2687, 2193,
	951, 500, 2162, 1201, 1873, 3169, 1489, 1850, 1758, 1490,
	500, 1771, 1848, 500, 1772, 1773, 951, 613, 1502, 1503,
	500, 1241, 2210, 2211, 731, 2048, 2308, 1891, 500, 1867,
	1884, 203, 2482, 1998, 2576, 1881, 2426, 731, 500, 1263,
	2180, 731, 2421, 1316, 1317, 1718, 2042, 1718, 2042, 2315,
	3139, 500, 2182, 1293, 1052, 1521, 1506, 1541, 1718, 2042,
	1853, 3047, 2015, 1266, 935, 3177, 500, 951, 1319, 541,
	500, 500, 1824, 1496, 527, 526, 1549, 1489, 1654, 2531,
	1490, 935, 2183, 1480, 1995, 500, 1406, 1264, 500, 1504,
	727, 500, 1755, 1491, 2181, 1318, 2306, 2005, 1981, 2529,
	2437, 1879, 1991, 1992, 2483, 1493, 1712, 2863, 205, 2035,
	500, 2017, 2019, 1043, 487, 1926, 2049, 500, 2306, 500,
	1873, 500, 731, 2573, 500, 2034, 500, 2708, 500, 907,
	500, 500, 938, 500, 1052, 1052, 1052, 1955, 1956, 1052,
	1946, 1976, 1977, 1972, 1964, 1965, 540, 500, 500, 938,
	500, 3202, 2062, 2482, 1276, 1971, 1495, 2142, 1476, 1696,
	890, 3140, 1232, 2198, 1491, 890, 2008, 2014, 2009, 1591,
	891, 2025, 1324, 1748, 2316, 3081, 1493, 2136, 2137, 2061,
	2034, 2033, 890, 2043, 2045, 2046, 2047, 203, 2574, 900,
	1212, 2098, 899, 2108, 2050, 199, 2316, 1822, 1825, 1092,
	1346, 1347, 1348, 1746, 2697, 2001, 2151, 2052, 2688, 204,
	480, 533, 1069, 1723, 2864, 2066, 541, 1510, 500, 483,
	3168, 1320, 1321, 1322, 1323, 1325, 1326, 1495, 1496, 3141,
	2096, 2169, 1277, 2009, 528, 1514, 750, 2773, 129, 2973,
	2201, 1496, 2224, 2132, 1821, 2938, 3195, 201, 2053, 2139,
	1339, 129, 2996, 951, 1202, 500, 2154, 2317, 2134, 2129,
	2120, 2130, 1374, 2131, 205, 2125, 500, 2133, 500, 704,
	543, 1841, 2127, 2140, 1873, 2408, 1511, 1162, 1314, 2317,
	1217, 1730, 198, 2153, 2406, 538, 500, 500, 500, 1242,
	500, 2163, 1205, 540, 3079, 2410, 2271, 1278, 2009, 1975,
	1525, 1990, 2769, 1784, 488, 489, 1876, 1718, 1715, 500,
	1504, 1849, 1496, 2925, 730, 202, 2173, 2092, 2174, 2405,
	539, 2753, 3080, 1199, 2775, 3138, 200, 2200, 2135, 3176,
	3174, 1409, 1410, 1340, 2409, 1628, 1304, 1243, 1250, 2412,
	1240, 2197, 2175, 1515, 3167, 2170, 3006, 2172, 1217, 2899,
	2470, 199, 2106, 542, 1557, 2178, 1455, 1823, 1218, 2774,
	1197, 934, 1713, 1219, 537, 204, 1492, 1184, 2311, 2309,
	2310, 2302, 2303, 2304, 2305, 2307, 2308, 1489, 934, 1217,
	1490, 503, 491, 490, 2440, 2225, 1885, 1505, 3203, 2444,
	2311, 2309, 2310, 2302, 2303, 2304, 2305, 2307, 2308, 1838,
	2203, 3209, 2982, 201, 1516, 1517, 1592, 500, 2924, 2981,
	2250, 2251, 1462, 1512, 2199, 2963, 1703, 543, 1303, 936,
	1836, 2628, 3193, 3039, 2260, 2207, 1218, 2815, 2868, 492,
	493, 1219, 538, 2205, 2673, 2867, 936, 1492, 198, 1513,
	2471, 2572, 1465, 2390, 1329, 1327, 1328, 1320, 1321, 1322,
	1323, 1325, 1326, 2386, 2107, 1581, 1569, 1218, 1628, 1628,
	1973, 1568, 1219, 1564, 1491, 1556, 2036, 539, 3089, 1767,
	1999, 202, 529, 1752, 1463, 1699, 1493, 2367, 1701, 2733,
	2903, 2223, 200, 3194, 2964, 1303, 2396, 2395, 2356, 2216,
	1725, 731, 1702, 951, 1496, 2191, 1970, 2192, 2926, 2340,
	542, 1302, 2337, 1969, 2347, 2348, 2077, 2076, 2449, 500,
	2094, 537, 500, 3196, 606, 2349, 1518, 1832, 1117, 500,
	530, 1532, 500, 500, 951, 1833, 1374, 1495, 1834, 1304,
	1129, 1839, 500, 500, 500, 1118, 3208, 2266, 500, 1531,
	728, 500, 577, 36, 2715, 3181, 1579, 2629, 500, 500,
	500, 500, 500, 2630, 599, 2370, 531, 1127, 532, 2816,
	1464, 1768, 500, 500, 2368, 935, 1528, 2866, 1302, 1230,
	500, 691, 691, 935, 935, 1519, 3, 935, 2379, 1251,
	583, 2889, 500, 1052, 2961, 500, 2363, 2439, 1502, 1503,
	2821, 951, 739, 739, 2037, 2038, 2371, 2372, 2361, 951,
	2643, 935, 2364, 2358, 576, 35, 951, 1291, 2391, 1889,
	2362, 1273, 1496, 2341, 1271, 2387, 1261, 2962, 500, 2445,
	500, 1259, 500, 2898, 2374, 1052, 500, 1257, 500, 1052,
	1052, 1052, 3183, 938, 2420, 2943, 2261, 500, 2814, 1487,
	2457, 938, 938, 500, 1104, 938, 1255, 2427, 500, 2712,
	500, 2381, 1628, 2332, 2333, 2334, 2344, 500, 1253, 1835,
	2329, 692, 692, 1247, 2351, 2352, 2556, 1837, 2357, 938,
	2502, 2292, 2369, 1125, 500, 2235, 2435, 2478, 2477, 2411,
	2416, 2383, 1052, 1052, 575, 32, 2009, 2171, 1494, 2489,
	1104, 2422, 2505, 2460, 2059, 2425, 2397, 1888, 2400, 574,
	79, 2450, 500, 2431, 604, 605, 2029, 2188, 2436, 2453,
	2430, 1553, 2423, 1494, 2853, 1128, 2424, 2522, 36, 1547,
	2446, 572, 28, 2897, 1483, 2392, 1292, 500, 951, 500,
	500, 951, 500, 2398, 2527, 2402, 2403, 1492, 573, 78,
	1194, 2850, 1126, 1534, 597, 598, 2532, 500, 1745, 1534,
	1290, 806, 942, 2330, 1272, 2195, 3134, 1270, 2514, 1260,
	2194, 2378, 731, 888, 1258, 582, 2190, 2495, 2476, 1754,
	1256, 1735, 129, 1687, 1416, 2540, 1100, 2428, 570, 23,
	35, 2851, 3086, 2501, 2839, 2731, 2520, 2521, 2584, 1254,
	951, 2692, 481, 693, 693, 2690, 2486, 498, 2473, 2559,
	951, 1252, 500, 2488, 520, 2486, 1246, 2233, 571, 24,
	2672, 546, 569, 30, 589, 596, 1124, 546, 481, 2458,
	589, 611, 1653, 2461, 2462, 2463, 2528, 617, 2231, 2568,
	2569, 2570, 568, 21, 2469, 637, 2537, 2594, 2112, 2100,
	2099, 2542, 2496, 2497, 2498, 2541, 2499, 2500, 566, 20,
	2544, 567, 19, 2097, 2538, 2091, 510, 1605, 556, 15,
	32, 1604, 934, 3010, 1602, 1600, 1597, 1595, 1593, 1458,
	934, 934, 1546, 2564, 934, 79, 2511, 2512, 1544, 1535,
	1523, 1781, 2598, 557, 16, 2640, 694, 694, 1744, 2575,
	2577, 2578, 1520, 500, 518, 2595, 1507, 28, 934, 1781,
	2608, 2583, 1497, 2503, 2590, 500, 893, 895, 516, 2597,
	3178, 951, 2632, 2846, 78, 2919, 2847, 2918, 546, 546,
	936, 916, 2214, 695, 695, 2228, 937, 2607, 936, 936,
	2636, 2523, 936, 1462, 1721, 2661, 2229, 2605, 1625, 2234,
	565, 57, 564, 56, 917, 1653, 1653, 2346, 500, 2849,
	498, 3012, 498, 498, 23, 1057, 936, 498, 2021, 2852,
	935, 555, 55, 1465, 2700, 481, 1071, 2656, 2633, 129,
	2644, 2646, 2647, 2742, 2641, 2649, 563, 12, 2373, 500,
	500, 1460, 500, 2709, 24, 2711, 1504, 500, 30, 554,
	50, 2704, 2215, 561, 47, 1463, 562, 48, 935, 2663,
	951, 500, 1306, 553, 49, 1052, 1288, 1289, 21, 2004,
	2676, 1389, 560, 7, 1461, 1394, 559, 6, 558, 38,
	2020, 2722, 500, 1732, 20, 918, 3049, 19, 938, 584,
	2746, 552, 37, 2698, 15, 2004, 2735, 500, 500, 1052,
	1052, 1052, 2034, 500, 500, 2705, 2018, 2858, 2738, 3026,
	2739, 2652, 2822, 2442, 2848, 500, 2734, 2039, 2759, 16,
	2442, 1625, 1625, 2024, 500, 2719, 938, 2230, 1310, 2717,
	2716, 2056, 2725, 2724, 2026, 2232, 2772, 951, 1316, 1317,
	3085, 1464, 2748, 1307, 2895, 2729, 2667, 2736, 2119, 1316,
	1317, 2740, 2101, 2755, 2090, 513, 935, 2747, 607, 2777,
	1770, 2760, 2761, 1319, 1957, 1694, 1620, 2504, 3191, 2754,
	511, 3207, 2790, 2691, 1386, 2693, 57, 737, 56, 691,
	2786, 2762, 500, 2300, 2301, 1316, 1317, 2009, 2185, 2184,
	1318, 2579, 2518, 509, 2185, 2186, 1235, 55, 2765, 1653,
	739, 1318, 1234, 1890, 1865, 508, 1275, 2792, 2571, 1274,
	1384, 1628, 12, 1382, 2955, 2913, 2750, 2726, 2681, 2467,
	2465, 2105, 2778, 1573, 938, 50, 1287, 1286, 515, 47,
	2125, 1269, 48, 519, 1265, 1262, 738, 1248, 512, 49,
	1204, 500, 1060, 875, 786, 949, 1697, 2344, 7, 514,
	2813, 951, 6, 951, 38, 901, 702, 2971, 1281, 2689,
	3096, 500, 500, 500, 689, 2404, 1734, 37, 1249, 692,
	1558, 1075, 1736, 1080, 2360, 1086, 500, 1978, 3078, 2800,
	2270, 500, 3032, 500, 2937, 1887, 500, 500, 500, 500,
	500, 1402, 1938, 2756, 2757, 2758, 53, 500, 500, 1052,
	775, 951, 2859, 1052, 2581, 2827, 2829, 2833, 857, 935,
	2840, 500, 500, 2675, 2587, 1625, 2084, 934, 2824, 2825,
	498, 1099, 951, 498, 2083, 1052, 498, 498, 498, 935,
	1057, 2861, 954, 1122, 2828, 500, 2830, 1706, 780, 498,
	2838, 1719, 2165, 1917, 2768, 2885, 1624, 783, 935, 498,
	498, 498, 498, 1057, 1626, 934, 2905, 785, 784, 1627,
	1104, 1628, 2894, 2881, 951, 2891, 2907, 1404, 2880, 782,
	2478, 2914, 2906, 1623, 2093, 936, 2904, 938, 2123, 679,
	1191, 1710, 935, 2912, 1847, 1882, 2884, 1196, 2265, 1399,
	951, 755, 2929, 637, 596, 777, 1880, 938, 1192, 754,
	2823, 693, 2365, 2481, 2666, 2908, 498, 2901, 2927, 2836,
	1766, 2009, 2206, 936, 1763, 517, 938, 2297, 1157, 1943,
	1936, 1932, 1295, 1375, 2124, 2669, 951, 1227, 1203, 2870,
	500, 2949, 500, 2934, 951, 500, 758, 2875, 1628, 637,
	2945, 1845, 1391, 500, 2240, 2376, 2837, 2490, 2160, 951,
	938, 1774, 915, 934, 914, 913, 3102, 3099, 2771, 1700,
	2009, 2958, 2950, 2951, 2179, 1368, 771, 2871, 2345, 500,
	2826, 2975, 2452, 2977, 2876, 1097, 2976, 3048, 1367, 897,
	3041, 1216, 1215, 2486, 1628, 1628, 2974, 1214, 2389, 2378,
	500, 3201, 736, 2882, 694, 1052, 2686, 498, 2993, 171,
	500, 168, 1628, 1628, 170, 2862, 169, 2956, 2681, 2702,
	2954, 936, 2992, 2438, 498, 2872, 2873, 2953, 82, 500,
	935, 34, 33, 107, 3015, 106, 3008, 105, 2984, 104,
	103, 695, 102, 1628, 3009, 3014, 101, 2997, 500, 2999,
	2893, 3013, 2681, 3003, 500, 2738, 3007, 3005, 100, 99,
	98, 97, 500, 96, 935, 95, 935, 94, 93, 92,
	935, 2478, 3025, 91, 935, 90, 89, 3030, 88, 3044,
	87, 3038, 86, 85, 3037, 84, 633, 630, 2009, 81,
	500, 500, 80, 31, 26, 111, 112, 500, 938, 25,
	77, 76, 29, 3059, 18, 11, 17, 500, 1052, 3046,
	3061, 22, 134, 500, 133, 132, 934, 1052, 1052, 131,
	130, 500, 14, 500, 13, 126, 2957, 128, 3035, 3063,
	127, 125, 938, 124, 938, 3067, 934, 123, 938, 3066,
	3075, 122, 938, 500, 121, 3082, 500, 3092, 500, 10,
	951, 8, 3072, 2985, 2986, 934, 110, 9, 3104, 3073,
	3074, 2922, 2525, 70, 3111, 3110, 71, 3112, 3109, 3114,
	3094, 27, 43, 3105, 936, 3107, 42, 3098, 41, 109,
	3118, 1851, 162, 161, 3106, 500, 160, 159, 3116, 934,
	2681, 155, 154, 158, 936, 156, 157, 153, 3133, 1389,
	120, 164, 3132, 3130, 3131, 163, 1938, 1938, 1653, 500,
	151, 148, 3157, 936, 147, 150, 152, 2832, 500, 3158,
	149, 3159, 617, 3161, 2681, 146, 2681, 546, 3166, 165,
	2681, 3146, 119, 3163, 2681, 500, 3164, 3165, 3052, 3011,
	118, 2237, 2238, 1942, 1458, 117, 116, 936, 1474, 3175,
	937, 3173, 115, 498, 3172, 114, 5, 3179, 2, 3104,
	3182, 3185, 3186, 3180, 3188, 1, 0, 0, 0, 1628,
	3160, 0, 3162, 3190, 0, 3053, 0, 0, 0, 0,
	0, 0, 0, 3198, 3197, 0, 0, 935, 0, 935,
	0, 0, 3204, 3206, 3205, 0, 0, 3071, 0, 0,
	0, 0, 0, 0, 0, 1938, 1938, 1938, 1462, 0,
	0, 0, 0, 3212, 3213, 3216, 3217, 3218, 3210, 3211,
	0, 0, 0, 0, 1625, 3223, 0, 934, 949, 0,
	0, 0, 2300, 2301, 0, 2318, 2319, 2320, 1465, 3221,
	2323, 2324, 2325, 0, 0, 0, 0, 0, 0, 0,
	3076, 0, 3077, 0, 2935, 938, 1460, 938, 1653, 0,
	0, 934, 0, 934, 0, 0, 2125, 934, 0, 0,
	1463, 934, 0, 0, 0, 3093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 481, 1461,
	2935, 0, 2315, 0, 0, 0, 0, 0, 1784, 0,
	0, 0, 0, 0, 0, 2355, 0, 0, 0, 0,
	0, 0, 1071, 1784, 498, 1552, 0, 0, 501, 936,
	0, 936, 498, 0, 0, 936, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 1653, 0, 0, 3156, 1578,
	0, 0, 0, 0, 0, 0, 498, 2681, 498, 2681,
	498, 0, 0, 0, 546, 0, 1464, 0, 0, 209,
	0, 2306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1625, 0, 0, 0, 0, 0,
	0, 1653, 1653, 0, 0, 209, 2322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1653,
	1653, 0, 0, 0, 637, 0, 481, 1071, 589, 0,
	2321, 0, 0, 0, 0, 0, 0, 0, 0, 481,
	1071, 0, 0, 1057, 498, 0, 0, 637, 0, 1628,
	1653, 0, 0, 0, 0, 0, 0, 0, 0, 2316,
	0, 0, 2354, 0, 0, 0, 0, 0, 0, 0,
	0, 1625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 637, 0, 0, 0, 0, 0, 498, 0,
	0, 0, 0, 481, 498, 0, 498, 0, 498, 0,
	498, 1628, 498, 0, 934, 0, 934, 0, 0, 1938,
	1938, 0, 1750, 0, 1751, 0, 0, 1625, 1625, 0,
	0, 0, 0, 498, 1784, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1625, 1625, 0, 952, 0,
	0, 1053, 2317, 952, 2552, 2553, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 637, 0, 0, 0,
	0, 0, 936, 0, 936, 0, 1625, 1942, 1942, 0,
	0, 0, 0, 0, 0, 0, 1628, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1938, 1938,
	1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938,
	1938, 1938, 1938, 1938, 1938, 1938, 1938, 0, 1938, 0,
	0, 0, 0, 0, 0, 0, 507, 0, 0, 0,
	0, 0, 0, 2609, 2610, 2611, 2612, 2613, 2614, 2615,
	2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625,
	2626, 2627, 0, 2631, 0, 0, 2312, 2313, 2314, 0,
	0, 0, 0, 2311, 2309, 2310, 2302, 2303, 2304, 2305,
	2307, 2308, 0, 0, 0, 0, 1942, 1942, 1942, 0,
	510, 0, 0, 0, 0, 0, 1653, 1457, 2300, 2301,
	0, 2318, 2319, 2320, 0, 617, 0, 546, 0, 0,
	1316, 1317, 0, 0, 0, 0, 2783, 0, 0, 0,
	0, 0, 937, 0, 0, 1316, 1317, 0, 518, 0,
	0, 2027, 546, 0, 0, 1319, 0, 0, 0, 937,
	0, 546, 516, 0, 498, 0, 0, 0, 0, 0,
	1319, 2012, 0, 0, 0, 0, 1316, 1317, 2315, 498,
	0, 2057, 1318, 0, 0, 0, 0, 0, 0, 498,
	1338, 0, 0, 0, 0, 0, 2070, 1318, 2072, 0,
	0, 1319, 498, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 498, 0, 0,
	0, 481, 2067, 0, 0, 0, 2300, 2301, 1318, 2318,
	2319, 2320, 1625, 0, 2549, 2116, 2080, 2116, 0, 1071,
	0, 0, 498, 0, 2782, 0, 0, 2306, 0, 1341,
	1342, 1343, 1344, 0, 0, 0, 0, 742, 0, 1324,
	0, 1578, 0, 2853, 1341, 1342, 1343, 1344, 2012, 0,
	546, 0, 498, 0, 1324, 498, 0, 498, 0, 498,
	0, 498, 498, 0, 1057, 0, 2315, 1346, 1347, 1348,
	2850, 1053, 1053, 2843, 0, 0, 2321, 0, 2149, 596,
	0, 2012, 1346, 1347, 1348, 1324, 2841, 0, 0, 0,
	0, 2845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 1053, 0, 0, 2316, 0, 0, 1053, 0,
	2851, 0, 0, 1346, 1347, 1348, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 513,
	0, 0, 1339, 0, 0, 2306, 0, 0, 2844, 0,
	0, 0, 0, 0, 511, 0, 0, 0, 0, 589,
	0, 0, 1053, 0, 0, 0, 1653, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 509, 0, 0,
	1942, 1942, 0, 0, 0, 0, 0, 0, 0, 508,
	0, 0, 0, 1345, 2321, 0, 498, 0, 2317, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 1345, 1071,
	1340, 0, 515, 0, 0, 0, 0, 519, 1653, 0,
	0, 0, 512, 2316, 0, 1340, 0, 498, 498, 498,
	0, 498, 0, 514, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	498, 0, 2846, 0, 0, 2847, 1340, 0, 0, 1942,
	1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942,
	1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942, 0, 1942,
	0, 0, 1625, 0, 0, 0, 0, 0, 2849, 0,
	0, 0, 0, 1653, 0, 0, 0, 0, 2852, 0,
	0, 0, 2312, 2313, 2314, 0, 2317, 0, 0, 2311,
	2309, 2310, 2302, 2303, 2304, 2305, 2307, 2308, 0, 0,
	0, 1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326,
	1938, 0, 0, 0, 1625, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2942, 0, 1938, 1327, 1328,
	1320, 1321, 1322, 1323, 1325, 1326, 0, 0, 0, 2300,
	2301, 0, 2318, 2319, 2320, 0, 0, 0, 0, 0,
	0, 0, 0, 2848, 0, 0, 1073, 2561, 1077, 0,
	1083, 0, 2966, 0, 0, 0, 0, 0, 0, 1625,
	2312, 2313, 2314, 0, 0, 0, 0, 2311, 2309, 2310,
	2302, 2303, 2304, 2305, 2307, 2308, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 2315,
	0, 937, 937, 0, 0, 937, 0, 0, 0, 0,
	546, 0, 0, 546, 0, 0, 0, 0, 0, 1938,
	546, 0, 0, 546, 546, 0, 0, 0, 2413, 1474,
	2414, 0, 0, 498, 2012, 2385, 0, 0, 0, 2012,
	0, 0, 2385, 0, 0, 0, 0, 0, 0, 2012,
	2385, 2012, 2385, 2385, 3029, 0, 0, 0, 2432, 810,
	2433, 0, 0, 498, 498, 1190, 1316, 1317, 2306, 0,
	0, 1552, 1195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 498, 0, 0, 1057, 0, 0, 0,
	0, 1319, 2454, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 2464, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2321, 1318, 1578,
	0, 1578, 0, 498, 0, 0, 1338, 498, 0, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 498, 0,
	0, 0, 0, 0, 1057, 0, 2316, 0, 0, 2012,
	0, 546, 145, 0, 0, 0, 0, 39, 2012, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 140,
	2226, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 1341, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 1053, 1324, 0, 0, 46, 142,
	0, 952, 0, 1071, 0, 0, 0, 0, 0, 0,
	45, 0, 51, 1369, 1370, 1371, 1372, 1373, 0, 0,
	952, 0, 0, 1346, 1347, 1348, 0, 0, 2536, 2317,
	1057, 498, 52, 498, 0, 0, 54, 0, 0, 0,
	0, 58, 1388, 0, 143, 0, 0, 1400, 498, 59,
	72, 0, 0, 0, 60, 61, 0, 0, 0, 953,
	0, 0, 1054, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2592, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 209, 0, 0, 1053, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 209, 0, 0, 0,
	0, 1942, 0, 2312, 2313, 2314, 0, 0, 0, 1345,
	2311, 2309, 2310, 2302, 2303, 2304, 2305, 2307, 2308, 0,
	0, 0, 0, 0, 0, 0, 1340, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 1053, 1942, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 1451, 1451, 1451, 0, 0, 0, 0, 937, 0,
	0, 64, 0, 0, 546, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 138,
	66, 0, 67, 0, 68, 0, 2683, 0, 144, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 952, 0, 637,
	0, 83, 0, 0, 108, 0, 0, 0, 0, 0,
	1942, 0, 0, 141, 0, 0, 0, 1329, 1327, 1328,
	1320, 1321, 1322, 1323, 1325, 1326, 174, 0, 0, 0,
	2012, 1578, 0, 1578, 0, 0, 0, 0, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 498, 0, 2752, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 2012, 937, 0, 166, 0, 0, 0,
	952, 0, 0, 0, 167, 0, 0, 0, 2149, 2149,
	0, 0, 0, 0, 596, 596, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 1071, 0, 4, 0,
	0, 0, 0, 0, 0, 498, 0, 0, 0, 0,
	0, 0, 1054, 1054, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	0, 0, 1054, 1054, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 2801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1053, 1054, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 494, 1071, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 2012, 2385, 2012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2683, 1071, 0, 0,
	0, 0, 2012, 0, 2385, 1054, 0, 1071, 1071, 498,
	2012, 2385, 1053, 1053, 1053, 0, 0, 1053, 498, 498,
	0, 0, 0, 0, 0, 2911, 0, 0, 0, 0,
	2683, 0, 1071, 2080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1764, 0, 1769, 0, 0, 0, 2012, 0, 1776, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 0, 1826, 0, 1828, 1829, 1830, 1831,
	0, 0, 0, 0, 946, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 1854, 0, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	1388, 0, 0, 0, 1878, 2300, 2301, 0, 2318, 2319,
	2320, 2012, 0, 2385, 0, 0, 2960, 0, 0, 0,
	0, 0, 0, 2560, 498, 0, 0, 0, 2683, 0,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 3002, 1316, 1317,
	0, 0, 0, 1934, 0, 1945, 1947, 1952, 0, 0,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2683, 1319, 2683, 2315, 0, 0, 2683, 0,
	0, 498, 2683, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2592,
	0, 0, 0, 0, 0, 546, 0, 0, 0, 0,
	0, 0, 0, 2960, 2306, 0, 0, 0, 0, 0,
	0, 0, 2219, 0, 0, 0, 0, 0, 0, 0,
	0, 2069, 0, 2071, 0, 0, 0, 1341, 1342, 1343,
	1344, 2012, 2385, 0, 0, 0, 0, 1324, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 498, 0,
	0, 0, 0, 2321, 2385, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 1071, 1346, 1347, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2316, 0, 3090, 0, 0, 1071, 0, 498,
	0, 0, 0, 0, 0, 0, 548, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	579, 0, 550, 0, 0, 0, 2592, 0, 0, 0,
	0, 40, 952, 0, 0, 1054, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 44, 0, 0, 0,
	1071, 0, 0, 0, 1095, 2683, 0, 2683, 0, 2012,
	1113, 953, 0, 0, 0, 2317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 2960, 0, 0, 0,
	0, 1345, 0, 1136, 1136, 1136, 1064, 0, 0, 776,
	74, 1053, 0, 0, 0, 0, 0, 0, 1340, 952,
	0, 0, 0, 0, 580, 0, 0, 952, 0, 0,
	0, 0, 59, 0, 952, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 1054, 0, 0, 1053, 1053, 1053,
	1189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 63, 1054, 0, 0, 0, 1054, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 0, 0, 2312,
	2313, 2314, 0, 0, 0, 0, 2311, 2309, 2310, 2302,
	2303, 2304, 2305, 2307, 2308, 0, 0, 0, 0, 0,
	1053, 1053, 0, 0, 0, 0, 0, 0, 953, 2220,
	2221, 0, 0, 0, 0, 2227, 0, 1054, 1054, 1329,
	1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326, 0, 719,
	0, 0, 0, 0, 2241, 2242, 0, 732, 0, 0,
	1878, 1280, 0, 0, 0, 0, 952, 0, 2249, 952,
	0, 0, 0, 0, 0, 0, 0, 2300, 2301, 0,
	2318, 2319, 2320, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 2268, 0, 925, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 2281, 0, 0, 0, 0, 0,
	0, 0, 138, 66, 0, 67, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	0, 0, 0, 172, 0, 0, 0, 2315, 952, 0,
	0, 0, 0, 0, 581, 1316, 1317, 108, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 1952, 1952, 1952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 174,
	1319, 0, 0, 1365, 0, 0, 2350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 0, 0,
	0, 953, 0, 0, 0, 1338, 2306, 0, 0, 173,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 2407, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 952,
	0, 0, 0, 0, 0, 2321, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 953,
	0, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2316, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2479, 1054, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 953, 0, 952, 0,
	0, 0, 0, 1053, 0, 1354, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1053, 1053, 1053,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 0, 1054, 1054, 1054, 0, 0, 1054, 74,
	0, 74, 0, 74, 0, 952, 2543, 0, 1345, 0,
	1776, 0, 0, 0, 0, 0, 2547, 2548, 0, 0,
	2551, 0, 0, 0, 2554, 1340, 0, 0, 0, 0,
	0, 0, 0, 2558, 0, 0, 0, 0, 0, 0,
	0, 0, 2565, 0, 0, 2350, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1550, 732,
	0, 2312, 2313, 2314, 0, 2585, 1561, 0, 2311, 2309,
	2310, 2302, 2303, 2304, 2305, 2307, 2308, 0, 0, 0,
	0, 0, 2599, 2600, 0, 2601, 2602, 2603, 0, 0,
	2604, 0, 1584, 0, 1584, 0, 2606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 953, 0, 0, 74, 0, 0, 0, 952,
	0, 952, 0, 0, 0, 0, 1355, 2634, 2635, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 2651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1053, 1690, 952,
	0, 1053, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	952, 2677, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1733, 0, 2701, 0, 0, 0, 1739, 0,
	1740, 0, 1741, 0, 1742, 0, 1743, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 0, 0, 1753, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 1387, 0, 0, 0, 1393, 0,
	0, 2749, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2779, 2780, 0,
	0, 0, 953, 2784, 2785, 0, 0, 0, 2788, 2789,
	0, 0, 0, 1053, 0, 2793, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 2798, 0, 0, 0, 0, 0,
	0, 2802, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 1472, 0, 1475, 0,
	0, 0, 1054, 0, 0, 0, 0, 0, 1996, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 953, 1053, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 1053, 0, 0, 0,
	2860, 0, 0, 0, 1054, 0, 0, 0, 1054, 1054,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1054, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2128, 0, 0, 1136,
	0, 1136, 0, 1136, 0, 1064, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2930,
	2931, 2932, 0, 0, 0, 0, 0, 953, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2940, 2941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2948,
	1316, 1317, 0, 1349, 1350, 1351, 1359, 1360, 1361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 1365, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 2983, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 742, 0, 0,
	1338, 0, 0, 0, 2995, 0, 0, 1335, 0, 0,
	2189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2202, 1064, 2204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	1342, 1343, 1344, 0, 2217, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3040, 0, 0, 3043, 0, 0, 0,
	953, 0, 0, 1356, 1366, 0, 0, 1346, 1347, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1362, 1363,
	0, 0, 0, 0, 0, 0, 1333, 1334, 0, 0,
	0, 0, 0, 0, 0, 719, 0, 0, 719, 719,
	1354, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 1353, 0, 0, 953,
	0, 0, 0, 0, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1844, 3129, 3129, 3129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 1345, 0, 3147, 0, 0, 1054, 1054,
	1054, 0, 1387, 0, 0, 0, 1387, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3129, 0, 0, 0, 0, 0,
	0, 0, 0, 1357, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2382, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 3129,
	0, 0, 0, 0, 0, 0, 0, 2419, 1113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 1355, 0, 0, 1330, 1331, 1337, 1336, 1332, 1358,
	0, 1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326,
	0, 0, 0, 0, 2809, 0, 0, 0, 2808, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 953, 0, 74, 0, 74, 2455, 0, 1316,
	1317, 2459, 1349, 1350, 1351, 1359, 1360, 1361, 0, 0,
	0, 0, 2468, 0, 0, 0, 0, 1352, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 1365, 0, 0,
	0, 0, 0, 74, 0, 74, 0, 0, 1054, 0,
	953, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 0, 0, 0, 0, 0, 74, 0, 1338,
	0, 953, 0, 0, 1054, 0, 1335, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 2539, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 1342,
	1343, 1344, 2545, 0, 0, 0, 0, 0, 1324, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 1366, 0, 0, 1346, 1347, 1348, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 1362, 1363, 0,
	0, 0, 0, 0, 0, 1333, 1334, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1364, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1054, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 1844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	0, 0, 0, 0, 0, 0, 1387, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1357, 0, 1316, 1317, 0, 1349, 1350, 1351,
	1359, 1360, 1361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1352, 0, 0, 0, 0, 1054, 0, 1319,
	0, 0, 1365, 0, 0, 0, 1054, 1054, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2723, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 2730, 0, 0, 953,
	0, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	1355, 0, 0, 1330, 1331, 1337, 1336, 1332, 1358, 0,
	1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326, 0,
	0, 925, 0, 2286, 0, 0, 0, 2287, 0, 925,
	925, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 1342, 1343, 1344, 0, 0, 2770,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 1317, 0, 1349, 1350, 1351, 1359, 1360,
	1361, 0, 0, 0, 0, 0, 0, 1356, 1366, 0,
	1352, 1346, 1347, 1348, 0, 0, 74, 1319, 74, 0,
	1365, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1362, 1363, 0, 0, 0, 0, 0, 0,
	1333, 1334, 0, 0, 1318, 0, 74, 0, 74, 0,
	0, 0, 1338, 0, 1354, 0, 0, 0, 0, 1335,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1364, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	0, 1341, 1342, 1343, 1344, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2874, 1340, 1356, 1366, 0, 0, 1346,
	1347, 1348, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1357, 0, 0,
	1362, 1363, 0, 0, 0, 0, 0, 0, 1333, 1334,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1355, 0, 0, 1330, 1331,
	1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320, 1321,
	1322, 1323, 1325, 1326, 0, 1345, 0, 0, 1874, 0,
	0, 0, 1875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2967, 0,
	0, 0, 0, 0, 0, 1357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3004, 925, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3023, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 0, 0, 1330, 1331, 1337, 1336,
	1332, 1358, 0, 1329, 1327, 1328, 1320, 1321, 1322, 1323,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	2807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3057, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 925, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 74, 3095, 0, 0, 850, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	849, 278, 220, 221, 222, 0, 279, 856, 0, 839,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 293,
	842, 840, 841, 846, 844, 843, 845, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	879, 880, 0, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 861, 324, 0, 325, 881, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 851, 852, 855, 863,
	0, 853, 334, 0, 0, 925, 0, 333, 335, 342,
	0, 862, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 864, 865, 344, 345, 346, 866,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 882, 867, 355, 356, 868, 0, 357, 358,
	0, 0, 359, 0, 360, 941, 940, 361, 362, 364,
	365, 363, 869, 366, 367, 369, 368, 0, 0, 870,
	0, 854, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 883,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 884,
	386, 245, 387, 74, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 847, 433, 414, 415, 434, 874,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 885, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 886,
	887, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 848, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1844, 260, 261, 262, 263,
	956, 264, 957, 958, 959, 960, 215, 961, 962, 963,
	964, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 965, 271, 272, 273, 274, 275, 276, 277, 966,
	967, 278, 220, 221, 222, 968, 279, 223, 969, 955,
	970, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 971, 289, 0, 290, 291, 972, 859, 292, 293,
	973, 974, 976, 975, 977, 978, 979, 294, 295, 502,
	296, 297, 298, 224, 225, 980, 299, 981, 300, 982,
	301, 983, 984, 302, 303, 304, 985, 305, 986, 306,
	307, 987, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 988, 860, 989, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 990, 323, 991,
	992, 861, 324, 993, 325, 230, 994, 231, 326, 995,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 863,
	996, 238, 334, 0, 0, 0, 997, 333, 335, 342,
	998, 862, 336, 235, 338, 337, 339, 340, 341, 236,
	999, 237, 1000, 343, 864, 865, 344, 345, 346, 866,
	347, 348, 0, 0, 349, 350, 351, 1001, 353, 352,
	1002, 354, 239, 867, 355, 356, 868, 1003, 357, 358,
	1004, 1005, 359, 0, 360, 941, 940, 361, 362, 364,
	365, 363, 869, 366, 367, 369, 368, 1006, 1007, 870,
	1008, 240, 241, 370, 371, 1009, 372, 373, 1010, 1011,
	374, 375, 1012, 1013, 376, 242, 871, 377, 872, 243,
	378, 379, 380, 381, 382, 383, 384, 1014, 385, 244,
	386, 245, 387, 1015, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 1016, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 1017, 408, 873,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 1018, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 1019, 433, 414, 415, 434, 874,
	435, 248, 436, 437, 1020, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 1021, 448, 449,
	1022, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	1023, 250, 251, 252, 457, 1024, 1025, 458, 459, 253,
	254, 1026, 460, 461, 0, 462, 463, 1027, 1028, 464,
	465, 466, 468, 1029, 469, 1030, 467, 470, 471, 472,
	255, 256, 257, 1031, 474, 473, 258, 1032, 1033, 1034,
	1035, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 0, 0, 0, 0, 0, 1983, 0, 0,
	0, 0, 0, 0, 0, 0, 1984, 260, 261, 262,
	263, 956, 264, 957, 958, 959, 960, 215, 961, 962,
	963, 964, 265, 266, 267, 216, 217, 268, 218, 269,
	270, 219, 965, 271, 272, 273, 274, 275, 276, 277,
	966, 967, 278, 220, 221, 222, 968, 279, 223, 969,
	955, 970, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 971, 289, 0, 290, 291, 972, 859, 292,
	293, 973, 974, 976, 975, 977, 978, 979, 294, 295,
	502, 296, 297, 298, 224, 225, 980, 299, 981, 300,
	982, 301, 983, 984, 302, 303, 304, 985, 305, 986,
	306, 307, 987, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 988, 860, 989, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 990, 323,
	991, 992, 861, 324, 993, 325, 230, 994, 231, 326,
	995, 327, 328, 329, 330, 331, 332, 232, 233, 234,
	863, 996, 238, 334, 0, 0, 0, 997, 333, 335,
	342, 998, 862, 336, 235, 338, 337, 339, 340, 341,
	236, 999, 237, 1000, 343, 864, 865, 344, 345, 346,
	866, 347, 348, 0, 0, 349, 350, 351, 1001, 353,
	352, 1002, 354, 239, 867, 355, 356, 868, 1003, 357,
	358, 1004, 1005, 359, 0, 360, 941, 940, 361, 362,
	364, 365, 363, 869, 366, 367, 369, 368, 1006, 1007,
	870, 1008, 240, 241, 370, 371, 1009, 372, 373, 1010,
	1011, 374, 375, 1012, 1013, 376, 242, 871, 377, 872,
	243, 378, 379, 380, 381, 382, 383, 384, 1014, 385,
	244, 386, 245, 387, 1015, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 1016, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 1017, 408,
	873, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 1018, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 1019, 433, 414, 415, 434,
	874, 435, 248, 436, 437, 1020, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 1021, 448,
	449, 1022, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 1023, 250, 251, 252, 457, 1024, 1025, 458, 459,
	253, 254, 1026, 460, 461, 0, 462, 463, 1027, 1028,
	464, 465, 466, 468, 1029, 469, 1030, 467, 470, 471,
	472, 255, 256, 257, 1031, 474, 473, 258, 1032, 1033,
	1034, 1035, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2831, 260,
	261, 262, 263, 956, 264, 957, 958, 959, 960, 215,
	961, 962, 963, 964, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 965, 271, 272, 273, 274, 275,
	276, 277, 966, 967, 278, 220, 221, 222, 968, 279,
	223, 969, 955, 970, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 971, 289, 0, 290, 291, 972,
	859, 292, 293, 973, 974, 976, 975, 977, 978, 979,
	294, 295, 502, 296, 297, 298, 224, 225, 980, 299,
	981, 300, 982, 301, 983, 984, 302, 303, 304, 985,
	305, 986, 306, 307, 987, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 988, 860, 989, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	990, 323, 991, 992, 861, 324, 993, 325, 230, 994,
	231, 326, 995, 327, 328, 329, 330, 331, 332, 232,
	233, 234, 863, 996, 238, 334, 0, 0, 0, 997,
	333, 335, 342, 998, 862, 336, 235, 338, 337, 339,
	340, 341, 236, 999, 237, 1000, 343, 864, 865, 344,
	345, 346, 866, 347, 348, 0, 0, 349, 350, 351,
	1001, 353, 352, 1002, 354, 239, 867, 355, 356, 868,
	1003, 357, 358, 1004, 1005, 359, 0, 360, 941, 940,
	361, 362, 364, 365, 363, 869, 366, 367, 369, 368,
	1006, 1007, 870, 1008, 240, 241, 370, 371, 1009, 372,
	373, 1010, 1011, 374, 375, 1012, 1013, 376, 242, 871,
	377, 872, 243, 378, 379, 380, 381, 382, 383, 384,
	1014, 385, 244, 386, 245, 387, 1015, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 1016, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	1017, 408, 873, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 1018, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 1019, 433, 414,
	415, 434, 874, 435, 248, 436, 437, 1020, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	1021, 448, 449, 1022, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 1023, 250, 251, 252, 457, 1024, 1025,
	458, 459, 253, 254, 1026, 460, 461, 0, 462, 463,
	1027, 1028, 464, 465, 466, 468, 1029, 469, 1030, 467,
	470, 471, 472, 255, 256, 257, 1031, 474, 473, 258,
	1032, 1033, 1034, 1035, 475, 476, 259, 477, 478, 479,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2936, 0, 260, 261, 262,
	263, 956, 264, 957, 958, 959, 960, 215, 961, 962,
	963, 964, 265, 266, 267, 216, 217, 268, 218, 269,
	270, 219, 965, 271, 272, 273, 274, 275, 276, 277,
	966, 967, 278, 220, 221, 222, 968, 279, 223, 969,
	955, 970, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 971, 289, 0, 290, 291, 972, 859, 292,
	293, 973, 974, 976, 975, 977, 978, 979, 294, 295,
	502, 296, 297, 298, 224, 225, 980, 299, 981, 300,
	982, 301, 983, 984, 302, 303, 304, 985, 305, 986,
	306, 307, 987, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 988, 860, 989, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 990, 323,
	991, 992, 861, 324, 993, 325, 230, 994, 231, 326,
	995, 327, 328, 329, 330, 331, 332, 232, 233, 234,
	863, 996, 238, 334, 0, 0, 0, 997, 333, 335,
	342, 998, 862, 336, 235, 338, 337, 339, 340, 341,
	236, 999, 237, 1000, 343, 864, 865, 344, 345, 346,
	866, 347, 348, 0, 0, 349, 350, 351, 1001, 353,
	352, 1002, 354, 239, 867, 355, 356, 868, 1003, 357,
	358, 1004, 1005, 359, 0, 360, 941, 940, 361, 362,
	364, 365, 363, 869, 366, 367, 369, 368, 1006, 1007,
	870, 1008, 240, 241, 370, 371, 1009, 372, 373, 1010,
	1011, 374, 375, 1012, 1013, 376, 242, 871, 377, 872,
	243, 378, 379, 380, 381, 382, 383, 384, 1014, 385,
	244, 386, 245, 387, 1015, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 1016, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 1017, 408,
	873, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 1018, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 1019, 433, 414, 415, 434,
	874, 435, 248, 436, 437, 1020, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 1021, 448,
	449, 1022, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 1023, 250, 251, 252, 457, 1024, 1025, 458, 459,
	253, 254, 1026, 460, 461, 0, 462, 463, 1027, 1028,
	464, 465, 466, 468, 1029, 469, 1030, 467, 470, 471,
	472, 255, 256, 257, 1031, 474, 473, 258, 1032, 1033,
	1034, 1035, 475, 476, 259, 477, 478, 479, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2588, 0, 260, 261, 262, 263, 956,
	264, 957, 958, 959, 960, 215, 961, 962, 963, 964,
	265, 266, 267, 216, 217, 268, 218, 269, 270, 219,
	965, 271, 272, 273, 274, 275, 276, 277, 966, 967,
	278, 220, 221, 222, 968, 279, 223, 969, 955, 970,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	971, 289, 0, 290, 291, 972, 859, 292, 293, 973,
	974, 976, 975, 977, 978, 979, 294, 295, 502, 296,
	297, 298, 224, 225, 980, 299, 981, 300, 982, 301,
	983, 984, 302, 303, 304, 985, 305, 986, 306, 307,
	987, 226, 308, 309, 311, 314, 310, 315, 316, 227,
	228, 988, 860, 989, 0, 0, 0, 0, 317, 318,
	319, 229, 320, 321, 0, 322, 990, 323, 991, 992,
	861, 324, 993, 325, 230, 994, 231, 326, 995, 327,
	328, 329, 330, 331, 332, 232, 233, 234, 863, 996,
	238, 334, 0, 0, 0, 997, 333, 335, 342, 998,
	862, 336, 235, 338, 337, 339, 340, 341, 236, 999,
	237, 1000, 343, 864, 865, 344, 345, 346, 866, 347,
	348, 0, 0, 349, 350, 351, 1001, 353, 352, 1002,
	354, 239, 867, 355, 356, 868, 1003, 357, 358, 1004,
	1005, 359, 0, 360, 941, 940, 361, 362, 364, 365,
	363, 869, 366, 367, 369, 368, 1006, 1007, 870, 1008,
	240, 241, 370, 371, 1009, 372, 373, 1010, 1011, 374,
	375, 1012, 1013, 376, 242, 871, 377, 872, 243, 378,
	379, 380, 381, 382, 383, 384, 1014, 385, 244, 386,
	245, 387, 1015, 388, 389, 390, 391, 392, 393, 246,
	394, 395, 1016, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 1017, 408, 873, 409,
	410, 411, 412, 247, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 1018, 429, 430, 424, 426, 427, 428,
	425, 431, 432, 1019, 433, 414, 415, 434, 874, 435,
	248, 436, 437, 1020, 447, 438, 439, 440, 416, 441,
	445, 446, 442, 443, 444, 249, 1021, 448, 449, 1022,
	450, 451, 452, 453, 454, 312, 455, 313, 456, 1023,
	250, 251, 252, 457, 1024, 1025, 458, 459, 253, 254,
	1026, 460, 461, 0, 462, 463, 1027, 1028, 464, 465,
	466, 468, 1029, 469, 1030, 467, 470, 471, 472, 255,
	256, 257, 1031, 474, 473, 258, 1032, 1033, 1034, 1035,
	475, 476, 259, 477, 478, 479, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2580, 0, 260, 261, 262, 263, 956, 264, 957,
	958, 959, 960, 215, 961, 962, 963, 964, 265, 266,
	267, 216, 217, 268, 218, 269, 270, 219, 965, 271,
	272, 273, 274, 275, 276, 277, 966, 967, 278, 220,
	221, 222, 968, 279, 223, 969, 955, 970, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 971, 289,
	0, 290, 291, 972, 859, 292, 293, 973, 974, 976,
	975, 977, 978, 979, 294, 295, 502, 296, 297, 298,
	224, 225, 980, 299, 981, 300, 982, 301, 983, 984,
	302, 303, 304, 985, 305, 986, 306, 307, 987, 226,
	308, 309, 311, 314, 310, 315, 316, 227, 228, 988,
	860, 989, 0, 0, 0, 0, 317, 318, 319, 229,
	320, 321, 0, 322, 990, 323, 991, 992, 861, 324,
	993, 325, 230, 994, 231, 326, 995, 327, 328, 329,
	330, 331, 332, 232, 233, 234, 863, 996, 238, 334,
	0, 0, 0, 997, 333, 335, 342, 998, 862, 336,
	235, 338, 337, 339, 340, 341, 236, 999, 237, 1000,
	343, 864, 865, 344, 345, 346, 866, 347, 348, 0,
	0, 349, 350, 351, 1001, 353, 352, 1002, 354, 239,
	867, 355, 356, 868, 1003, 357, 358, 1004, 1005, 359,
	0, 360, 941, 940, 361, 362, 364, 365, 363, 869,
	366, 367, 369, 368, 1006, 1007, 870, 1008, 240, 241,
	370, 371, 1009, 372, 373, 1010, 1011, 374, 375, 1012,
	1013, 376, 242, 871, 377, 872, 243, 378, 379, 380,
	381, 382, 383, 384, 1014, 385, 244, 386, 245, 387,
	1015, 388, 389, 390, 391, 392, 393, 246, 394, 395,
	1016, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 1017, 408, 873, 409, 410, 411,
	412, 247, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 1018, 429, 430, 424, 426, 427, 428, 425, 431,
	432, 1019, 433, 414, 415, 434, 874, 435, 248, 436,
	437, 1020, 447, 438, 439, 440, 416, 441, 445, 446,
	442, 443, 444, 249, 1021, 448, 449, 1022, 450, 451,
	452, 453, 454, 312, 455, 313, 456, 1023, 250, 251,
	252, 457, 1024, 1025, 458, 459, 253, 254, 1026, 460,
	461, 0, 462, 463, 1027, 1028, 464, 465, 466, 468,
	1029, 469, 1030, 467, 470, 471, 472, 255, 256, 257,
	1031, 474, 473, 258, 1032, 1033, 1034, 1035, 475, 476,
	259, 477, 478, 479, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2441,
	0, 260, 261, 262, 263, 956, 264, 957, 958, 959,
	960, 215, 961, 962, 963, 964, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 965, 271, 272, 273,
	274, 275, 276, 277, 966, 967, 278, 220, 221, 222,
	968, 279, 223, 969, 955, 970, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 971, 289, 0, 290,
	291, 972, 859, 292, 293, 973, 974, 976, 975, 977,
	978, 979, 294, 295, 502, 296, 297, 298, 224, 225,
	980, 299, 981, 300, 982, 301, 983, 984, 302, 303,
	304, 985, 305, 986, 306, 307, 987, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 988, 860, 989,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 990, 323, 991, 992, 861, 324, 993, 325,
	230, 994, 231, 326, 995, 327, 328, 329, 330, 331,
	332, 232, 233, 234, 863, 996, 238, 334, 0, 0,
	0, 997, 333, 335, 342, 998, 862, 336, 235, 338,
	337, 339, 340, 341, 236, 999, 237, 1000, 343, 864,
	865, 344, 345, 346, 866, 347, 348, 0, 0, 349,
	350, 351, 1001, 353, 352, 1002, 354, 239, 867, 355,
	356, 868, 1003, 357, 358, 1004, 1005, 359, 0, 360,
	941, 940, 361, 362, 364, 365, 363, 869, 366, 367,
	369, 368, 1006, 1007, 870, 1008, 240, 241, 370, 371,
	1009, 372, 373, 1010, 1011, 374, 375, 1012, 1013, 376,
	242, 871, 377, 872, 243, 378, 379, 380, 381, 382,
	383, 384, 1014, 385, 244, 386, 245, 387, 1015, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 1016, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 1017, 408, 873, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 1018,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 1019,
	433, 414, 415, 434, 874, 435, 248, 436, 437, 1020,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 1021, 448, 449, 1022, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 1023, 250, 251, 252, 457,
	1024, 1025, 458, 459, 253, 254, 1026, 460, 461, 0,
	462, 463, 1027, 1028, 464, 465, 466, 468, 1029, 469,
	1030, 467, 470, 471, 472, 255, 256, 257, 1031, 474,
	473, 258, 1032, 1033, 1034, 1035, 475, 476, 259, 477,
	478, 479, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1886, 0, 260,
	261, 262, 263, 956, 264, 957, 958, 959, 960, 215,
	961, 962, 963, 964, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 965, 271, 272, 273, 274, 275,
	276, 277, 966, 967, 278, 220, 221, 222, 968, 279,
	223, 969, 955, 970, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 971, 289, 0, 290, 291, 972,
	859, 292, 293, 973, 974, 976, 975, 977, 978, 979,
	294, 295, 502, 296, 297, 298, 224, 225, 980, 299,
	981, 300, 982, 301, 983, 984, 302, 303, 304, 985,
	305, 986, 306, 307, 987, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 988, 860, 989, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	990, 323, 991, 992, 861, 324, 993, 325, 230, 994,
	231, 326, 995, 327, 328, 329, 330, 331, 332, 232,
	233, 234, 863, 996, 238, 334, 0, 0, 0, 997,
	333, 335, 342, 998, 862, 336, 235, 338, 337, 339,
	340, 341, 236, 999, 237, 1000, 343, 864, 865, 344,
	345, 346, 866, 347, 348, 0, 0, 349, 350, 351,
	1001, 353, 352, 1002, 354, 239, 867, 355, 356, 868,
	1003, 357, 358, 1004, 1005, 359, 0, 360, 941, 940,
	361, 362, 364, 365, 363, 869, 366, 367, 369, 368,
	1006, 1007, 870, 1008, 240, 241, 370, 371, 1009, 372,
	373, 1010, 1011, 374, 375, 1012, 1013, 376, 242, 871,
	377, 872, 243, 378, 379, 380, 381, 382, 383, 384,
	1014, 385, 244, 386, 245, 387, 1015, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 1016, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	1017, 408, 873, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 1018, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 1019, 433, 414,
	415, 434, 874, 435, 248, 436, 437, 1020, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	1021, 448, 449, 1022, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 1023, 250, 251, 252, 457, 1024, 1025,
	458, 459, 253, 254, 1026, 460, 461, 0, 462, 463,
	1027, 1028, 464, 465, 466, 468, 1029, 469, 1030, 467,
	470, 471, 472, 255, 256, 257, 1031, 474, 473, 258,
	1032, 1033, 1034, 1035, 475, 476, 259, 477, 478, 479,
	1058, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1542, 0, 0, 0, 260,
	261, 262, 263, 956, 264, 957, 958, 959, 960, 215,
	961, 962, 963, 964, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 965, 271, 272, 273, 274, 275,
	276, 277, 966, 967, 278, 220, 221, 222, 968, 279,
	223, 969, 955, 970, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 971, 289, 0, 290, 291, 972,
	859, 292, 293, 973, 974, 976, 975, 977, 978, 979,
	294, 295, 502, 296, 297, 298, 224, 225, 980, 299,
	981, 300, 982, 301, 983, 984, 302, 303, 304, 985,
	305, 986, 306, 307, 987, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 988, 860, 989, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	990, 323, 991, 992, 861, 324, 993, 325, 230, 994,
	231, 326, 995, 327, 328, 329, 330, 331, 332, 232,
	233, 234, 863, 996, 238, 334, 0, 0, 0, 997,
	333, 335, 342, 998, 862, 336, 235, 338, 337, 339,
	340, 341, 236, 999, 237, 1000, 343, 864, 865, 344,
	345, 346, 866, 347, 348, 0, 0, 349, 350, 351,
	1001, 353, 352, 1002, 354, 239, 867, 355, 356, 868,
	1003, 357, 358, 1004, 1005, 359, 0, 360, 941, 940,
	361, 362, 364, 365, 363, 869, 366, 367, 369, 368,
	1006, 1007, 870, 1008, 240, 241, 370, 371, 1009, 372,
	373, 1010, 1011, 374, 375, 1012, 1013, 376, 242, 871,
	377, 872, 243, 378, 379, 380, 381, 382, 383, 384,
	1014, 385, 244, 386, 245, 387, 1015, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 1016, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	1017, 408, 873, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 1018, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 1019, 433, 414,
	415, 434, 874, 435, 248, 436, 437, 1020, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	1021, 448, 449, 1022, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 1023, 250, 251, 252, 457, 1024, 1025,
	458, 459, 253, 254, 1026, 460, 461, 0, 462, 463,
	1027, 1028, 464, 465, 466, 468, 1029, 469, 1030, 467,
	470, 471, 472, 255, 256, 257, 1031, 474, 473, 258,
	1032, 1033, 1034, 1035, 475, 476, 259, 477, 478, 479,
	947, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 956, 264, 957, 958, 959, 960, 215,
	961, 962, 963, 964, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 965, 271, 272, 273, 274, 275,
	276, 277, 966, 967, 278, 220, 221, 222, 968, 279,
	223, 969, 955, 970, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 971, 289, 0, 290, 291, 972,
	859, 292, 293, 973, 974, 976, 975, 977, 978, 979,
	294, 295, 502, 296, 297, 298, 224, 225, 980, 299,
	981, 300, 982, 301, 983, 984, 302, 303, 304, 985,
	305, 986, 306, 307, 987, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 988, 860, 989, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	990, 323, 991, 992, 861, 324, 993, 325, 230, 994,
	231, 326, 995, 327, 328, 329, 330, 331, 332, 232,
	233, 234, 863, 996, 238, 334, 0, 0, 0, 997,
	333, 335, 342, 998, 862, 336, 235, 338, 337, 339,
	340, 341, 236, 999, 237, 1000, 343, 864, 865, 344,
	345, 346, 866, 347, 348, 0, 0, 349, 350, 351,
	1001, 353, 352, 1002, 354, 239, 867, 355, 356, 868,
	1003, 357, 358, 1004, 1005, 359, 0, 360, 941, 940,
	361, 362, 364, 365, 363, 869, 366, 367, 369, 368,
	1006, 1007, 870, 1008, 240, 241, 370, 371, 1009, 372,
	373, 1010, 1011, 374, 375, 1012, 1013, 376, 242, 871,
	377, 872, 243, 378, 379, 380, 381, 382, 383, 384,
	1014, 385, 244, 386, 245, 387, 1015, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 1016, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	1017, 408, 873, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 1018, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 1019, 433, 414,
	415, 434, 874, 435, 248, 436, 437, 1020, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	1021, 448, 449, 1022, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 1023, 250, 251, 252, 457, 1024, 1025,
	458, 459, 253, 254, 1026, 460, 461, 0, 462, 463,
	1027, 1028, 464, 465, 466, 468, 1029, 469, 1030, 467,
	470, 471, 472, 255, 256, 257, 1031, 474, 473, 258,
	1032, 1033, 1034, 1035, 475, 476, 259, 477, 478, 479,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 956, 264, 957, 958, 959, 960, 215, 961, 962,
	963, 964, 265, 266, 267, 216, 217, 268, 218, 269,
	270, 219, 965, 271, 272, 273, 274, 275, 276, 277,
	966, 967, 278, 220, 221, 222, 968, 279, 223, 969,
	955, 970, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 971, 289, 0, 290, 291, 972, 859, 292,
	293, 973, 974, 976, 975, 977, 978, 979, 294, 295,
	502, 296, 297, 298, 224, 225, 980, 299, 981, 300,
	982, 301, 983, 984, 302, 303, 304, 985, 305, 986,
	306, 307, 987, 226, 308, 309, 311, 314, 310, 315,
	316, 227, 228, 988, 860, 989, 0, 0, 0, 0,
	317, 318, 319, 229, 320, 321, 0, 322, 990, 323,
	991, 992, 861, 324, 993, 325, 230, 994, 231, 326,
	995, 327, 328, 329, 330, 331, 332, 232, 233, 234,
	863, 996, 238, 334, 0, 0, 0, 997, 333, 335,
	342, 998, 862, 336, 235, 338, 337, 339, 340, 341,
	236, 999, 237, 1000, 343, 864, 865, 344, 345, 346,
	866, 347, 348, 0, 0, 349, 350, 351, 1001, 353,
	352, 1002, 354, 239, 867, 355, 356, 868, 1003, 357,
	358, 1004, 1005, 359, 0, 360, 941, 940, 361, 362,
	364, 365, 363, 869, 366, 367, 369, 368, 1006, 1007,
	870, 1008, 240, 241, 370, 371, 1009, 372, 373, 1010,
	1011, 374, 375, 1012, 1013, 376, 242, 871, 377, 872,
	243, 378, 379, 380, 381, 382, 383, 384, 1014, 385,
	244, 386, 245, 387, 1015, 388, 389, 390, 391, 392,
	393, 246, 394, 395, 1016, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 1017, 408,
	873, 409, 410, 411, 412, 247, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 1018, 429, 430, 424, 426,
	427, 428, 425, 431, 432, 1019, 433, 414, 415, 434,
	874, 435, 248, 436, 437, 1020, 447, 438, 439, 440,
	416, 441, 445, 446, 442, 443, 444, 249, 1021, 448,
	449, 1022, 450, 451, 452, 453, 454, 312, 455, 313,
	456, 1023, 250, 251, 252, 457, 1024, 1025, 458, 459,
	253, 254, 1026, 460, 461, 0, 462, 463, 1027, 1028,
	464, 465, 466, 468, 1029, 469, 1030, 467, 470, 471,
	472, 255, 256, 257, 1031, 474, 473, 258, 1032, 1033,
	1034, 1035, 475, 476, 259, 477, 478, 479, 1864, 0,
	803, 761, 762, 763, 759, 760, 773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 1861, 264, 0, 0, 0, 0, 850, 778, 0,
	0, 0, 265, 266, 267, 216, 818, 797, 829, 787,
	828, 827, 0, 271, 272, 789, 788, 275, 276, 277,
	779, 849, 278, 877, 878, 222, 0, 279, 856, 0,
	839, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 859, 292,
	293, 842, 840, 841, 846, 844, 843, 845, 294, 295,
	502, 296, 832, 298, 825, 824, 751, 299, 0, 300,
	0, 301, 1862, 0, 302, 823, 304, 0, 305, 0,
	306, 307, 0, 756, 308, 309, 311, 314, 310, 315,
	316, 879, 880, 769, 860, 0, 0, 0, 0, 0,
	317, 318, 319, 822, 820, 821, 0, 322, 0, 323,
	0, 0, 861, 324, 0, 325, 881, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 851, 852, 855,
	863, 0, 853, 799, 0, 0, 0, 0, 333, 335,
	342, 0, 862, 336, 811, 802, 813, 815, 816, 817,
	812, 0, 804, 0, 343, 864, 865, 344, 345, 346,
	866, 837, 838, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 882, 867, 355, 356, 868, 0, 357,
	358, 0, 0, 359, 0, 360, 753, 752, 361, 362,
	364, 791, 363, 869, 366, 367, 369, 368, 748, 0,
	870, 770, 854, 826, 370, 371, 0, 800, 801, 0,
	0, 374, 375, 0, 0, 376, 242, 871, 377, 872,
	883, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	884, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 819, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	873, 409, 410, 411, 412, 757, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 792, 793,
	795, 796, 425, 431, 432, 847, 433, 414, 415, 434,
	874, 435, 814, 794, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 858, 442, 443, 444, 885, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	790, 0, 833, 834, 835, 836, 0, 0, 458, 459,
	886, 887, 768, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 848, 469, 0, 798, 470, 471,
	472, 255, 830, 876, 1860, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 1863, 0, 0, 0, 0, 0, 0,
	774, 1859, 0, 0, 0, 733, 772, 803, 761, 762,
	763, 759, 760, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 850, 778, 0, 0, 0, 265,
	266, 267, 216, 818, 797, 829, 787, 828, 827, 0,
	271, 272, 789, 788, 275, 276, 277, 779, 849, 278,
	877, 878, 222, 0, 279, 856, 0, 839, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 859, 292, 293, 842, 840,
	841, 846, 844, 843, 845, 294, 295, 502, 296, 832,
	298, 825, 824, 751, 299, 0, 300, 0, 301, 0,
	0, 302, 823, 304, 0, 305, 0, 306, 307, 0,
	756, 308, 309, 311, 314, 310, 315, 316, 879, 880,
	769, 860, 0, 0, 0, 0, 0, 317, 318, 319,
	822, 820, 821, 0, 322, 0, 323, 0, 0, 861,
	324, 0, 325, 881, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 851, 852, 855, 863, 0, 853,
	799, 0, 0, 0, 0, 333, 335, 342, 0, 862,
	336, 811, 802, 813, 815, 816, 817, 812, 0, 804,
	0, 343, 864, 865, 344, 345, 346, 866, 837, 838,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	882, 867, 355, 356, 868, 0, 357, 358, 0, 0,
	359, 0, 360, 753, 752, 361, 362, 364, 791, 363,
	869, 366, 367, 369, 368, 748, 0, 870, 770, 854,
	826, 370, 371, 0, 800, 801, 0, 0, 374, 375,
	0, 0, 376, 242, 871, 377, 872, 883, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 884, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 819, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 873, 409, 410,
	411, 412, 757, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 172, 429, 430, 792, 793, 795, 796, 425,
	431, 432, 847, 433, 414, 415, 434, 874, 435, 814,
	794, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	858, 442, 443, 444, 885, 0, 448, 449, 174, 450,
	451, 452, 453, 454, 312, 455, 313, 790, 0, 833,
	834, 835, 836, 0, 0, 458, 459, 886, 887, 768,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 848, 469, 0, 798, 470, 471, 472, 1163, 830,
	876, 0, 474, 473, 258, 0, 0, 0, 166, 475,
	476, 259, 477, 478, 479, 749, 167, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	803, 761, 762, 763, 759, 760, 773, 1392, 1390, 0,
	0, 0, 0, 772, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 850, 778, 0,
	0, 0, 265, 266, 267, 216, 818, 797, 829, 787,
	828, 827, 0, 271, 272, 789, 788, 275, 276, 277,
	779, 849, 278, 877, 878, 222, 0, 279, 856, 0,
	839, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 859, 292,
	293, 842, 840, 841, 846, 844, 843, 845, 294, 295,
	502, 296, 832, 298, 825, 824, 751, 299, 0, 300,
	0, 301, 0, 0, 302, 823, 304, 0, 305, 0,
	306, 307, 0, 756, 308, 309, 311, 314, 310, 315,
	316, 879, 880, 769, 860, 0, 0, 0, 0, 0,
	317, 318, 319, 822, 820, 821, 0, 322, 0, 323,
	0, 0, 861, 324, 0, 325, 881, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 851, 852, 855,
	863, 0, 853, 799, 0, 0, 0, 0, 333, 335,
	342, 0, 862, 336, 811, 802, 813, 815, 816, 817,
	812, 0, 804, 0, 343, 864, 865, 344, 345, 346,
	866, 837, 838, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 882, 867, 355, 356, 868, 0, 357,
	358, 0, 0, 359, 0, 360, 753, 752, 361, 362,
	364, 791, 363, 869, 366, 367, 369, 368, 748, 0,
	870, 770, 854, 826, 370, 371, 0, 800, 801, 0,
	0, 374, 375, 0, 0, 376, 242, 871, 377, 872,
	883, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	884, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 819, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	873, 409, 410, 411, 412, 757, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 172, 429, 430, 792, 793,
	795, 796, 425, 431, 432, 847, 433, 414, 415, 434,
	874, 435, 814, 794, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 858, 442, 443, 444, 885, 0, 448,
	449, 174, 450, 451, 452, 453, 454, 312, 455, 313,
	790, 0, 833, 834, 835, 836, 0, 0, 458, 459,
	886, 887, 768, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 848, 469, 0, 798, 470, 471,
	472, 1163, 830, 876, 0, 474, 473, 258, 0, 0,
	0, 166, 475, 476, 259, 477, 478, 479, 749, 167,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 803, 761, 762, 763, 759, 760, 773,
	1392, 2239, 0, 0, 0, 0, 772, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 778, 0, 0, 0, 265, 266, 267, 216, 818,
	797, 829, 787, 828, 827, 0, 271, 272, 789, 788,
	275, 276, 277, 779, 849, 278, 877, 878, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 832, 298, 825, 824, 751,
	299, 0, 300, 0, 301, 0, 0, 302, 823, 304,
	0, 305, 0, 306, 307, 0, 756, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 769, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 822, 820, 821, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 799, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 811, 802, 813,
	815, 816, 817, 812, 0, 804, 0, 343, 864, 865,
	344, 345, 346, 866, 837, 838, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 753,
	752, 361, 362, 364, 791, 363, 869, 366, 367, 369,
	368, 748, 0, 870, 770, 854, 826, 370, 371, 0,
	800, 801, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 819, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 757, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 172, 429,
	430, 792, 793, 795, 796, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 814, 794, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 858, 442, 443, 444,
	885, 0, 448, 449, 174, 450, 451, 452, 453, 454,
	312, 455, 313, 790, 0, 833, 834, 835, 836, 0,
	0, 458, 459, 886, 887, 768, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	798, 470, 471, 472, 1163, 830, 876, 0, 474, 473,
	258, 0, 0, 0, 166, 475, 476, 259, 477, 478,
	479, 749, 167, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 803, 761, 762, 763,
	759, 760, 773, 1392, 1390, 0, 0, 0, 0, 772,
	0, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 850, 778, 0, 0, 0, 265, 266,
	267, 216, 818, 797, 829, 787, 828, 827, 1948, 271,
	272, 789, 788, 275, 276, 277, 779, 849, 278, 877,
	878, 222, 0, 279, 856, 0, 839, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 859, 292, 293, 842, 840, 841,
	846, 844, 843, 845, 294, 295, 502, 296, 832, 298,
	825, 824, 751, 299, 0, 300, 0, 301, 0, 0,
	302, 823, 304, 0, 305, 0, 306, 307, 0, 756,
	308, 309, 311, 314, 310, 315, 316, 879, 880, 769,
	860, 0, 0, 0, 0, 0, 317, 318, 319, 822,
	820, 821, 0, 322, 0, 323, 0, 1953, 861, 324,
	0, 325, 881, 0, 231, 326, 0, 327, 328, 329,
	330, 331, 332, 851, 852, 855, 863, 0, 853, 799,
	0, 0, 0, 0, 333, 335, 342, 0, 862, 336,
	811, 802, 813, 815, 816, 817, 812, 0, 804, 0,
	343, 864, 865, 344, 345, 346, 866, 837, 838, 0,
	0, 349, 350, 351, 0, 353, 352, 1949, 354, 882,
	867, 355, 356, 868, 0, 357, 358, 0, 0, 359,
	0, 360, 753, 752, 361, 362, 364, 791, 363, 869,
	366, 367, 369, 368, 748, 0, 870, 770, 854, 826,
	370, 371, 0, 800, 801, 0, 0, 374, 375, 0,
	0, 376, 242, 871, 377, 872, 883, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 884, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 819, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 873, 409, 410, 411,
	412, 757, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 792, 793, 795, 796, 425, 431,
	432, 847, 433, 414, 415, 434, 874, 435, 814, 794,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 858,
	442, 443, 444, 885, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 790, 0, 833, 834,
	835, 836, 0, 1950, 458, 459, 886, 887, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	848, 469, 0, 798, 470, 471, 472, 255, 830, 876,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 803,
	761, 762, 763, 759, 760, 773, 774, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 850, 778, 0, 0,
	0, 265, 266, 267, 216, 818, 797, 829, 787, 828,
	827, 0, 271, 272, 789, 788, 275, 276, 277, 779,
	849, 278, 877, 878, 222, 0, 279, 856, 0, 839,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 293,
	842, 840, 841, 846, 844, 843, 845, 294, 295, 502,
	296, 832, 298, 825, 824, 751, 299, 0, 300, 0,
	301, 0, 0, 302, 823, 304, 0, 305, 0, 306,
	307, 0, 756, 308, 309, 311, 314, 310, 315, 316,
	879, 880, 769, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 822, 820, 821, 0, 322, 0, 323, 0,
	0, 861, 324, 0, 325, 881, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 851, 852, 855, 863,
	0, 853, 799, 0, 0, 0, 0, 333, 335, 342,
	0, 862, 336, 811, 802, 813, 815, 816, 817, 812,
	0, 804, 0, 343, 864, 865, 344, 345, 346, 866,
	837, 838, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 882, 867, 355, 356, 868, 0, 357, 358,
	0, 0, 359, 0, 360, 753, 752, 361, 362, 364,
	791, 363, 869, 366, 367, 369, 368, 748, 2741, 870,
	770, 854, 826, 370, 371, 0, 800, 801, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 883,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 884,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	819, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 757, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 792, 793, 795,
	796, 425, 431, 432, 847, 433, 414, 415, 434, 874,
	435, 814, 794, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 858, 442, 443, 444, 885, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 790,
	0, 833, 834, 835, 836, 0, 0, 458, 459, 886,
	887, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 848, 469, 0, 798, 470, 471, 472,
	255, 830, 876, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 1452, 0, 0, 0, 0, 0, 0, 774,
	0, 0, 0, 0, 0, 772, 803, 761, 762, 763,
	759, 760, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 850, 778, 0, 0, 0, 265, 266,
	267, 216, 818, 797, 829, 787, 828, 827, 0, 271,
	272, 789, 788, 275, 276, 277, 779, 849, 278, 877,
	878, 222, 0, 279, 856, 0, 839, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 859, 292, 293, 842, 840, 841,
	846, 844, 843, 845, 294, 295, 502, 296, 832, 298,
	825, 824, 751, 299, 0, 300, 0, 301, 0, 0,
	302, 823, 304, 0, 305, 0, 306, 307, 0, 756,
	308, 309, 311, 314, 310, 315, 316, 879, 880, 769,
	860, 0, 0, 0, 0, 0, 317, 318, 319, 822,
	820, 821, 0, 322, 0, 323, 0, 0, 861, 324,
	0, 325, 881, 0, 231, 326, 0, 327, 328, 329,
	330, 331, 332, 851, 852, 855, 863, 0, 853, 799,
	0, 0, 0, 1778, 333, 335, 342, 0, 862, 336,
	811, 802, 813, 815, 816, 817, 812, 0, 804, 0,
	343, 864, 865, 344, 345, 346, 866, 837, 838, 0,
	0, 349, 350, 351, 0, 353, 352, 0, 354, 882,
	867, 355, 356, 868, 0, 357, 358, 0, 0, 359,
	0, 360, 753, 752, 361, 362, 364, 791, 363, 869,
	366, 367, 369, 368, 748, 0, 870, 770, 854, 826,
	370, 371, 0, 800, 801, 0, 0, 374, 375, 0,
	0, 376, 242, 871, 377, 872, 883, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 884, 386, 245, 387,
	1777, 388, 389, 390, 391, 392, 393, 819, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 873, 409, 410, 411,
	412, 757, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 792, 793, 795, 796, 425, 431,
	432, 847, 433, 414, 415, 434, 874, 435, 814, 794,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 858,
	442, 443, 444, 885, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 790, 0, 833, 834,
	835, 836, 0, 0, 458, 459, 886, 887, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	848, 469, 0, 798, 470, 471, 472, 255, 830, 876,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 0,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	0, 741, 772, 803, 761, 762, 763, 759, 760, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 778, 0, 0, 0, 265, 266, 267, 216, 818,
	797, 829, 787, 828, 827, 0, 271, 272, 789, 788,
	275, 276, 277, 779, 849, 278, 877, 878, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 832, 298, 825, 824, 751,
	299, 0, 300, 0, 301, 0, 0, 302, 823, 304,
	0, 305, 0, 306, 307, 0, 756, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 769, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 822, 820, 821, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 799, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 811, 802, 813,
	815, 816, 817, 812, 0, 804, 0, 343, 864, 865,
	344, 345, 346, 866, 837, 838, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 753,
	752, 361, 362, 364, 791, 363, 869, 366, 367, 369,
	368, 748, 0, 870, 770, 854, 826, 370, 371, 0,
	800, 801, 743, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 819, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 757, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 792, 793, 795, 796, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 814, 794, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 858, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 790, 0, 833, 834, 835, 836, 0,
	0, 458, 459, 886, 887, 768, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	798, 470, 471, 472, 255, 830, 876, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 803, 761, 762, 763,
	759, 760, 773, 774, 0, 0, 0, 0, 0, 772,
	0, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 850, 778, 0, 0, 0, 265, 266,
	267, 216, 818, 797, 829, 787, 828, 827, 0, 271,
	272, 789, 788, 275, 276, 277, 779, 849, 278, 877,
	878, 222, 0, 279, 856, 0, 839, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 859, 292, 293, 842, 840, 841,
	846, 844, 843, 845, 294, 295, 502, 296, 832, 298,
	825, 824, 751, 299, 0, 300, 0, 301, 0, 0,
	302, 823, 304, 0, 305, 0, 306, 307, 0, 756,
	308, 309, 311, 314, 310, 315, 316, 879, 880, 769,
	860, 0, 0, 0, 0, 0, 317, 318, 319, 822,
	820, 821, 0, 322, 0, 323, 0, 0, 861, 324,
	0, 325, 881, 0, 231, 326, 0, 327, 328, 329,
	330, 331, 332, 851, 852, 855, 863, 0, 853, 799,
	0, 0, 0, 0, 333, 335, 342, 0, 862, 336,
	811, 802, 813, 815, 816, 817, 812, 0, 804, 0,
	343, 864, 865, 344, 345, 346, 866, 837, 838, 0,
	0, 349, 350, 351, 0, 353, 352, 0, 354, 882,
	867, 355, 356, 868, 0, 357, 358, 0, 0, 359,
	0, 360, 753, 752, 361, 362, 364, 791, 363, 869,
	366, 367, 369, 368, 748, 0, 870, 770, 854, 826,
	370, 371, 0, 800, 801, 743, 0, 374, 375, 0,
	0, 376, 242, 871, 377, 872, 883, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 884, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 819, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 873, 409, 410, 411,
	412, 757, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 792, 793, 795, 796, 425, 431,
	432, 847, 433, 414, 415, 434, 874, 435, 814, 794,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 858,
	442, 443, 444, 885, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 790, 0, 833, 834,
	835, 836, 0, 0, 458, 459, 886, 887, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	848, 469, 0, 798, 470, 471, 472, 255, 830, 876,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 803,
	761, 762, 763, 759, 760, 773, 774, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 850, 778, 0, 0,
	0, 265, 266, 267, 216, 818, 797, 829, 787, 828,
	827, 0, 271, 272, 789, 788, 275, 276, 277, 779,
	849, 278, 877, 878, 222, 0, 279, 856, 0, 839,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 293,
	842, 840, 841, 846, 844, 843, 845, 294, 295, 502,
	296, 832, 298, 825, 824, 751, 299, 0, 300, 0,
	301, 0, 0, 302, 823, 304, 0, 305, 0, 306,
	307, 0, 756, 308, 309, 311, 314, 310, 315, 316,
	879, 880, 769, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 822, 820, 821, 0, 322, 0, 323, 0,
	0, 861, 324, 0, 325, 881, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 851, 852, 855, 863,
	0, 853, 799, 0, 0, 0, 0, 333, 335, 342,
	0, 862, 336, 811, 802, 813, 815, 816, 817, 812,
	0, 804, 0, 343, 864, 865, 344, 345, 346, 866,
	837, 838, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 882, 867, 355, 356, 868, 0, 357, 358,
	0, 0, 359, 0, 360, 753, 752, 361, 362, 364,
	791, 363, 869, 366, 367, 369, 368, 748, 0, 870,
	770, 854, 826, 370, 371, 0, 800, 801, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 883,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 884,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	819, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 757, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 792, 793, 795,
	796, 425, 431, 432, 847, 433, 414, 415, 434, 874,
	435, 814, 794, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 858, 442, 443, 444, 885, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 790,
	0, 833, 834, 835, 836, 0, 0, 458, 459, 886,
	887, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 848, 469, 0, 798, 470, 471, 472,
	255, 830, 876, 2567, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 803, 761, 762, 763, 759, 760, 773, 774,
	0, 0, 0, 0, 0, 772, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 850,
	778, 0, 0, 0, 265, 266, 267, 216, 818, 797,
	829, 787, 828, 827, 0, 271, 272, 789, 788, 275,
	276, 277, 779, 849, 278, 877, 878, 222, 0, 279,
	856, 0, 839, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	859, 292, 293, 842, 840, 841, 846, 844, 843, 845,
	294, 295, 502, 296, 832, 298, 825, 824, 751, 299,
	0, 300, 0, 301, 0, 0, 302, 823, 304, 0,
	305, 0, 306, 307, 0, 756, 308, 309, 311, 314,
	310, 315, 316, 879, 880, 769, 860, 0, 0, 0,
	0, 0, 317, 318, 319, 822, 820, 821, 0, 322,
	0, 323, 0, 0, 861, 324, 0, 325, 881, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 851,
	852, 855, 863, 0, 853, 799, 0, 0, 0, 0,
	333, 335, 342, 0, 862, 336, 811, 802, 813, 815,
	816, 817, 812, 0, 804, 0, 343, 864, 865, 344,
	345, 346, 866, 837, 838, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 882, 867, 355, 356, 868,
	0, 357, 358, 0, 0, 359, 0, 360, 753, 752,
	361, 362, 364, 791, 363, 869, 366, 367, 369, 368,
	748, 0, 870, 770, 854, 826, 370, 371, 0, 800,
	801, 0, 0, 374, 375, 0, 0, 376, 242, 871,
	377, 872, 883, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 884, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 819, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 873, 409, 410, 411, 412, 757, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	792, 793, 795, 796, 425, 431, 432, 847, 433, 414,
	415, 434, 874, 435, 814, 794, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 858, 442, 443, 444, 885,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 790, 0, 833, 834, 835, 836, 0, 0,
	458, 459, 886, 887, 768, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 848, 469, 0, 798,
	470, 471, 472, 255, 830, 876, 0, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 1452, 0, 0, 0, 0,
	0, 0, 774, 0, 0, 0, 0, 0, 772, 803,
	761, 762, 763, 759, 760, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 850, 778, 0, 0,
	0, 265, 266, 267, 216, 818, 797, 829, 787, 828,
	827, 0, 271, 272, 789, 788, 275, 276, 277, 779,
	849, 278, 877, 878, 222, 0, 279, 856, 0, 839,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 293,
	842, 840, 841, 846, 844, 843, 845, 294, 295, 502,
	296, 832, 298, 825, 824, 751, 299, 0, 300, 0,
	301, 0, 0, 302, 823, 304, 0, 305, 0, 306,
	307, 0, 756, 308, 309, 311, 314, 310, 315, 316,
	879, 880, 769, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 822, 820, 821, 0, 322, 0, 323, 0,
	1953, 861, 324, 0, 325, 881, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 851, 852, 855, 863,
	0, 853, 799, 0, 0, 0, 0, 333, 335, 342,
	0, 862, 336, 811, 802, 813, 815, 816, 817, 812,
	0, 804, 0, 343, 864, 865, 344, 345, 346, 866,
	837, 838, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 882, 867, 355, 356, 868, 0, 357, 358,
	0, 0, 359, 0, 360, 753, 752, 361, 362, 364,
	791, 363, 869, 366, 367, 369, 368, 748, 0, 870,
	770, 854, 826, 370, 371, 0, 800, 801, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 883,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 884,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	819, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 757, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 792, 793, 795,
	796, 425, 431, 432, 847, 433, 414, 415, 434, 874,
	435, 814, 794, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 858, 442, 443, 444, 885, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 790,
	0, 833, 834, 835, 836, 0, 0, 458, 459, 886,
	887, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 848, 469, 0, 798, 470, 471, 472,
	255, 830, 876, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 803, 761, 762, 763, 759, 760, 773, 774,
	0, 0, 0, 0, 0, 772, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 850,
	778, 0, 0, 0, 265, 266, 267, 216, 818, 797,
	829, 787, 828, 827, 0, 271, 272, 789, 788, 275,
	276, 277, 779, 849, 278, 877, 878, 222, 0, 279,
	856, 0, 839, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	859, 292, 293, 842, 840, 841, 846, 844, 843, 845,
	294, 295, 502, 296, 832, 298, 825, 824, 751, 299,
	0, 300, 0, 301, 0, 0, 302, 823, 304, 0,
	305, 0, 306, 307, 0, 756, 308, 309, 311, 314,
	310, 315, 316, 879, 880, 769, 860, 0, 0, 0,
	0, 0, 317, 318, 319, 822, 820, 821, 0, 322,
	0, 323, 0, 0, 861, 324, 0, 325, 881, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 851,
	852, 855, 863, 0, 853, 799, 0, 0, 0, 0,
	333, 335, 342, 0, 862, 336, 811, 802, 813, 815,
	816, 817, 812, 0, 804, 0, 343, 864, 865, 344,
	345, 346, 866, 837, 838, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 882, 867, 355, 356, 868,
	0, 357, 358, 0, 0, 359, 0, 360, 753, 752,
	361, 362, 364, 791, 363, 869, 366, 367, 369, 368,
	748, 0, 870, 770, 854, 826, 370, 371, 0, 800,
	801, 0, 0, 374, 375, 0, 0, 376, 242, 871,
	377, 872, 883, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 884, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 819, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 873, 409, 410, 411, 412, 757, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	792, 793, 795, 796, 425, 431, 432, 847, 433, 414,
	415, 434, 874, 435, 814, 794, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 858, 442, 443, 444, 885,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 790, 0, 833, 834, 835, 836, 0, 0,
	458, 459, 886, 887, 768, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 848, 469, 0, 798,
	470, 471, 472, 255, 830, 876, 0, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	749, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 745, 746, 0, 0, 0, 0, 0,
	0, 0, 774, 1390, 0, 0, 0, 1944, 772, 803,
	761, 762, 763, 759, 760, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 850, 778, 0, 0,
	0, 265, 266, 267, 216, 818, 797, 829, 787, 828,
	827, 0, 271, 272, 789, 788, 275, 276, 277, 779,
	849, 278, 877, 878, 222, 0, 279, 856, 0, 839,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 859, 292, 293,
	842, 840, 841, 846, 844, 843, 845, 294, 295, 502,
	296, 832, 298, 825, 824, 751, 299, 0, 300, 0,
	301, 0, 0, 302, 823, 304, 0, 305, 0, 306,
	307, 0, 756, 308, 309, 311, 314, 310, 315, 316,
	879, 880, 769, 860, 0, 0, 0, 0, 0, 317,
	318, 319, 822, 820, 821, 0, 322, 0, 323, 0,
	0, 861, 324, 0, 325, 881, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 851, 852, 855, 863,
	0, 853, 799, 0, 0, 0, 0, 333, 335, 342,
	0, 862, 336, 811, 802, 813, 815, 816, 817, 812,
	0, 804, 0, 343, 864, 865, 344, 345, 346, 866,
	837, 838, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 882, 867, 355, 356, 868, 0, 357, 358,
	0, 0, 359, 0, 360, 753, 752, 361, 362, 364,
	791, 363, 869, 366, 367, 369, 368, 748, 0, 870,
	770, 854, 826, 370, 371, 0, 800, 801, 0, 0,
	374, 375, 0, 0, 376, 242, 871, 377, 872, 883,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 884,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	819, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 873,
	409, 410, 411, 412, 757, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 792, 793, 795,
	796, 425, 431, 432, 847, 433, 414, 415, 434, 874,
	435, 814, 794, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 858, 442, 443, 444, 885, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 790,
	0, 833, 834, 835, 836, 0, 0, 458, 459, 886,
	887, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 848, 469, 0, 798, 470, 471, 472,
	255, 830, 876, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 749, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	745, 746, 0, 0, 0, 0, 0, 0, 0, 774,
	0, 0, 0, 0, 1933, 772, 803, 761, 762, 763,
	759, 760, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 850, 778, 0, 0, 0, 265, 266,
	267, 216, 818, 797, 829, 787, 828, 827, 0, 271,
	272, 789, 788, 275, 276, 277, 779, 849, 278, 877,
	878, 222, 0, 279, 856, 0, 839, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 859, 292, 293, 842, 840, 841,
	846, 844, 843, 845, 294, 295, 502, 296, 832, 298,
	825, 824, 751, 299, 0, 300, 0, 301, 0, 0,
	302, 823, 304, 0, 305, 0, 306, 307, 0, 756,
	308, 309, 311, 314, 310, 315, 316, 879, 880, 769,
	860, 0, 0, 0, 0, 0, 317, 318, 319, 822,
	820, 821, 0, 322, 0, 323, 0, 0, 861, 324,
	0, 325, 881, 0, 231, 326, 0, 327, 328, 329,
	330, 331, 332, 851, 852, 855, 863, 0, 853, 799,
	0, 0, 0, 0, 333, 335, 342, 0, 862, 336,
	811, 802, 813, 815, 816, 817, 812, 0, 804, 0,
	343, 864, 865, 344, 345, 346, 866, 837, 838, 0,
	0, 349, 350, 351, 0, 353, 352, 0, 354, 882,
	867, 355, 356, 868, 0, 357, 358, 0, 0, 359,
	0, 360, 753, 752, 361, 362, 364, 791, 363, 869,
	366, 367, 369, 368, 748, 0, 870, 770, 854, 826,
	370, 371, 0, 800, 801, 0, 0, 374, 375, 0,
	0, 376, 242, 871, 377, 872, 883, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 884, 386, 245, 387,
	0, 388, 389, 390, 391, 392, 393, 819, 394, 395,
	0, 396, 397, 398, 399, 400, 0, 402, 403, 401,
	404, 405, 406, 407, 0, 408, 873, 409, 410, 411,
	412, 757, 413, 0, 417, 418, 419, 420, 421, 422,
	423, 0, 429, 430, 792, 793, 795, 796, 425, 431,
	432, 847, 433, 414, 415, 434, 874, 435, 814, 794,
	437, 0, 447, 438, 439, 440, 416, 441, 445, 858,
	442, 443, 444, 885, 0, 448, 449, 0, 450, 451,
	452, 453, 454, 312, 455, 313, 790, 0, 833, 834,
	835, 836, 0, 0, 458, 459, 886, 887, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	848, 469, 0, 798, 470, 471, 472, 255, 830, 876,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 749, 0, 0, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 745, 746, 0,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	0, 1931, 772, 803, 761, 762, 763, 759, 760, 773,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 778, 0, 0, 0, 265, 266, 267, 216, 818,
	797, 829, 787, 828, 827, 0, 271, 272, 789, 788,
	275, 276, 277, 779, 849, 278, 877, 878, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 832, 298, 825, 824, 751,
	299, 0, 300, 0, 301, 0, 0, 302, 823, 304,
	0, 305, 0, 306, 307, 0, 756, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 769, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 822, 820, 821, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 799, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 811, 802, 813,
	815, 816, 817, 812, 0, 804, 0, 343, 864, 865,
	344, 345, 346, 866, 837, 838, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 753,
	752, 361, 362, 364, 791, 363, 869, 366, 367, 369,
	368, 748, 0, 870, 770, 854, 826, 370, 371, 0,
	800, 801, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 819, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 757, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 792, 793, 795, 796, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 814, 794, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 858, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 790, 0, 833, 834, 835, 836, 0,
	0, 458, 459, 886, 887, 768, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	798, 470, 471, 472, 255, 830, 876, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 749, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 745, 746, 0, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 0, 1929, 772,
	803, 761, 762, 763, 759, 760, 773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 850, 778, 0,
	0, 0, 265, 266, 267, 216, 818, 797, 829, 787,
	828, 827, 0, 271, 272, 789, 788, 275, 276, 277,
	779, 849, 278, 877, 878, 222, 0, 279, 856, 0,
	839, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 859, 292,
	293, 842, 840, 841, 846, 844, 843, 845, 294, 295,
	502, 296, 832, 298, 825, 824, 751, 299, 0, 300,
	0, 301, 0, 0, 302, 823, 304, 0, 305, 0,
	306, 307, 0, 756, 308, 309, 311, 314, 310, 315,
	316, 879, 880, 769, 860, 0, 0, 0, 0, 0,
	317, 318, 319, 822, 820, 821, 0, 322, 0, 323,
	0, 0, 861, 324, 0, 325, 881, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 851, 852, 855,
	863, 0, 853, 799, 0, 0, 0, 0, 333, 335,
	342, 0, 862, 336, 811, 802, 813, 815, 816, 817,
	812, 0, 804, 0, 343, 864, 865, 344, 345, 346,
	866, 837, 838, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 882, 867, 355, 356, 868, 0, 357,
	358, 0, 0, 359, 0, 360, 753, 752, 361, 362,
	364, 791, 363, 869, 366, 367, 369, 368, 748, 0,
	870, 770, 854, 826, 370, 371, 0, 800, 801, 0,
	0, 374, 375, 0, 0, 376, 242, 871, 377, 872,
	883, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	884, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 819, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	873, 409, 410, 411, 412, 757, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 792, 793,
	795, 796, 425, 431, 432, 847, 433, 414, 415, 434,
	874, 435, 814, 794, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 858, 442, 443, 444, 885, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	790, 0, 833, 834, 835, 836, 0, 0, 458, 459,
	886, 887, 768, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 848, 469, 0, 798, 470, 471,
	472, 255, 830, 876, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 749, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 745, 746, 0, 0, 0, 0, 0, 0, 0,
	774, 0, 0, 0, 0, 1927, 772, 1919, 761, 762,
	763, 759, 760, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 850, 778, 0, 0, 0, 265,
	266, 267, 216, 818, 797, 829, 787, 828, 827, 0,
	271, 272, 789, 788, 275, 276, 277, 779, 849, 278,
	877, 878, 222, 0, 279, 856, 0, 839, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 859, 292, 293, 842, 840,
	841, 846, 844, 843, 845, 294, 295, 502, 296, 832,
	1922, 825, 824, 751, 299, 0, 300, 0, 301, 0,
	0, 302, 823, 304, 0, 305, 0, 306, 307, 0,
	756, 308, 309, 311, 314, 310, 315, 316, 879, 880,
	769, 860, 0, 0, 0, 0, 0, 317, 318, 319,
	822, 820, 821, 0, 322, 0, 323, 0, 0, 861,
	324, 0, 325, 881, 0, 231, 326, 0, 327, 328,
	1923, 330, 331, 332, 851, 852, 855, 863, 0, 853,
	799, 0, 0, 0, 0, 333, 335, 342, 0, 862,
	336, 811, 802, 813, 815, 816, 817, 812, 0, 804,
	0, 343, 864, 865, 344, 345, 346, 866, 837, 838,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	882, 867, 355, 356, 868, 0, 357, 358, 0, 0,
	359, 0, 360, 753, 752, 1924, 1921, 364, 791, 363,
	869, 366, 367, 369, 368, 748, 0, 870, 770, 854,
	826, 370, 371, 0, 800, 801, 0, 0, 374, 375,
	0, 0, 376, 242, 871, 377, 872, 883, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 884, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 819, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 873, 409, 410,
	411, 412, 757, 413, 0, 417, 418, 419, 420, 421,
	422, 1925, 0, 429, 430, 792, 793, 795, 796, 425,
	431, 432, 847, 433, 414, 415, 434, 874, 435, 814,
	794, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	858, 442, 443, 444, 885, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 790, 0, 833,
	834, 835, 836, 0, 0, 458, 459, 886, 887, 768,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 848, 469, 0, 798, 470, 471, 472, 255, 830,
	876, 0, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 1920, 479, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 0, 0, 774, 0, 0,
	0, 0, 1916, 772, 1919, 761, 762, 763, 759, 760,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 850, 778, 0, 0, 0, 265, 266, 267, 216,
	818, 797, 829, 787, 828, 827, 0, 271, 272, 789,
	788, 275, 276, 277, 779, 849, 278, 877, 878, 222,
	0, 279, 856, 0, 839, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 842, 840, 841, 846, 844,
	843, 845, 294, 295, 502, 296, 832, 1922, 825, 824,
	751, 299, 0, 300, 0, 301, 0, 0, 302, 823,
	304, 0, 305, 0, 306, 307, 0, 756, 308, 309,
	311, 314, 310, 315, 316, 879, 880, 769, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 822, 820, 821,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	881, 0, 231, 326, 0, 327, 328, 1923, 330, 331,
	332, 851, 852, 855, 863, 0, 853, 799, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 811, 802,
	813, 815, 816, 817, 812, 0, 804, 0, 343, 864,
	865, 344, 345, 346, 866, 837, 838, 0, 0, 349,
	350, 351, 0, 353, 352, 0, 354, 882, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	753, 752, 1924, 1921, 364, 791, 363, 869, 366, 367,
	369, 368, 748, 0, 870, 770, 854, 826, 370, 371,
	0, 800, 801, 0, 0, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 883, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 884, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 819, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 757,
	413, 0, 417, 418, 419, 420, 421, 422, 1925, 0,
	429, 430, 792, 793, 795, 796, 425, 431, 432, 847,
	433, 414, 415, 434, 874, 435, 814, 794, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 858, 442, 443,
	444, 885, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 790, 0, 833, 834, 835, 836,
	0, 0, 458, 459, 886, 887, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 848, 469,
	0, 798, 470, 471, 472, 255, 830, 876, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	1920, 479, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 803, 761, 762,
	763, 759, 760, 773, 774, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 850, 778, 0, 0, 0, 265,
	266, 267, 216, 818, 797, 829, 787, 828, 827, 0,
	271, 272, 789, 788, 275, 276, 277, 779, 849, 278,
	877, 878, 222, 0, 279, 856, 0, 839, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 859, 292, 293, 842, 840,
	841, 846, 844, 843, 845, 294, 295, 502, 296, 832,
	298, 825, 824, 751, 299, 0, 300, 0, 301, 0,
	0, 302, 823, 304, 0, 305, 0, 306, 307, 0,
	756, 308, 309, 311, 314, 310, 315, 316, 879, 880,
	769, 860, 0, 0, 0, 0, 0, 317, 318, 319,
	822, 820, 821, 0, 322, 0, 323, 0, 0, 861,
	324, 0, 325, 881, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 851, 852, 855, 863, 0, 853,
	799, 0, 0, 0, 0, 333, 335, 342, 0, 862,
	336, 811, 802, 813, 815, 816, 817, 812, 0, 804,
	0, 343, 864, 865, 344, 345, 346, 866, 837, 838,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	882, 867, 355, 356, 868, 0, 357, 358, 0, 0,
	359, 0, 360, 753, 752, 361, 362, 364, 791, 363,
	869, 366, 367, 369, 368, 748, 0, 870, 770, 854,
	826, 370, 371, 0, 800, 801, 0, 0, 374, 375,
	0, 0, 376, 242, 871, 377, 872, 883, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 884, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 819, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 873, 409, 410,
	411, 412, 757, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 792, 793, 795, 796, 425,
	431, 432, 847, 433, 414, 415, 434, 874, 435, 814,
	794, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	858, 442, 443, 444, 885, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 790, 0, 833,
	834, 835, 836, 0, 0, 458, 459, 886, 887, 768,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 848, 469, 0, 798, 470, 471, 472, 255, 830,
	876, 0, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 749, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 745, 746,
	0, 0, 0, 0, 0, 1398, 0, 774, 0, 0,
	0, 0, 0, 772, 803, 761, 762, 763, 759, 760,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 1765, 264, 0, 0, 0,
	0, 850, 778, 0, 0, 0, 265, 266, 267, 216,
	818, 797, 829, 787, 828, 827, 0, 271, 272, 789,
	788, 275, 276, 277, 779, 849, 278, 877, 878, 222,
	0, 279, 856, 0, 839, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 842, 840, 841, 846, 844,
	843, 845, 294, 295, 502, 296, 832, 298, 825, 824,
	751, 299, 0, 300, 0, 301, 0, 0, 302, 823,
	304, 0, 305, 0, 306, 307, 0, 756, 308, 309,
	311, 314, 310, 315, 316, 879, 880, 769, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 822, 820, 821,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	881, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 851, 852, 855, 863, 0, 853, 799, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 811, 802,
	813, 815, 816, 817, 812, 0, 804, 0, 343, 864,
	865, 344, 345, 346, 866, 837, 838, 0, 0, 349,
	350, 351, 0, 353, 352, 0, 354, 882, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	753, 752, 361, 362, 364, 791, 363, 869, 366, 367,
	369, 368, 748, 0, 870, 770, 854, 826, 370, 371,
	0, 800, 801, 0, 0, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 883, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 884, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 819, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 757,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 792, 793, 795, 796, 425, 431, 432, 847,
	433, 414, 415, 434, 874, 435, 814, 794, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 858, 442, 443,
	444, 885, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 790, 0, 833, 834, 835, 836,
	0, 0, 458, 459, 886, 887, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 848, 469,
	0, 798, 470, 471, 472, 255, 830, 876, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 0, 0, 0,
	0, 0, 0, 0, 774, 0, 0, 0, 0, 1085,
	772, 803, 761, 762, 763, 759, 760, 773, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 850, 778,
	0, 0, 0, 265, 266, 267, 216, 818, 797, 829,
	787, 828, 827, 0, 271, 272, 789, 788, 275, 276,
	277, 779, 849, 278, 877, 878, 222, 0, 279, 856,
	0, 839, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 293, 842, 840, 841, 846, 844, 843, 845, 294,
	295, 502, 296, 832, 298, 825, 824, 751, 299, 0,
	300, 0, 301, 0, 0, 302, 823, 304, 0, 305,
	0, 306, 307, 0, 756, 308, 309, 311, 314, 310,
	315, 316, 879, 880, 769, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 822, 820, 821, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 881, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 1084, 852,
	855, 863, 0, 853, 799, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 811, 802, 813, 815, 816,
	817, 812, 0, 804, 0, 343, 864, 865, 344, 345,
	346, 866, 837, 838, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 882, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 753, 752, 361,
	362, 364, 791, 363, 869, 366, 367, 369, 368, 748,
	0, 870, 770, 854, 826, 370, 371, 0, 800, 801,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 883, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 884, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 819, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 757, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 792,
	793, 795, 796, 425, 431, 432, 847, 433, 414, 415,
	434, 874, 435, 814, 794, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 858, 442, 443, 444, 885, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 790, 0, 833, 834, 835, 836, 0, 0, 458,
	459, 886, 887, 768, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 848, 469, 0, 798, 470,
	471, 472, 255, 830, 876, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 749,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 0, 0, 0, 0, 0, 0,
	0, 774, 0, 0, 0, 0, 1079, 772, 803, 761,
	762, 763, 759, 760, 773, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 850, 778, 0, 0, 0,
	265, 266, 267, 216, 818, 797, 829, 787, 828, 827,
	0, 271, 272, 789, 788, 275, 276, 277, 779, 849,
	278, 877, 878, 222, 0, 279, 856, 0, 839, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	0, 289, 0, 290, 291, 0, 859, 292, 293, 842,
	840, 841, 846, 844, 843, 845, 294, 295, 502, 296,
	832, 298, 825, 824, 751, 299, 0, 300, 0, 301,
	0, 0, 302, 823, 304, 0, 305, 0, 306, 307,
	0, 756, 308, 309, 311, 314, 310, 315, 316, 879,
	880, 769, 860, 0, 0, 0, 0, 0, 317, 318,
	319, 822, 820, 821, 0, 322, 0, 323, 0, 0,
	861, 324, 0, 325, 881, 0, 231, 326, 0, 327,
	328, 329, 330, 331, 332, 1078, 852, 855, 863, 0,
	853, 799, 0, 0, 0, 0, 333, 335, 342, 0,
	862, 336, 811, 802, 813, 815, 816, 817, 812, 0,
	804, 0, 343, 864, 865, 344, 345, 346, 866, 837,
	838, 0, 0, 349, 350, 351, 0, 353, 352, 0,
	354, 882, 867, 355, 356, 868, 0, 357, 358, 0,
	0, 359, 0, 360, 753, 752, 361, 362, 364, 791,
	363, 869, 366, 367, 369, 368, 748, 0, 870, 770,
	854, 826, 370, 371, 0, 800, 801, 0, 0, 374,
	375, 0, 0, 376, 242, 871, 377, 872, 883, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 884, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 819,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 873, 409,
	410, 411, 412, 757, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 792, 793, 795, 796,
	425, 431, 432, 847, 433, 414, 415, 434, 874, 435,
	814, 794, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 858, 442, 443, 444, 885, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 790, 0,
	833, 834, 835, 836, 0, 0, 458, 459, 886, 887,
	768, 460, 461, 0, 462, 463, 0, 0, 464, 465,
	466, 468, 848, 469, 0, 798, 470, 471, 472, 255,
	830, 876, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 0, 0, 0, 0, 0, 0, 0, 774, 0,
	0, 0, 0, 1074, 772, 803, 761, 762, 763, 759,
	760, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 850, 778, 0, 0, 0, 265, 266, 267,
	216, 818, 797, 829, 787, 828, 827, 0, 271, 272,
	789, 788, 275, 276, 277, 779, 849, 278, 877, 878,
	222, 0, 279, 856, 0, 839, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 842, 840, 841, 846,
	844, 843, 845, 294, 295, 502, 296, 832, 298, 825,
	824, 751, 299, 0, 300, 0, 301, 0, 0, 302,
	823, 304, 0, 305, 0, 306, 307, 0, 756, 308,
	309, 311, 314, 310, 315, 316, 879, 880, 769, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 822, 820,
	821, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 881, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 851, 852, 855, 863, 0, 853, 799, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 811,
	802, 813, 815, 816, 817, 812, 0, 804, 0, 343,
	864, 865, 344, 345, 346, 866, 837, 838, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 882, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 753, 752, 361, 362, 364, 791, 363, 869, 366,
	367, 369, 368, 748, 0, 870, 770, 854, 826, 370,
	371, 0, 800, 801, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 883, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 884, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 819, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	757, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 792, 793, 795, 796, 425, 431, 432,
	847, 433, 414, 415, 434, 874, 435, 814, 794, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 858, 442,
	443, 444, 885, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 790, 0, 833, 834, 835,
	836, 0, 0, 458, 459, 886, 887, 768, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 848,
	469, 0, 798, 470, 471, 472, 255, 830, 876, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 749, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 745, 746, 803, 761,
	762, 763, 759, 760, 773, 774, 0, 0, 0, 0,
	0, 772, 0, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 850, 778, 0, 0, 0,
	265, 266, 267, 216, 818, 797, 829, 787, 828, 827,
	0, 271, 272, 789, 788, 275, 276, 277, 779, 849,
	278, 877, 878, 222, 0, 279, 856, 0, 839, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	0, 289, 0, 290, 291, 0, 859, 292, 293, 842,
	840, 841, 846, 844, 843, 845, 294, 295, 502, 296,
	832, 298, 825, 824, 751, 299, 0, 300, 0, 301,
	0, 0, 302, 823, 304, 0, 305, 0, 306, 307,
	0, 756, 308, 309, 311, 314, 310, 315, 316, 879,
	880, 769, 860, 0, 0, 0, 0, 0, 317, 318,
	319, 822, 820, 821, 0, 322, 0, 323, 0, 0,
	861, 324, 0, 325, 881, 0, 231, 326, 0, 327,
	328, 329, 330, 331, 332, 851, 852, 855, 863, 0,
	853, 799, 0, 0, 0, 0, 333, 335, 342, 0,
	862, 336, 811, 802, 813, 815, 816, 817, 812, 0,
	804, 0, 343, 864, 865, 344, 345, 346, 866, 837,
	838, 0, 0, 349, 350, 351, 0, 353, 352, 0,
	354, 882, 867, 355, 356, 868, 0, 357, 358, 0,
	0, 359, 0, 360, 753, 752, 361, 362, 364, 791,
	363, 869, 366, 367, 369, 368, 748, 0, 870, 770,
	854, 826, 370, 371, 0, 800, 801, 0, 0, 374,
	375, 0, 0, 376, 242, 871, 377, 872, 883, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 884, 386,
	245, 387, 0, 388, 389, 390, 391, 392, 393, 819,
	394, 395, 0, 396, 397, 398, 399, 400, 0, 402,
	403, 401, 404, 405, 406, 407, 0, 408, 873, 409,
	410, 411, 412, 757, 413, 0, 417, 418, 419, 420,
	421, 422, 423, 0, 429, 430, 792, 793, 795, 796,
	425, 431, 432, 847, 433, 414, 415, 434, 874, 435,
	814, 794, 437, 0, 447, 438, 439, 440, 416, 441,
	445, 858, 442, 443, 444, 885, 0, 448, 449, 0,
	450, 451, 452, 453, 454, 312, 455, 313, 790, 0,
	833, 834, 835, 836, 0, 0, 458, 459, 886, 887,
	768, 460, 461, 0, 462, 463, 0, 0, 464, 465,
	466, 468, 848, 469, 0, 798, 470, 471, 472, 255,
	830, 876, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 749, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 745,
	746, 803, 761, 762, 763, 759, 760, 773, 774, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 850, 778,
	0, 0, 0, 265, 266, 267, 216, 818, 797, 829,
	787, 828, 827, 0, 271, 272, 789, 788, 275, 276,
	277, 779, 849, 278, 877, 878, 222, 0, 279, 856,
	0, 839, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 3128, 842, 840, 841, 846, 844, 843, 845, 294,
	295, 502, 296, 832, 298, 825, 824, 751, 299, 0,
	300, 0, 301, 0, 0, 302, 823, 304, 0, 305,
	0, 306, 307, 0, 756, 308, 309, 311, 314, 310,
	315, 316, 879, 880, 769, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 822, 820, 821, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 881, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 851, 852,
	855, 863, 0, 853, 799, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 811, 802, 813, 815, 816,
	817, 812, 0, 804, 0, 343, 864, 865, 344, 345,
	346, 866, 837, 838, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 882, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 753, 752, 361,
	362, 364, 791, 363, 869, 366, 367, 369, 368, 748,
	0, 870, 770, 854, 826, 370, 371, 0, 800, 801,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 883, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 884, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 819, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 757, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 792,
	793, 795, 796, 425, 431, 432, 847, 433, 414, 415,
	434, 874, 435, 814, 794, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 858, 442, 443, 444, 885, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 790, 0, 833, 834, 835, 836, 0, 0, 458,
	459, 886, 887, 768, 460, 461, 0, 3127, 463, 0,
	0, 464, 465, 466, 468, 848, 469, 0, 798, 470,
	471, 472, 255, 830, 876, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 749,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 745, 746, 803, 761, 762, 763, 759, 760,
	773, 774, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 850, 778, 0, 0, 0, 265, 266, 267, 3126,
	818, 797, 829, 787, 828, 827, 0, 271, 272, 789,
	788, 275, 276, 277, 779, 849, 278, 877, 878, 222,
	0, 279, 856, 0, 839, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 3128, 842, 840, 841, 846, 844,
	843, 845, 294, 295, 502, 296, 832, 298, 825, 824,
	751, 299, 0, 300, 0, 301, 0, 0, 302, 823,
	304, 0, 305, 0, 306, 307, 0, 756, 308, 309,
	311, 314, 310, 315, 316, 879, 880, 769, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 822, 820, 821,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	881, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 851, 852, 855, 863, 0, 853, 799, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 811, 802,
	813, 815, 816, 817, 812, 0, 804, 0, 343, 864,
	865, 344, 345, 346, 866, 837, 838, 0, 0, 349,
	350, 351, 0, 353, 352, 0, 354, 882, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	753, 752, 361, 362, 364, 791, 363, 869, 366, 367,
	369, 368, 748, 0, 870, 770, 854, 826, 370, 371,
	0, 800, 801, 0, 0, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 883, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 884, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 819, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 757,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 792, 793, 795, 796, 425, 431, 432, 847,
	433, 414, 415, 434, 874, 435, 814, 794, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 858, 442, 443,
	444, 885, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 790, 0, 833, 834, 835, 836,
	0, 0, 458, 459, 886, 887, 768, 460, 461, 0,
	3127, 463, 0, 0, 464, 465, 466, 468, 848, 469,
	0, 798, 470, 471, 472, 255, 830, 876, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 749, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 745, 746, 803, 761, 762,
	763, 759, 760, 773, 774, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 850, 778, 0, 0, 0, 265,
	266, 267, 216, 818, 797, 829, 787, 828, 827, 0,
	271, 272, 789, 788, 275, 276, 277, 779, 849, 278,
	877, 878, 222, 0, 279, 856, 0, 839, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 859, 292, 293, 842, 840,
	841, 846, 844, 843, 845, 294, 295, 502, 296, 832,
	298, 825, 824, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 823, 304, 0, 305, 0, 306, 307, 0,
	756, 308, 309, 311, 314, 310, 315, 316, 879, 880,
	769, 860, 0, 0, 0, 0, 0, 317, 318, 319,
	822, 820, 821, 0, 322, 0, 323, 0, 0, 861,
	324, 0, 325, 881, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 851, 852, 855, 863, 0, 853,
	799, 0, 0, 0, 0, 333, 335, 342, 0, 862,
	336, 811, 802, 813, 815, 816, 817, 812, 0, 804,
	0, 343, 864, 865, 344, 345, 346, 866, 837, 838,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	882, 867, 355, 356, 868, 0, 357, 358, 0, 0,
	359, 0, 360, 941, 940, 361, 362, 364, 791, 363,
	869, 366, 367, 369, 368, 0, 0, 870, 770, 854,
	826, 370, 371, 0, 800, 801, 0, 0, 374, 375,
	0, 0, 376, 242, 871, 377, 872, 883, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 884, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 819, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 873, 409, 410,
	411, 412, 757, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 792, 793, 795, 796, 425,
	431, 432, 847, 433, 414, 415, 434, 874, 435, 814,
	794, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	858, 442, 443, 444, 885, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 790, 0, 833,
	834, 835, 836, 0, 0, 458, 459, 886, 887, 768,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 848, 469, 0, 798, 470, 471, 472, 255, 830,
	876, 0, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 1941, 0, 0, 0, 0, 1939, 1940,
	803, 761, 762, 763, 759, 760, 773, 774, 0, 0,
	0, 0, 0, 772, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 850, 778, 0,
	0, 0, 265, 266, 267, 0, 818, 797, 829, 787,
	828, 827, 0, 271, 272, 789, 788, 275, 276, 277,
	779, 849, 278, 877, 878, 222, 0, 279, 856, 0,
	839, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 859, 292,
	3128, 842, 840, 841, 846, 844, 843, 845, 294, 295,
	502, 296, 832, 298, 825, 824, 751, 299, 0, 300,
	0, 301, 0, 0, 302, 823, 304, 0, 305, 0,
	306, 307, 0, 756, 308, 309, 311, 314, 310, 315,
	316, 879, 880, 769, 860, 0, 0, 0, 0, 0,
	317, 318, 319, 822, 820, 821, 0, 322, 0, 323,
	0, 0, 861, 324, 0, 325, 881, 0, 231, 326,
	0, 327, 328, 329, 330, 331, 332, 851, 852, 855,
	0, 0, 853, 799, 0, 0, 0, 0, 333, 335,
	342, 0, 862, 336, 811, 802, 813, 815, 816, 817,
	812, 0, 804, 0, 343, 0, 0, 344, 345, 346,
	866, 837, 838, 0, 0, 349, 350, 351, 0, 353,
	352, 0, 354, 882, 867, 355, 356, 0, 0, 357,
	358, 0, 0, 359, 0, 360, 753, 752, 361, 362,
	364, 791, 363, 869, 366, 367, 369, 368, 748, 0,
	0, 770, 854, 826, 370, 371, 0, 800, 801, 0,
	0, 374, 375, 0, 0, 376, 242, 871, 377, 872,
	883, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	884, 386, 245, 387, 0, 388, 389, 390, 391, 392,
	393, 819, 394, 395, 0, 396, 397, 398, 399, 400,
	0, 402, 403, 401, 404, 405, 406, 407, 0, 408,
	873, 409, 410, 411, 412, 757, 413, 0, 417, 418,
	419, 420, 421, 422, 423, 0, 429, 430, 792, 793,
	795, 796, 425, 431, 432, 847, 433, 414, 415, 434,
	0, 435, 814, 794, 437, 0, 447, 438, 439, 440,
	416, 441, 445, 858, 442, 443, 444, 885, 0, 448,
	449, 0, 450, 451, 452, 453, 454, 312, 455, 313,
	790, 0, 833, 834, 835, 836, 0, 0, 458, 459,
	886, 887, 768, 460, 461, 0, 3127, 463, 0, 0,
	464, 465, 466, 468, 848, 469, 0, 798, 470, 471,
	472, 255, 830, 876, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 733, 0, 939, 0, 0, 0, 0,
	0, 745, 746, 0, 0, 0, 0, 0, 0, 0,
	774, 0, 260, 261, 262, 263, 772, 264, 0, 0,
	0, 0, 850, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 849, 278, 220, 221,
	222, 0, 279, 856, 0, 839, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 842, 840, 841, 846,
	844, 843, 845, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 879, 880, 0, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 881, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 851, 852, 855, 863, 0, 853, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 926, 353, 352, 0, 354, 882, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 854, 241, 370,
	371, 0, 372, 373, 0, 931, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 883, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 884, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 933, 0, 417, 418, 419, 420, 421, 422, 423,
	172, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	847, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 885, 0, 448, 449, 174, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 886, 887, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 848,
	469, 0, 467, 470, 471, 472, 1163, 256, 257, 0,
	474, 473, 258, 0, 939, 0, 166, 475, 476, 259,
	477, 478, 479, 0, 167, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 850, 0, 923, 0, 1477, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 849, 278, 220, 221, 222,
	0, 279, 856, 0, 839, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 842, 840, 841, 846, 844,
	843, 845, 294, 295, 502, 296, 297, 298, 224, 225,
	0, 299, 0, 300, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 879, 880, 0, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	881, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 851, 852, 855, 863, 0, 853, 334, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 235, 338,
	337, 339, 340, 341, 236, 0, 237, 0, 343, 864,
	865, 344, 345, 346, 866, 347, 348, 0, 0, 349,
	350, 351, 926, 353, 352, 0, 354, 882, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	941, 940, 361, 362, 364, 365, 363, 869, 366, 367,
	369, 368, 0, 0, 870, 0, 854, 241, 370, 371,
	0, 372, 373, 0, 931, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 883, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 884, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 247,
	933, 0, 417, 418, 419, 420, 421, 422, 423, 172,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 847,
	433, 414, 415, 434, 874, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 885, 0, 448, 449, 174, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 0, 250, 251, 252, 457,
	0, 0, 458, 459, 886, 887, 0, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 848, 469,
	0, 467, 470, 471, 472, 1163, 256, 257, 0, 474,
	473, 258, 2343, 0, 939, 166, 475, 476, 259, 477,
	478, 479, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 850, 923, 0, 1477, 0, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 849, 278, 220, 221, 222,
	0, 279, 856, 0, 839, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 842, 840, 841, 846, 844,
	843, 845, 294, 295, 502, 296, 297, 298, 224, 225,
	0, 299, 0, 300, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 879, 880, 0, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	881, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 851, 852, 855, 863, 0, 853, 334, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 235, 338,
	337, 339, 340, 341, 236, 0, 237, 0, 343, 864,
	865, 344, 345, 346, 866, 347, 348, 0, 0, 349,
	350, 351, 926, 353, 352, 0, 354, 882, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	941, 940, 361, 362, 364, 365, 363, 869, 366, 367,
	369, 368, 0, 0, 870, 0, 854, 241, 370, 371,
	0, 372, 373, 0, 931, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 883, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 884, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 247,
	933, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 847,
	433, 414, 415, 434, 874, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 885, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 0, 250, 251, 252, 457,
	0, 0, 458, 459, 886, 887, 0, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 848, 469,
	0, 467, 470, 471, 472, 255, 256, 257, 0, 474,
	473, 258, 922, 0, 939, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 850, 923, 0, 928, 0, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 849, 278, 220, 221, 222,
	0, 279, 856, 0, 839, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 842, 840, 841, 846, 844,
	843, 845, 294, 295, 502, 296, 297, 298, 224, 225,
	0, 299, 0, 300, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 879, 880, 0, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	881, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 851, 852, 855, 863, 0, 853, 334, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 235, 338,
	337, 339, 340, 341, 236, 0, 237, 0, 343, 864,
	865, 344, 345, 346, 866, 347, 348, 0, 0, 349,
	350, 351, 926, 353, 352, 0, 354, 882, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	941, 940, 361, 362, 364, 365, 363, 869, 366, 367,
	369, 368, 0, 0, 870, 0, 854, 241, 370, 371,
	0, 372, 373, 0, 931, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 883, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 884, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 247,
	933, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 847,
	433, 414, 415, 434, 874, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 885, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 0, 250, 251, 252, 457,
	0, 0, 458, 459, 886, 887, 0, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 848, 469,
	0, 467, 470, 471, 472, 255, 256, 257, 0, 474,
	473, 258, 0, 939, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	850, 0, 923, 0, 928, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 849, 278, 220, 221, 222, 0,
	279, 856, 0, 839, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 842, 840, 841, 846, 844, 843,
	845, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 879, 880, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 881,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	851, 852, 855, 863, 0, 853, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 926, 353, 352, 0, 354, 882, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 854, 241, 370, 371, 0,
	372, 373, 0, 931, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 883, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 884, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 933,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 847, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	885, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 886, 887, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 848, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 939, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 850,
	0, 923, 0, 928, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 849, 278, 220, 221, 222, 0, 279,
	856, 0, 839, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	859, 292, 293, 842, 840, 841, 846, 844, 843, 845,
	294, 295, 502, 296, 297, 298, 224, 225, 0, 299,
	0, 300, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 879, 880, 0, 860, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 861, 324, 0, 325, 881, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 851,
	852, 855, 863, 0, 853, 334, 0, 0, 0, 0,
	333, 335, 342, 0, 862, 336, 235, 338, 337, 339,
	340, 341, 236, 0, 237, 0, 343, 864, 865, 344,
	345, 346, 866, 347, 348, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 882, 867, 355, 356, 868,
	0, 357, 358, 0, 0, 359, 0, 360, 941, 940,
	361, 362, 364, 365, 363, 869, 366, 367, 369, 368,
	0, 0, 870, 0, 854, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 871,
	377, 872, 883, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 884, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 873, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 847, 433, 414,
	415, 434, 874, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 885,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 0, 250, 251, 252, 457, 0, 0,
	458, 459, 886, 887, 0, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 848, 469, 0, 467,
	470, 471, 472, 255, 256, 257, 0, 474, 473, 258,
	0, 939, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 850, 0,
	0, 0, 2682, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 849, 278, 220, 221, 222, 0, 279, 856,
	0, 839, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 293, 842, 840, 841, 846, 844, 843, 845, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 879, 880, 0, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 881, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 851, 852,
	855, 863, 0, 853, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 864, 865, 344, 345,
	346, 866, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 882, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 941, 940, 361,
	362, 364, 365, 363, 869, 366, 367, 369, 368, 0,
	0, 870, 0, 854, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 883, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 884, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 247, 933, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 847, 433, 414, 415,
	434, 874, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 885, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 886, 887, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 848, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 1160,
	0, 1051, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 1379, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 955, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 863, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 864, 865, 344, 345,
	346, 866, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 941, 940, 361,
	362, 364, 365, 363, 869, 366, 367, 369, 368, 0,
	0, 870, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 172, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 874, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 174, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 1163, 256, 257, 0, 474, 473, 258, 0,
	0, 0, 166, 475, 476, 259, 477, 478, 479, 0,
	167, 0, 0, 0, 0, 1051, 1050, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 955, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 863, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 1051, 1050, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 2510, 264, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 0, 278, 220, 221, 222,
	0, 279, 223, 0, 955, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 859, 292, 293, 0, 0, 0, 0, 0,
	0, 0, 294, 295, 502, 296, 297, 298, 224, 225,
	0, 299, 0, 300, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 860, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 861, 324, 0, 325,
	230, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 232, 233, 234, 863, 0, 238, 334, 0, 0,
	0, 0, 333, 335, 342, 0, 862, 336, 235, 338,
	337, 339, 340, 341, 236, 0, 237, 0, 343, 864,
	865, 344, 345, 346, 866, 347, 348, 0, 0, 349,
	350, 351, 0, 353, 352, 0, 354, 239, 867, 355,
	356, 868, 0, 357, 358, 0, 0, 359, 0, 360,
	941, 940, 361, 362, 364, 365, 363, 869, 366, 367,
	369, 368, 0, 0, 870, 0, 240, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 871, 377, 872, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 873, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 0,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 874, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 0, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 0, 250, 251, 252, 457,
	0, 0, 458, 459, 253, 254, 0, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 255, 256, 257, 0, 474,
	473, 258, 733, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 215, 0, 0, 1187, 0, 265, 266, 267, 216,
	217, 268, 218, 269, 270, 219, 0, 271, 272, 273,
	274, 275, 276, 277, 0, 0, 278, 220, 221, 222,
	0, 279, 223, 0, 0, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 0, 292, 293, 0, 0, 0, 0, 0,
	0, 0, 294, 295, 502, 296, 297, 298, 224, 225,
	0, 299, 0, 300, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 0, 306, 307, 0, 226, 308, 309,
	311, 314, 310, 315, 316, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 317, 318, 319, 229, 320, 321,
	0, 322, 0, 323, 0, 0, 0, 324, 0, 325,
	230, 0, 231, 326, 0, 327, 328, 329, 330, 331,
	332, 232, 233, 234, 0, 0, 238, 334, 0, 0,
	0, 0, 333, 335, 342, 0, 0, 336, 235, 338,
	337, 339, 340, 341, 236, 0, 237, 0, 343, 0,
	0, 344, 345, 346, 0, 347, 348, 0, 0, 349,
	350, 351, 0, 353, 352, 0, 354, 239, 0, 355,
	356, 0, 0, 357, 358, 0, 0, 359, 0, 360,
	0, 0, 361, 362, 364, 365, 363, 0, 366, 367,
	369, 368, 0, 0, 0, 0, 240, 241, 370, 371,
	0, 372, 373, 0, 0, 374, 375, 0, 0, 376,
	242, 0, 377, 0, 243, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 244, 386, 245, 387, 0, 388,
	389, 390, 391, 392, 393, 246, 394, 395, 0, 396,
	397, 398, 399, 400, 0, 402, 403, 401, 404, 405,
	406, 407, 0, 408, 0, 409, 410, 411, 412, 247,
	413, 0, 417, 418, 419, 420, 421, 422, 423, 172,
	429, 430, 424, 426, 427, 428, 425, 431, 432, 0,
	433, 414, 415, 434, 0, 435, 248, 436, 437, 0,
	447, 438, 439, 440, 416, 441, 445, 446, 442, 443,
	444, 249, 0, 448, 449, 174, 450, 451, 452, 453,
	454, 312, 455, 313, 456, 0, 250, 251, 252, 457,
	0, 0, 458, 459, 253, 254, 0, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 1163, 256, 257, 0, 474,
	473, 258, 0, 499, 0, 166, 475, 476, 259, 477,
	478, 479, 0, 167, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 137, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 0, 499, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 215,
	0, 0, 0, 2126, 265, 266, 267, 216, 217, 268,
	218, 269, 270, 219, 0, 271, 272, 273, 274, 275,
	276, 277, 0, 0, 278, 220, 221, 222, 0, 279,
	223, 0, 0, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	0, 292, 293, 0, 0, 0, 0, 0, 0, 0,
	294, 295, 502, 296, 297, 298, 224, 225, 0, 299,
	0, 300, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 0, 306, 307, 0, 226, 308, 309, 311, 314,
	310, 315, 316, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 317, 318, 319, 229, 320, 321, 0, 322,
	0, 323, 0, 0, 0, 324, 0, 325, 230, 0,
	231, 326, 0, 327, 328, 329, 330, 331, 332, 232,
	233, 234, 0, 0, 238, 334, 0, 0, 0, 0,
	333, 335, 342, 0, 0, 336, 235, 338, 337, 339,
	340, 341, 236, 0, 237, 0, 343, 0, 0, 344,
	345, 346, 0, 347, 348, 0, 0, 349, 350, 351,
	0, 353, 352, 0, 354, 239, 0, 355, 356, 0,
	0, 357, 358, 0, 0, 359, 0, 360, 0, 0,
	361, 362, 364, 365, 363, 0, 366, 367, 369, 368,
	0, 0, 0, 0, 240, 241, 370, 371, 0, 372,
	373, 0, 0, 374, 375, 0, 0, 376, 242, 0,
	377, 0, 243, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 244, 386, 245, 387, 0, 388, 389, 390,
	391, 392, 393, 246, 394, 395, 0, 396, 397, 398,
	399, 400, 0, 402, 403, 401, 404, 405, 406, 407,
	0, 408, 0, 409, 410, 411, 412, 247, 413, 0,
	417, 418, 419, 420, 421, 422, 423, 0, 429, 430,
	424, 426, 427, 428, 425, 431, 432, 0, 433, 414,
	415, 434, 0, 435, 248, 436, 437, 0, 447, 438,
	439, 440, 416, 441, 445, 446, 442, 443, 444, 249,
	0, 448, 449, 0, 450, 451, 452, 453, 454, 312,
	455, 313, 456, 0, 250, 251, 252, 457, 0, 0,
	458, 459, 253, 254, 0, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 255, 256, 257, 0, 474, 473, 258,
	0, 499, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 2591, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 1239, 0, 1051, 1050, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 955, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 860,
	0, 0, 0, 0, 0, 1238, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 863, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 1237, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 1156, 0, 1051, 1050, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 955, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1155, 233, 234, 863, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 1152, 0, 1051, 1050, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 955, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1151, 233, 234, 863, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 1110, 0, 1051, 1050, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 955, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1109, 233, 234, 863, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 1107, 0, 1051, 1050, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 955, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1106, 233, 234, 863, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 1044, 0, 1051, 1050, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 955, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1046, 233, 234, 863, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 1051, 1050, 0, 0, 0, 0, 1048,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 955, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 859, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 860, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 861, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 863, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 862, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 864, 865,
	344, 345, 346, 866, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 867, 355, 356,
	868, 0, 357, 358, 0, 0, 359, 0, 360, 941,
	940, 361, 362, 364, 365, 363, 869, 366, 367, 369,
	368, 0, 0, 870, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	871, 377, 872, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 873, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 874, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 1051, 1050, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 955, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 859,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 860, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 861, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 863, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 862, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 864, 865, 344, 345,
	346, 866, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 867, 355, 356, 868, 0,
	357, 358, 0, 0, 359, 0, 360, 941, 940, 361,
	362, 364, 365, 363, 869, 366, 367, 369, 368, 0,
	0, 870, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 871, 377,
	872, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 873, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 874, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 1051, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 955, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 859, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 860,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 861, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 863, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 862, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	864, 865, 344, 345, 346, 866, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 867,
	355, 356, 868, 0, 357, 358, 0, 0, 359, 0,
	360, 941, 940, 361, 362, 364, 365, 363, 869, 366,
	367, 369, 368, 0, 0, 870, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 871, 377, 872, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 873, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 874, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 603, 0, 208, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 214, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 213, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 207, 0, 208, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 482, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 214, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 213, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 208,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 482, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 214,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	1737, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	213, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 208, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 482, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 214, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 213, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 499, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 482, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 499, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	482, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 2013, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 2010, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 2089, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 2016, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 2087, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 2086, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 2015, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	2088, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 2013, 279, 223, 0, 0, 2007, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 2010, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 2016, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 2006, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 2015,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 2014, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 610, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 609, 587, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 590, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 591,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	592, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 586, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 587, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 590, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 591,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	592, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 499,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 590, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 591, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 592, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1282, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 1285, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	1283, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 1284, 473, 258, 1131, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 931,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1039, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1041, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 931,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1036, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1038, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 931,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 943, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 945, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 931,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 595, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	594, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 523, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	522, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 521, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 499, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 1988, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 0, 474, 473,
	258, 499, 2150, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 2703, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 499,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 931,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 499, 2150, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 2147,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 499, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 260, 261,
	262, 263, 1729, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 1691,
	0, 499, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 1689,
	0, 499, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 635,
	0, 499, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 1209, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 636, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 632, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 631, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 0, 474, 473, 258, 1576,
	0, 499, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 1575, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 1560, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 635, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	1209, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 636, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 632, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 631, 251, 252,
	457, 0, 0, 458, 1210, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 635, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 625, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 636, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 632, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 1182, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 631, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 1149, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1148, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 1145, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1144, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 1142, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1141, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 1139, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1138, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 1135, 0, 499, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 1134, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 499,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	1123, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1121, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1120, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1112, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1103, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1102, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1098, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1094, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1096, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1061, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 1063, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 1055, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 635, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 625, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 624,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 636, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 626, 413, 0, 417, 418, 632,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 627, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 631, 251, 252, 457, 0, 0, 458, 629, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 615, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 616, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 612, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 601, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 0, 474, 473, 258, 545, 0, 499,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 232, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 499, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 417, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 499, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 2401, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 433, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 499, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 2399, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 394, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 326, 0, 327, 328, 329, 330,
	331, 332, 2388, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 391, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 413, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 499,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 265, 266, 267, 216, 217, 268, 218, 269, 270,
	219, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 220, 221, 222, 0, 279, 223, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 224, 225, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 0, 306,
	307, 0, 226, 308, 309, 311, 314, 310, 315, 316,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 319, 229, 320, 321, 0, 322, 0, 323, 0,
	0, 0, 324, 0, 325, 230, 0, 231, 326, 0,
	327, 328, 329, 330, 331, 332, 2109, 233, 234, 0,
	0, 238, 334, 0, 0, 0, 0, 333, 335, 342,
	0, 0, 336, 235, 338, 337, 339, 340, 341, 236,
	0, 237, 0, 343, 0, 0, 344, 345, 346, 0,
	347, 348, 0, 0, 349, 350, 351, 0, 353, 352,
	0, 354, 239, 0, 355, 356, 0, 0, 357, 358,
	0, 0, 359, 0, 360, 0, 0, 361, 362, 364,
	365, 363, 0, 366, 367, 369, 368, 0, 0, 0,
	0, 240, 241, 370, 371, 0, 372, 373, 0, 0,
	374, 375, 0, 0, 376, 242, 0, 377, 0, 243,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 244,
	386, 245, 387, 0, 388, 389, 390, 391, 392, 393,
	246, 394, 395, 0, 396, 397, 398, 399, 400, 0,
	402, 403, 401, 404, 405, 406, 407, 0, 408, 0,
	409, 410, 411, 412, 247, 413, 0, 417, 418, 419,
	420, 421, 422, 423, 0, 429, 430, 424, 426, 427,
	428, 425, 431, 432, 0, 433, 414, 415, 434, 0,
	435, 248, 436, 437, 0, 447, 438, 439, 440, 416,
	441, 445, 446, 442, 443, 444, 249, 0, 448, 449,
	0, 450, 451, 452, 453, 454, 312, 455, 313, 456,
	0, 250, 251, 252, 457, 0, 0, 458, 459, 253,
	254, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	255, 256, 257, 499, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 265, 266, 267, 216, 217,
	268, 218, 269, 270, 219, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 220, 221, 222, 0,
	279, 223, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 224, 225, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 0, 306, 307, 0, 226, 308, 309, 311,
	314, 310, 315, 316, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 317, 318, 319, 229, 320, 321, 0,
	322, 0, 323, 0, 0, 0, 324, 0, 325, 230,
	0, 231, 326, 0, 327, 328, 329, 330, 331, 332,
	232, 233, 234, 0, 0, 238, 334, 0, 0, 0,
	0, 333, 335, 342, 0, 0, 336, 235, 338, 337,
	339, 340, 341, 236, 0, 237, 0, 343, 0, 0,
	344, 345, 346, 0, 347, 348, 0, 0, 349, 350,
	351, 0, 353, 352, 0, 354, 239, 0, 355, 356,
	0, 0, 357, 358, 0, 0, 359, 0, 360, 0,
	0, 361, 362, 364, 365, 363, 0, 366, 367, 369,
	368, 0, 0, 0, 0, 240, 241, 370, 371, 0,
	372, 373, 0, 0, 374, 375, 0, 0, 376, 242,
	0, 377, 0, 243, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 244, 386, 245, 387, 0, 388, 389,
	390, 391, 392, 393, 246, 394, 395, 0, 396, 397,
	398, 399, 400, 0, 402, 403, 401, 404, 405, 406,
	407, 0, 408, 0, 409, 410, 411, 412, 247, 413,
	0, 616, 418, 419, 420, 421, 422, 423, 0, 429,
	430, 424, 426, 427, 428, 425, 431, 432, 0, 433,
	414, 415, 434, 0, 435, 248, 436, 437, 0, 447,
	438, 439, 440, 416, 441, 445, 446, 442, 443, 444,
	249, 0, 448, 449, 0, 450, 451, 452, 453, 454,
	312, 455, 313, 456, 0, 250, 251, 252, 457, 0,
	0, 458, 459, 253, 254, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 255, 256, 257, 499, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 215, 0, 1588, 0, 0, 265,
	266, 267, 216, 217, 268, 218, 269, 270, 219, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	220, 221, 222, 0, 279, 223, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 224, 225, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 0, 306, 307, 0,
	226, 308, 309, 311, 314, 310, 315, 316, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 319,
	229, 320, 321, 0, 322, 0, 323, 0, 0, 0,
	324, 0, 325, 230, 0, 231, 326, 0, 327, 328,
	329, 330, 331, 332, 232, 233, 234, 0, 0, 238,
	334, 0, 0, 0, 0, 333, 335, 342, 0, 0,
	336, 235, 338, 337, 339, 340, 341, 236, 0, 237,
	0, 343, 0, 0, 344, 345, 346, 0, 347, 348,
	0, 0, 349, 350, 351, 0, 353, 352, 0, 354,
	239, 0, 355, 356, 0, 0, 357, 358, 0, 0,
	359, 0, 360, 0, 0, 361, 362, 364, 365, 363,
	0, 366, 367, 369, 368, 0, 0, 0, 0, 240,
	241, 370, 371, 0, 372, 373, 0, 0, 374, 375,
	0, 0, 376, 242, 0, 377, 0, 243, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 244, 386, 245,
	387, 0, 388, 389, 390, 391, 392, 393, 246, 394,
	395, 0, 396, 397, 398, 399, 400, 0, 402, 403,
	401, 404, 405, 406, 407, 0, 408, 0, 409, 410,
	411, 412, 247, 413, 0, 417, 418, 419, 420, 421,
	422, 423, 0, 429, 430, 424, 426, 427, 428, 425,
	431, 432, 0, 0, 414, 415, 434, 0, 435, 248,
	436, 437, 0, 447, 438, 439, 440, 416, 441, 445,
	446, 442, 443, 444, 249, 0, 448, 449, 0, 450,
	451, 452, 453, 454, 312, 455, 313, 456, 0, 250,
	251, 252, 457, 0, 0, 458, 459, 253, 254, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 255, 256,
	257, 499, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 265, 266, 267, 216, 217, 268, 218,
	269, 270, 219, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 220, 221, 222, 0, 279, 223,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 224, 225, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	0, 306, 307, 0, 226, 308, 309, 311, 314, 310,
	315, 316, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 319, 229, 320, 321, 0, 322, 0,
	323, 0, 0, 0, 324, 0, 325, 230, 0, 231,
	326, 0, 327, 328, 329, 330, 331, 332, 232, 233,
	234, 0, 0, 238, 334, 0, 0, 0, 0, 333,
	335, 342, 0, 0, 336, 235, 338, 337, 339, 340,
	341, 236, 0, 237, 0, 343, 0, 0, 344, 345,
	346, 0, 347, 348, 0, 0, 349, 350, 351, 0,
	353, 352, 0, 354, 239, 0, 355, 356, 0, 0,
	357, 358, 0, 0, 359, 0, 360, 0, 0, 361,
	362, 364, 365, 363, 0, 366, 367, 369, 368, 0,
	0, 0, 0, 240, 241, 370, 371, 0, 372, 373,
	0, 0, 374, 375, 0, 0, 376, 242, 0, 377,
	0, 243, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 244, 386, 245, 387, 0, 388, 389, 390, 391,
	392, 393, 246, 905, 395, 0, 396, 397, 398, 399,
	400, 0, 402, 403, 401, 404, 405, 406, 407, 0,
	408, 0, 409, 410, 411, 412, 247, 413, 0, 417,
	418, 419, 420, 421, 422, 423, 0, 429, 430, 424,
	426, 427, 428, 425, 431, 432, 0, 433, 414, 415,
	434, 0, 435, 248, 436, 437, 0, 447, 438, 439,
	440, 416, 441, 445, 446, 442, 443, 444, 249, 0,
	448, 449, 0, 450, 451, 452, 453, 454, 312, 455,
	313, 456, 0, 250, 251, 252, 457, 0, 0, 458,
	459, 253, 254, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 255, 256, 257, 499, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 265, 266, 267,
	216, 217, 268, 218, 269, 270, 219, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 220, 221,
	222, 0, 279, 223, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 224,
	225, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 0, 306, 307, 0, 226, 308,
	309, 311, 314, 310, 315, 316, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 319, 229, 320,
	321, 0, 322, 0, 323, 0, 0, 0, 324, 0,
	325, 230, 0, 231, 0, 0, 327, 328, 329, 330,
	331, 332, 232, 233, 234, 0, 0, 238, 334, 0,
	0, 0, 0, 333, 335, 342, 0, 0, 336, 235,
	338, 337, 339, 340, 341, 236, 0, 237, 0, 343,
	0, 0, 344, 345, 346, 0, 347, 348, 0, 0,
	349, 350, 351, 0, 353, 352, 0, 354, 239, 0,
	355, 356, 0, 0, 357, 358, 0, 0, 359, 0,
	360, 0, 0, 361, 362, 364, 365, 363, 0, 366,
	367, 369, 368, 0, 0, 0, 0, 240, 241, 370,
	371, 0, 372, 373, 0, 0, 374, 375, 0, 0,
	376, 242, 0, 377, 0, 243, 378, 379, 380, 0,
	382, 383, 384, 0, 385, 244, 386, 245, 387, 0,
	388, 389, 390, 0, 392, 393, 246, 394, 395, 0,
	396, 397, 398, 399, 400, 0, 402, 403, 401, 404,
	405, 406, 407, 0, 408, 0, 409, 410, 411, 412,
	247, 0, 0, 417, 418, 419, 420, 421, 422, 423,
	0, 429, 430, 424, 426, 427, 428, 425, 431, 432,
	0, 433, 414, 415, 434, 0, 435, 248, 436, 437,
	0, 447, 438, 439, 440, 416, 441, 445, 446, 442,
	443, 444, 249, 0, 448, 449, 0, 450, 451, 452,
	453, 454, 312, 455, 313, 456, 0, 250, 251, 252,
	457, 0, 0, 458, 459, 253, 254, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 255, 256, 257, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 1316, 1317, 0, 1349, 1350, 1351, 1359,
	1360, 1361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 1365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 1342, 1343, 1344, 0, 1318, 0, 0,
	0, 0, 1324, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 1366, 0, 0,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1362, 1363, 0, 0, 0, 0, 0, 0, 1333,
	1334, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 1354, 1324, 0, 0, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1364, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1345, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 1364, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 1357, 0,
	0, 0, 1319, 0, 1355, 1365, 0, 1330, 1331, 1337,
	1336, 1332, 1358, 0, 1329, 1327, 1328, 1320, 1321, 1322,
	1323, 1325, 1326, 0, 0, 0, 0, 0, 0, 1318,
	0, 2563, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 1316,
	1317, 0, 1349, 1350, 1351, 1359, 1360, 1361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 0, 0,
	0, 0, 0, 0, 1319, 0, 1355, 1365, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 1341, 1342, 1343, 1344,
	0, 1318, 0, 2289, 0, 0, 1324, 0, 0, 1338,
	0, 0, 0, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 0, 1341, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 1354, 1324, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1364, 0, 1356, 1366, 0, 0, 1346, 1347, 1348, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1362, 1363, 0,
	0, 0, 0, 0, 0, 1333, 1334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1345, 0, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 1364, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1353, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	0, 1316, 1317, 0, 1349, 1350, 1351, 1359, 1360, 1361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	0, 0, 1357, 0, 0, 0, 1319, 0, 1355, 1365,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 0, 0, 0,
	0, 0, 0, 1318, 0, 2288, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 1316, 1317, 0, 1349, 1350, 1351, 1359,
	1360, 1361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 0, 0, 0, 0, 0, 0, 1319, 0,
	1355, 1365, 0, 1330, 1331, 1337, 1336, 1332, 1358, 0,
	1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326, 0,
	1341, 1342, 1343, 1344, 0, 1318, 0, 2285, 0, 0,
	1324, 0, 0, 1338, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1356, 1366, 0, 0, 1346, 1347,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1362,
	1363, 0, 0, 0, 0, 0, 0, 1333, 1334, 0,
	0, 0, 1341, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 1354, 1324, 0, 0, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1364, 0, 1356, 1366, 0, 0,
	1346, 1347, 1348, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1362, 1363, 0, 0, 0, 0, 0, 0, 1333,
	1334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1345, 0, 0, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 0, 0, 0, 0, 1364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 1357, 0, 0, 0,
	1319, 0, 1355, 1365, 0, 1330, 1331, 1337, 1336, 1332,
	1358, 0, 1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325,
	1326, 0, 0, 0, 0, 0, 0, 1318, 0, 2284,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 1319, 0, 1355, 1365, 0, 1330, 1331, 1337,
	1336, 1332, 1358, 0, 1329, 1327, 1328, 1320, 1321, 1322,
	1323, 1325, 1326, 0, 1341, 1342, 1343, 1344, 0, 1318,
	0, 2283, 0, 0, 1324, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 1341, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 1354, 1324, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1345, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 0, 1355, 0, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 1875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1365, 0, 0, 0, 0, 1355, 0,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 1318, 0, 0,
	0, 3091, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 1318,
	0, 0, 0, 0, 1324, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 1341, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 1354, 1324, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1345, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 0, 1355, 0, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 3087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1365, 0, 0, 0, 0, 1355, 0,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 1318, 0, 0,
	0, 3028, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 1318,
	0, 0, 0, 0, 1324, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 1341, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 1354, 1324, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1345, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 0, 1355, 0, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 3027,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1365, 0, 0, 0, 0, 1355, 0,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 1318, 0, 0,
	0, 2978, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 1318,
	0, 0, 0, 0, 1324, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 1341, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 1354, 1324, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1345, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 0, 1355, 0, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 2939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1365, 0, 0, 0, 0, 1355, 0,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 1318, 0, 0,
	0, 2854, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 1318,
	0, 0, 0, 0, 1324, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 1341, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 1354, 1324, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1345, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 0, 1355, 0, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 2812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1365, 0, 0, 0, 0, 1355, 0,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 1318, 0, 0,
	0, 2811, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 1318,
	0, 0, 0, 0, 1324, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 1341, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 1354, 1324, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1345, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 0, 1355, 0, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 2810,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1365, 0, 0, 0, 0, 1355, 0,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 1318, 0, 0,
	0, 2776, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 1318,
	0, 0, 0, 0, 1324, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 1341, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 1354, 1324, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 0,
	0, 0, 0, 1333, 1334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1345, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 0, 1355, 0, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 2596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1365, 0, 0, 0, 0, 1355, 0,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 1318, 0, 2243,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 1316, 1317, 0,
	1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 1318,
	0, 0, 0, 0, 1324, 3171, 0, 1338, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 1341, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 1354, 1324, 0, 2330, 0,
	0, 2329, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1362, 1363, 0, 0, 3170,
	0, 0, 0, 1333, 1334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1345, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 1316,
	1317, 0, 1349, 1350, 1351, 1359, 1360, 1361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 0, 0,
	1357, 0, 2214, 0, 1319, 0, 1355, 1365, 0, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 0, 0, 0,
	0, 1318, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 1963, 0, 1335, 0, 0, 0,
	0, 1316, 1317, 0, 1349, 1350, 1351, 1359, 1360, 1361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	0, 0, 2215, 1962, 0, 0, 1319, 0, 1355, 1365,
	0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327,
	1328, 1320, 1321, 1322, 1323, 1325, 1326, 0, 1341, 1342,
	1343, 1344, 0, 1318, 0, 0, 0, 0, 1324, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 1366, 0, 0, 1346, 1347, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1362, 1363, 0,
	0, 0, 0, 0, 0, 1333, 1334, 0, 0, 0,
	1341, 1342, 1343, 1344, 0, 0, 0, 0, 0, 1354,
	1324, 0, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1364, 0, 1356, 1366, 0, 0, 1346, 1347,
	1348, 0, 0, 0, 0, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1362,
	1363, 0, 0, 0, 0, 0, 0, 1333, 1334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1345, 0, 0, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	0, 0, 0, 0, 1364, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 0, 1316, 1317, 0, 1349, 1350, 1351, 1359,
	1360, 1361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1352, 0, 0, 1357, 0, 0, 0, 1319, 0,
	1355, 1365, 0, 1330, 1331, 1337, 1336, 1332, 1358, 0,
	1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326, 0,
	0, 0, 0, 0, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 1316, 1317, 0, 1349, 1350,
	1351, 1359, 1360, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1319, 0, 1355, 1365, 0, 1330, 1331, 1337, 1336, 1332,
	1358, 0, 1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325,
	1326, 0, 1341, 1342, 1343, 1344, 0, 1318, 0, 0,
	0, 0, 1324, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 1366, 0, 0,
	1346, 1347, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1362, 1363, 0, 0, 0, 0, 0, 0, 1333,
	1334, 0, 0, 0, 1341, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 1354, 1324, 0, 0, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1364, 0, 1356, 1366,
	0, 0, 1346, 1347, 1348, 0, 0, 0, 0, 1353,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 0, 0, 0, 0, 0,
	0, 1333, 1334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1345, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 1364, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1353, 0, 0, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 1316, 1317,
	0, 1349, 1350, 1351, 1359, 1360, 1361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1352, 0, 1357, 0,
	0, 0, 0, 1319, 1355, 0, 1365, 1330, 1331, 1337,
	1336, 1332, 1358, 0, 1329, 1327, 1328, 1320, 1321, 1322,
	1323, 1325, 1326, 0, 0, 0, 0, 0, 0, 2586,
	1318, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	1316, 1317, 0, 1349, 1350, 1351, 1359, 1360, 1361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1352, 0,
	0, 0, 2331, 0, 0, 1319, 1355, 0, 1365, 1330,
	1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320,
	1321, 1322, 1323, 1325, 1326, 0, 0, 1341, 1342, 1343,
	1344, 0, 1318, 0, 0, 0, 0, 1324, 0, 0,
	1338, 0, 2336, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1356, 1366, 0, 0, 1346, 1347, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1362, 1363, 0, 0,
	0, 0, 0, 0, 1333, 1334, 0, 0, 0, 1341,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 1354, 1324,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1364, 0, 1356, 1366, 0, 0, 1346, 1347, 1348,
	0, 0, 0, 0, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1362, 1363,
	0, 0, 0, 0, 0, 0, 1333, 1334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1345, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 1364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 0, 0, 0,
	0, 1357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 1316, 1317, 0, 1349, 1350, 1351, 1359, 1360,
	1361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 0, 0, 1357, 0, 0, 0, 1319, 0, 1355,
	1365, 0, 1330, 1331, 1337, 1336, 1332, 1358, 0, 1329,
	1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1355, 0, 0, 1330, 1331, 1337, 1336, 1332, 1358,
	0, 1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326,
	0, 1341, 1342, 1343, 1344, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 1317, 0, 1349, 1350, 1351, 1359, 1360, 1361, 0,
	0, 0, 0, 0, 0, 1356, 1366, 0, 1352, 1346,
	1347, 1348, 2282, 0, 0, 1319, 0, 0, 1365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1362, 1363, 0, 0, 0, 0, 0, 0, 1333, 1334,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 1354, 0, 0, 0, 0, 1335, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2298, 0, 0, 0, 0, 0, 1341,
	1342, 1343, 1344, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1356, 1366, 0, 0, 1346, 1347, 1348,
	0, 0, 0, 0, 1316, 1317, 0, 1349, 1350, 1351,
	1359, 1360, 1361, 0, 0, 1357, 0, 0, 1362, 1363,
	0, 0, 1352, 0, 0, 0, 1333, 1334, 0, 1319,
	0, 0, 1365, 0, 0, 0, 0, 0, 0, 0,
	1354, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 1364, 1338, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1355, 0, 0, 1330, 1331, 1337, 1336,
	1332, 1358, 0, 1329, 1327, 1328, 1320, 1321, 1322, 1323,
	1325, 1326, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 1342, 1343, 1344, 0, 0, 0,
	1340, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 1317, 0, 1349, 1350, 1351, 1359, 1360,
	1361, 0, 0, 1357, 0, 0, 0, 1356, 1366, 0,
	1352, 1346, 1347, 1348, 0, 0, 0, 1319, 0, 0,
	1365, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1362, 1363, 0, 0, 0, 0, 0, 0,
	1333, 1334, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 1354, 0, 0, 0, 0, 1335,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1364, 0, 0,
	0, 1355, 0, 0, 1330, 1331, 1337, 1336, 1332, 1358,
	1353, 1329, 1327, 1328, 1320, 1321, 1322, 1323, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 1342, 1343, 1344, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1356, 1366, 0, 0, 1346,
	1347, 1348, 0, 0, 0, 0, 1316, 1317, 0, 1349,
	1350, 1351, 1359, 1360, 1361, 0, 0, 1357, 0, 0,
	1362, 1363, 0, 0, 0, 0, 0, 0, 1333, 1334,
	0, 1319, 0, 0, 1365, 0, 0, 0, 0, 0,
	0, 0, 1354, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 1364, 1338, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1355, 0, 0, 1330, 1331,
	1337, 1336, 1332, 1358, 0, 1329, 1327, 1328, 1320, 1321,
	1322, 1323, 1325, 1326, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 1342, 1343, 1344, 0,
	0, 0, 1340, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1357, 0, 0, 0, 1356,
	1366, 0, 0, 1346, 1347, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1362, 1363, 0, 0, 0, 0,
	0, 0, 1333, 1334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1364,
	0, 0, 0, 1355, 0, 0, 1330, 1331, 1337, 1336,
	1332, 1358, 0, 1329, 1327, 1328, 1320, 1321, 1322, 1323,
	1325, 1326, 0, 1650, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1662,
	1644, 1651, 1634, 1672, 1671, 0, 1340, 0, 1636, 1635,
	0, 660, 0, 691, 0, 0, 1682, 1683, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1357,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 0, 0, 0, 0, 1673, 0, 1669, 1668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1667, 0,
	666, 0, 0, 0, 0, 668, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 674, 675, 0, 0, 0,
	685, 0, 0, 0, 0, 0, 1666, 1664, 1665, 0,
	0, 0, 0, 692, 669, 0, 0, 1355, 0, 0,
	1330, 1331, 1337, 1336, 1332, 1358, 0, 1329, 1327, 1328,
	1320, 1321, 1322, 1323, 1325, 1326, 1646, 0, 0, 690,
	0, 0, 0, 0, 0, 0, 0, 1655, 1649, 1657,
	1659, 1660, 1661, 1656, 0, 1654, 0, 0, 0, 0,
	0, 0, 0, 0, 1678, 1679, 0, 0, 670, 0,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 672, 0, 0, 1638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1670, 0, 0, 0,
	1647, 1648, 678, 0, 0, 0, 0, 0, 0, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1663, 693, 0, 0, 1631, 1629,
	1630, 1633, 1632, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1639, 1640, 1642, 1643, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 0, 1658, 1641, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1681, 0, 0, 0,
	0, 0, 0, 0, 0, 687, 0, 0, 0, 0,
	0, 0, 0, 1637, 682, 1674, 1675, 1676, 1677, 0,
	0, 0, 0, 0, 0, 0, 662, 680, 694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1645, 0, 663, 0, 0, 1652, 1680, 0, 0, 0,
	0, 0, 683, 0, 0, 681, 0, 0, 0, 697,
	698, 0, 0, 0, 0, 695, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 686, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	688,
}
var sqlPact = [...]int{

	4321, -1000, 13, -1000, -1000, -1000, 271, -1000, -1000, -1000,
	-1000, 270, 267, 264, -1000, 263, 262, 253, 252, 250,
	246, 245, 243, 242, 241, 236, 230, -1000, -1000, 228,
	-1000, -1000, -1000, -1000, 226, 203, 202, -1000, 200, 1407,
	34271, 198, 197, 196, 1582, 52519, 1608, 195, 194, -1000,
	193, 3594, 40085, 1169, 1679, -1000, 192, 191, 1445, 52135,
	5274, 2048, 36971, 39695, 2022, 51745, 33881, 1982, 36581, 51355,
	-1000, -1000, 1181, -1000, -1000, 50965, 189, 188, 183, 181,
	179, -1000, 177, 50575, 173, 165, 164, 162, 160, 158,
	-1000, 154, 149, 145, 140, 133, 130, 127, 125, 122,
	121, 119, 110, 106, 102, 96, 93, -1000, 62449, 91,
	79, 76, -1000, 1394, 71, 70, 69, 68, 66, 64,
	-1000, -1000, 63, 61, 60, 59, -1000, 58, 57, 190,
	56, 55, 53, 52, 51, -1000, 1188, 420, 2585, 15599,
	1289, 1277, 1272, 1267, 1299, 819, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 55207, 52519, 50, -34,
	45, -1000, 2389, 881, 26000, 4321, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 39305, 11868,
	38915, 38525, 32321, 50185, 11468, 49795, 988, -1000, -1000, -1000,
	-1000, -1000, 11, 35423, 52519, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 319, -1000, -1000, -1000, -1000, -1000, -1000, 22361, 347,
	21934, 298, 21507, 257, 484, -1000, -1000, -1000, 313, -1000,
	-1000, -1000, -1000, 1324, -1000, -1000, -1000, -1000, 49405, 49015,
	2104, 48625, 31921, 31521, 48235, 52519, 52519, 1817, 47845, -1000,
	-1000, 47455, -1000, -1000, 2141, 2025, 1998, 38135, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 47071, 46681, 46291,
	45901, 45511, 31121, 30721, 637, -1000, -1000, -1000, -1000, 27557,
	636, -1000, -1000, -1000, -1000, -1000, 41, -1000, 40, 39,
	-1000, 37, 36, 33, 31, 29, 28, 26, 25, -1000,
	24, 23, -1000, 21, 20, -1000, 19, 16, 2270, 1563,
	1592, 45121, 52519, -1000, 1594, 6, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 28360, 52519, -1000, -1000, 22774, 166, -1000,
	634, -1000, 2065, -1000, 22774, 166, -1000, 1587, 172, 1548,
	-1000, -1000, -1000, 1379, -1000, -1000, 52519, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2648, 1441, 633, 44731, -1000, 1658,
	-1000, 758, 16012, -1000, 958, -1000, 16012, 312, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2037, 1252, 2604, 30321, 1489, 1054, 2131, 2645,
	1806, 2126, 2114, 2095, 2089, 2084, 2643, 1239, 2642, 1171,
	2639, 2082, 2079, 2614, 1433, 37745, 2635, 2634, 2404, 2075,
	2051, -1000, -1000, -1000, -1000, 1122, -1000, -1000, -1000, -1000,
	-1000, -1000, 41625, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1188, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1759, 2447, 2447, 2447,
	2490, 474, 466, -1000, 190, -1000, 2038, -1000, 1427, -1000,
	-1000, -1000, 61843, -1000, -1000, 22774, 22774, 22774, 22774, 22774,
	1479, -1000, -1000, -1000, 668, -1000, 629, 579, -1000, -1000,
	-1000, -1000, -1000, -1000, 628, 2618, -1000, 857, -1000, -1000,
	-1000, -1000, 2576, -1000, 13919, -1000, -1000, -1000, 425, 22774,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 311, 780, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 568, 1290, 567, 567, 567, -1000, -1000, 833,
	-1000, -1000, -1000, 723, -1000, 719, -1000, -1000, -1000, 2102,
	627, 626, -1000, 625, 624, 623, -1000, -1000, -1000, 622,
	621, 618, 616, 614, 613, 609, 608, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 832, -1000, -1000, -1000, 606,
	604, 603, 599, 595, 591, 589, 587, 586, 1559, -1000,
	-1000, 1559, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 985,
	54439, -1000, -1000, -1000, 10, 52519, -1000, 484, 10, -1000,
	-1000, 585, -1000, 16838, 16838, 16838, -1000, -1000, 1583, 22774,
	-1000, 2257, -1000, 185, -234, 708, 27167, -1000, 25220, 708,
	678, 29917, -1000, 2049, -1000, -1000, 582, 295, -1000, -1000,
	-1000, -1000, -1000, -1000, 1824, 2255, 1136, -1000, 1619, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1241, 2249, -1000,
	1654, 2245, 1240, -1000, -1000, 806, 2233, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1485, -1000, -1000, 2382,
	-1000, -1000, 1706, 2232, -170, 32719, 35423, 8, -1000, -1000,
	-91, -1000, 11068, 61843, -1000, -1000, -1000, 61843, 781, -1000,
	-1000, 2231, -1000, 61843, 721, -1000, -1000, 2225, -1000, 2044,
	52519, 12266, 52519, 52519, -1000, 581, 1703, 1581, -1000, -1000,
	44341, 1654, 1701, -1000, -1000, 785, 1699, -1000, -1000, 1694,
	-1000, 484, -1000, -1000, 739, -1000, 2631, 43957, 1845, 785,
	1693, -1000, -1000, -1000, 41625, -1000, 52519, -1000, 52519, -1000,
	1121, -1000, 54823, 142, 2221, -1000, -1000, 142, 2220, -1000,
	142, 2219, -1000, 139, 2218, -1000, -1000, 1586, 2217, -1000,
	-98, 2214, -1000, -1000, -98, 2210, -1000, -1000, 22774, -9,
	-1000, -1000, -1000, 881, 33491, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43567, 32719, 35039, 52519, 37355, 32719, 784, 652,
	61843, -1000, 2543, 62399, 32719, 61843, -1000, 35039, 52519, 2101,
	-1000, 43177, 42787, -1000, -1000, 52519, -1000, 22774, -1000, 2542,
	1627, -62, -1000, -1000, -1000, -1000, -1000, 1735, 1731, 886,
	1362, -1000, 16012, 2320, -1000, -1000, -1000, 293, 12266, -1000,
	-1000, 1052, 1765, -1000, -1000, -1000, -1000, 32719, 32719, -1000,
	42397, -1000, -1000, -1000, 1429, 2420, 52519, -1000, -1000, 2099,
	-1000, 34655, 52519, -1000, 52519, -1000, 52519, -1000, 52519, -1000,
	52519, -1000, -1000, -1000, -1000, -1000, 2216, 1311, 1281, -1000,
	52519, -1000, 52519, -1000, -1000, -1000, 1733, -1000, -1000, -1000,
	-1000, 52519, -1000, -1000, -1000, -1000, -1000, -1000, 2097, -1000,
	1217, -1000, 1048, -1000, -1000, 144, -1000, -1000, 1759, -1000,
	1566, 1826, 21080, 1803, 22774, 190, -1000, -1000, 190, 190,
	15172, -1000, -1000, -1000, 52519, -1000, 62399, 62399, 12266, 1018,
	22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774,
	22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774,
	22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774,
	22774, 22774, 22774, 22774, 22774, 1503, 22774, 984, 22774, 22774,
	22774, 22774, 1763, -1000, -1000, 1399, 509, 1452, -1000, 2584,
	2584, 2584, 62145, 62145, 504, 668, -1000, 22774, -1000, 166,
	22774, 12666, -1000, 2606, 1099, -1000, -1000, 466, 7223, 1743,
	-1000, 457, 13093, -1000, -1000, -1000, 13919, 579, 20653, 821,
	61843, 10670, 2032, 1928, -1000, 2605, -1000, -1000, 2576, -1000,
	-1000, -1000, 1013, 1012, 997, 995, 577, 732, 729, 728,
	726, 725, 22774, 22774, 22774, 22774, 22774, 22774, 22774, 22774,
	-1000, 20240, 19813, 19386, 18959, 18532, 24013, 18105, 22774, 14332,
	-1000, -62, -1000, 54439, -1000, 52519, 10, 2541, 22774, 170,
	-1000, 60520, -1000, 170, 170, 575, -10, 61843, 1779, 1772,
	26389, 1736, 1518, 1518, 1518, -1000, 574, 662, 708, 8265,
	40469, 1522, 708, 708, 167, 322, 456, 24831, 2257, 40469,
	-1000, -1000, 52519, 573, 12666, 12266, -8, 1315, -1000, 36191,
	2440, 2414, 2352, 1120, -1000, 1081, 2485, 41625, 2508, 631,
	-1000, 2031, -1000, -1000, 748, 1039, 980, 41625, 1654, -1000,
	62399, -1000, 1844, 2479, 1102, 1113, 1102, 1102, 1100, -1000,
	41625, 977, 1418, 32719, -1000, 976, -1000, -27, 2505, 378,
	-1000, 2019, 975, -1000, -1000, 52519, 12266, 705, 8, 35423,
	52519, 291, -1000, 22774, 166, 22774, 166, 1071, -15, 290,
	1788, 1787, 167, -1000, 35807, 2531, 2208, 52519, 1793, -3,
	52519, -1000, -1000, 1654, 2206, -1000, 1402, -1000, 2193, 2192,
	2529, 612, 2629, -1000, 1579, 1692, -1000, -1000, -1000, 54055,
	1027, 2191, 815, 317, 2525, 317, 29139, -1000, 52519, -1000,
	52519, -1000, -1000, 52519, -1000, 52519, -1000, 52519, -1000, 52519,
	52519, -1000, 52519, 32719, 32719, 32719, -21, 659, 33491, -22,
	784, 972, -83, -1000, 444, -1000, 42013, 52519, 864, 35807,
	455, -31, -1000, 1050, -1000, -1000, -1000, -1000, 374, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 831, 572, 571, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 568, 1290, 567, 567,
	567, -1000, -1000, -1000, 723, -1000, 719, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -183, 2012, -91, 37355, 705, -1000,
	705, -1000, 757, -33, 903, -62, -1000, 1559, -1000, 1236,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2615, -1000, 2590, -1000, -1000, 2597, 7,
	-1000, -1000, 12266, -1000, 52519, 2094, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52519, -1000, 52519, -1000, -1000,
	-1000, -1000, -1000, -1000, 1152, -1000, 2088, -1000, 2083, -1000,
	287, -1000, -1000, -1000, 1539, 52519, 52519, 52519, -1000, 41625,
	-1000, -1000, -1000, -1000, 61843, -1000, 481, -1000, -1000, 61843,
	1193, 1825, -1000, 1825, 2, -1000, 60448, 1760, 52519, -1000,
	-1000, -1000, -1000, -1000, -1000, 747, 891, 891, 978, 978,
	978, 978, 2537, 231, 944, 3705, 394, 394, 394, 394,
	394, 394, 394, 394, 1502, 1276, 1276, 1502, 1502, 1502,
	1502, 1502, 1276, 1276, 1276, 394, 394, 394, 62145, 61981,
	5077, 22774, 22774, 968, 1370, 509, 4245, 22774, 3674, 3674,
	3674, 3674, -1000, 2171, -1000, -1000, -1000, -1000, 2000, 564,
	24013, 24013, -1000, -1000, -1000, -1000, 13506, 22774, -1000, -1000,
	-1000, -1000, 17678, -1000, 59726, -244, 443, -174, -20, -1000,
	22774, 22774, 22774, 442, -1000, 441, -1000, 957, -1000, 956,
	954, 946, -1000, 563, 284, 22774, 52519, -1000, 57074, 658,
	-142, -1000, 1108, -1000, 22774, 283, -1000, 1514, 562, 561,
	440, -42, 734, 733, 731, 718, 22774, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 61679, 56782, 56710,
	56418, 6908, 56346, 56054, -43, 438, -1000, 1996, -174, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 434, -1000, -44, -1000,
	-45, -1000, 428, -1000, 61541, -174, 427, 3221, -1000, 24013,
	24013, 24013, -1000, 426, -1000, 60156, -1000, 61249, 17265, 17265,
	17265, 418, 61177, 22774, -174, -1000, -1000, 560, -50, 815,
	16838, 25610, 12266, -1000, 815, 815, 22774, -1000, 22774, 26389,
	26389, 3062, 1764, 26389, -1000, -1000, -1000, -1000, 40469, 698,
	708, 40469, -1000, 2576, 1804, -1000, -1000, -1000, 52519, 484,
	-1000, 40469, 40469, 12266, 708, -1000, 417, 7845, -20, 279,
	1453, 52519, 52519, 52519, -1000, -1000, 1691, 53671, 1681, 62399,
	52519, -1000, -1000, 559, 557, 1758, 1757, 52519, 52519, 53287,
	52903, 52519, 1515, 22774, 1532, 1524, 166, -1000, 166, 554,
	1023, 52519, 52519, 1227, -1000, -1000, -1000, -1000, -1000, 52519,
	-1000, -1000, 2596, -1000, 1102, -1000, -1000, -1000, 1102, 1654,
	1221, 52519, 32719, 802, 52519, 1440, 166, -1000, 166, 553,
	12266, 1285, -1000, 1897, -1000, 1616, -1000, -1000, 10272, 61843,
	-1000, 61843, -1000, -1000, -1000, 12266, 1854, 1854, 416, -2,
	-1000, -1000, -1000, -1000, -1000, -1000, 1807, 52519, 648, 52519,
	166, 52519, 118, 784, 32719, 52519, -3, 52519, 32719, 32719,
	32719, 166, 2628, 551, 2627, -1000, 52519, 2187, 1577, 1678,
	2156, 690, 52519, 1536, 22774, 1331, -1000, 28750, 843, 52519,
	1210, 73, -1000, -1000, -1000, 35, 52519, -1000, -1000, 142,
	142, 142, -1000, 139, 1586, -1000, -98, -98, -1000, -1000,
	-1000, 659, 1995, 52519, 2553, 784, -6, 550, -1000, 700,
	699, 27961, 32719, -51, -1000, 868, 955, 953, -1000, 62399,
	-1000, 667, 872, -1000, 2594, 548, -1000, 2576, 2576, -1000,
	784, 52519, 72, -1000, 786, 16012, -1000, 1559, -1000, -1000,
	1198, -1000, 1275, -1000, -1000, -1000, -1000, 16012, -1000, -1000,
	1032, -91, -91, -1000, 1146, 1125, 52519, 12266, 52519, 52519,
	12266, 52519, -1000, -1000, -1000, -1000, 1193, -1000, 22774, -1000,
	-1000, -1000, 15172, -1000, -1000, -1000, 52519, -221, 22774, 22774,
	3659, 755, 22774, 24013, 24013, -1000, 22774, 724, -1000, -1000,
	-1000, -1000, -1000, 1991, 547, 22774, 62399, 5044, 4118, -1000,
	411, 55982, 1502, -1000, 22774, -1000, 410, 16425, -1000, 60812,
	-38, -38, -1000, 2613, 1688, 1436, 1282, 1166, 2593, 9874,
	-174, -52, -1000, -1000, 649, 2145, -1000, 22774, 60884, 9476,
	-1000, 29528, 818, 1536, -1000, -1000, 2576, -1000, -1000, -1000,
	-1000, 59654, 62399, 62399, 22774, 22774, -1000, 22774, 22774, 22774,
	-1000, -1000, 22774, -1000, -1000, -1000, -1000, 1985, 22774, -1000,
	62399, 62399, 24013, 24013, 24013, 24013, 24013, 24013, 24013, 24013,
	24013, 24013, 24013, 24013, 24013, 24013, 24013, 24013, 24013, 24013,
	24013, 1785, 24013, 2582, 2582, 2582, -1000, 2081, 1985, 22774,
	22774, 62399, 409, 397, 396, -1000, 22774, -174, 455, -1000,
	1919, -1000, -125, -1000, 2257, -1000, -1000, 1919, 1919, -53,
	61843, -1000, 3062, -1000, 546, 22774, 26389, -1000, 657, -1000,
	-60, -1000, 40469, -1000, 655, -241, -1000, 697, -1000, 484,
	-1000, -1000, -1000, 274, 40469, -1000, -61, -1000, 2523, 395,
	12266, -1000, -1000, 936, 934, -1000, 2163, -1000, 1672, -1000,
	852, -1000, 1264, 22774, 26778, 545, 543, 1358, -1000, 2148,
	1586, 2144, 1586, -1000, -1000, 767, -1000, 61843, 542, 541,
	-1000, -8, 1314, -1000, -1000, 22774, 22774, 41241, -1000, 2382,
	-1000, 933, -1000, -1000, -1000, 1654, 930, -1000, -1000, 1338,
	-1000, -1000, -1000, -1000, 22774, -1000, -27, 929, 784, 1974,
	1051, -1000, -1000, -1000, -1000, -1000, -1000, 1840, 35807, 52519,
	528, 52519, 527, -1000, -1000, 522, 52519, -1000, -1000, -1000,
	1654, -1000, 785, -1000, -1000, -1000, 2625, -1000, 863, 12266,
	52519, 2138, 1745, 690, 33107, -1000, 785, 1826, -1000, 61843,
	-1000, 1210, 14745, 2368, -67, -1000, 273, -1000, -1000, -1000,
	815, 29139, 26389, 22774, 2624, -68, -1000, -1000, -1000, -1000,
	-1000, -1000, 166, -91, 1546, -1000, 40857, 40857, 32719, 32719,
	32719, 784, 52519, 52519, -1000, 2583, -1000, 651, 391, 2576,
	376, 369, -1000, -91, 52519, -1000, 1526, -1000, -62, -1000,
	-1000, -1000, -1000, 52519, -1000, -1000, -1000, -1000, -1000, 1449,
	1591, -1000, 1550, 59296, -1000, 2358, 12266, 2548, 3674, 22774,
	22774, 220, 3755, 3647, 3674, 22774, 22774, 62399, 5584, -89,
	22774, 22774, -1000, 22774, 646, 61843, 2612, 22774, 368, 367,
	365, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 364,
	-1000, -1000, -1000, -1000, -1000, 61843, 22774, 232, -1000, -1000,
	-1000, 55591, -1000, 22774, 359, 358, -1000, 355, 354, 7361,
	6469, 59224, 58866, 58794, 61843, 2081, 61843, -1000, -1000, 813,
	813, 1076, 1076, 1076, 1076, 2582, 413, 544, 458, 1448,
	1448, 1448, 1426, 774, 774, 1448, 1448, 1448, 1963, 1791,
	521, 5516, -1000, -1000, 61843, 61843, 351, -1000, -1000, -1000,
	-174, 345, 1906, 2474, -1000, 26389, 1906, 1906, -1000, -1000,
	52519, 61843, -1000, -234, -1000, 2576, -1000, -1000, 1804, -1000,
	8676, -1000, 12266, -1000, -1000, 7845, -1000, 520, -1000, 74,
	52519, 52519, 52519, 2137, -1000, 3770, -1000, 58436, -92, -1000,
	2454, 2454, 22774, 167, 26778, 52519, -1000, 1345, 1805, 896,
	52519, -1000, 52519, -1000, -1000, 52519, 52519, 52519, 52519, 52519,
	-95, 61843, -74, -1000, 693, -1000, 52519, 52519, 32719, -97,
	12266, -1000, 32719, 994, 1440, 1886, -1000, 517, 26778, 515,
	52519, 35807, 2521, -1000, -1000, -1000, -1000, 513, 2046, 1576,
	512, 12266, 1747, 690, 33107, -1000, 1027, 1210, -1000, -1000,
	-82, -1000, 525, 166, 52519, 2623, 1536, -1000, -88, 61843,
	-1000, 692, -1000, -1000, -1000, -100, -1000, -1000, 333, -1000,
	2294, 2292, 642, -1000, -1000, 332, -1000, -1000, -91, 1707,
	-1000, -1000, -1000, 12266, 1031, -1000, -1000, -1000, 2358, 3674,
	3674, 22774, 22774, 22774, 3674, 5584, -102, -1000, 3674, 3674,
	-174, -1000, -1000, 60812, -1000, -1000, -1000, -1000, 61843, 9078,
	1457, -1000, 58364, -1000, -1000, -1000, -1000, 22774, 22774, -1000,
	-1000, -1000, -1000, -1000, 24013, 1960, 511, 62399, -1000, -1000,
	810, 22774, 22774, 2257, 810, 810, -103, 708, -1000, -1000,
	-1000, 2576, 74, -1000, 2622, 12266, -1000, -1000, -1000, 52519,
	-1000, 52519, -1000, 12266, 52519, 1926, 1650, -1000, -1000, 1755,
	510, 24013, 52519, 754, -1000, 1369, 26778, 2358, 12266, 2358,
	58006, -111, -116, 1644, -1000, -1000, 1637, 22774, -1000, 62399,
	1586, 1586, -118, -119, -1000, 920, 918, 917, 52519, 16012,
	-1000, -1000, -1000, 916, -1000, -98, 22774, -1000, -1000, 1466,
	26778, -127, 26778, -128, 330, 166, 26778, -1000, -1000, 52519,
	26778, 1573, -1000, 690, 33107, -1000, 2156, -1000, 2226, 52519,
	2345, -1000, -1000, -1000, 1826, 509, -1000, 784, 507, 506,
	-1000, -1000, -130, -1000, 736, 437, -1000, -1000, 52519, -1000,
	3674, 3674, 3674, -1000, 329, -1000, -1000, 1536, 2471, -1000,
	57934, 57576, 1006, 24013, 62399, -136, -1000, 52519, 61843, -174,
	-1000, -1000, -1000, 40469, 640, -1000, -1000, 2151, -1000, -1000,
	-1000, 52519, 1661, -1000, -1000, 22774, 5516, 505, 22774, -1000,
	1840, 502, -1000, -1000, -1000, -1000, -1000, -1000, 2454, -1000,
	1253, -1000, -1000, 61843, 2433, -1000, -1000, 497, 496, 52519,
	52519, 494, 689, -1000, 493, 61843, 52519, -137, 1369, -139,
	-1000, 1840, -1000, -145, 863, -147, 52519, 33107, -1000, 1745,
	1029, -152, 52519, 1210, -1000, -1000, 32719, 32719, 1707, -1000,
	52519, -1000, 52519, -1000, -1000, 1492, 22774, -1000, -1000, 1006,
	-154, -1000, -133, -1000, 2517, -1000, -1000, -1000, -1000, 2135,
	57504, 1719, 52519, 57146, 1440, 52519, 2358, 52519, 856, 12266,
	1449, 1449, -1000, -1000, 22774, 16012, 22774, 489, -1000, 1840,
	1369, 1440, 1369, 488, 1369, 487, -1000, 1747, 1107, -1000,
	815, -1000, -1000, -155, -157, -1000, -160, -167, 328, 23600,
	23600, 23600, -174, -1000, 52519, 485, 2098, -1000, 1552, 1374,
	324, 879, -1000, -168, -1000, 484, -1000, 22774, -1000, -175,
	-1000, 842, -176, -1000, 840, -178, -1000, -184, 52519, 1440,
	1840, -1000, 1840, 26778, 1840, 26778, -1000, 29139, -1000, 784,
	784, -1000, -1000, -1000, -1000, -1000, 24426, 1549, 1176, 60084,
	-1000, -1000, -1000, -1000, 52519, -1000, 1557, 1556, 1160, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1719, 61843, -1000, 1449,
	1850, -1000, 1449, 1957, -1000, -1000, -189, -1000, 1440, 1440,
	-190, 1440, -191, -185, -1000, -1000, 2549, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2277, -1000, 883, 1663, 1663, 1552,
	-1000, 483, -1000, 480, 1568, -1000, -1000, 1369, -1000, 1369,
	-1000, 23187, -1000, 2559, -1000, -1000, 1771, -1000, -1000, 22774,
	22774, -1000, -1000, -1000, 1840, 1840, -1000, -1000, -1000, -1000,
	-199, -202, 1440, 1440, 1440, 915, -1000, -1000, -1000, 476,
	22774, -205, 1440, -1000,
}
var sqlPgo = [...]int{

	0, 3165, 3158, 2046, 3156, 2501, 3155, 3152, 3146, 3145,
	3140, 2488, 3132, 3129, 3125, 3120, 3116, 3115, 3114, 3111,
	3110, 3105, 3101, 3100, 3097, 3096, 3095, 3093, 3092, 3091,
	3087, 3086, 3083, 3082, 2486, 3079, 2482, 3078, 3076, 3072,
	3071, 3066, 3063, 3062, 3061, 21, 3057, 3056, 3051, 3049,
	3044, 2473, 3041, 3037, 2466, 3033, 3031, 2463, 3030, 3027,
	2459, 3025, 2446, 3024, 3022, 2431, 3020, 3019, 2412, 3015,
	2410, 3014, 3012, 2353, 3011, 105, 111, 3006, 2328, 3005,
	3004, 2321, 2318, 2302, 3002, 2282, 3001, 3000, 2278, 2248,
	2999, 2191, 2996, 2995, 2994, 2993, 2208, 2169, 2992, 2989,
	2987, 171, 2986, 2154, 2985, 2983, 2982, 2980, 2978, 2976,
	2975, 2973, 2969, 2968, 2967, 2965, 2963, 2961, 2960, 2959,
	2958, 2946, 2942, 2940, 2939, 2937, 2935, 2933, 185, 112,
	2932, 2931, 2074, 2012, 2928, 2923, 72, 55, 16, 2919,
	58, 114, 175, 5369, 155, 2916, 2914, 2911, 2909, 2906,
	23, 120, 123, 117, 116, 182, 2901, 2898, 45, 37,
	25, 20, 79, 2897, 2892, 2891, 2221, 89, 2890, 2889,
	165, 163, 2888, 428, 2887, 30, 125, 85, 83, 148,
	48, 2885, 102, 19, 2882, 153, 184, 2878, 108, 44,
	27, 4825, 65, 187, 71, 62, 149, 140, 145, 142,
	121, 141, 2876, 169, 113, 136, 2875, 2874, 2869, 50,
	133, 8, 2, 157, 6, 2868, 13, 2867, 7, 2866,
	2865, 2864, 2862, 35, 110, 33, 34, 2861, 56, 229,
	129, 2858, 160, 2857, 59, 2855, 173, 139, 135, 18,
	172, 2854, 2852, 2851, 2846, 2837, 78, 15, 75, 2834,
	2833, 93, 159, 2832, 38, 115, 82, 86, 186, 147,
	92, 151, 152, 2831, 2830, 2829, 174, 2828, 132, 103,
	2827, 2825, 24, 40, 156, 36, 2824, 2822, 104, 2820,
	144, 2815, 2814, 2813, 183, 118, 127, 4, 77, 91,
	9, 154, 98, 61, 57, 2812, 3657, 1300, 1265, 2809,
	109, 54, 29, 81, 106, 166, 32, 2808, 2806, 1706,
	2805, 2801, 2799, 2798, 124, 2795, 2794, 2791, 94, 74,
	99, 2789, 107, 39, 164, 178, 51, 150, 143, 177,
	122, 2788, 130, 97, 2784, 134, 176, 68, 2783, 1214,
	2779, 131, 2777, 2769, 2768, 2767, 611, 2764, 2757, 1098,
	2756, 96, 2753, 2752, 128, 137, 88, 28, 2751, 43,
	454, 2748, 138, 31, 2747, 194, 42, 0, 4249, 3318,
	2742, 146, 87, 2734, 2726, 2723, 2720, 26, 10, 3,
	5, 14, 11, 370, 73, 2718, 2710, 233, 80, 100,
	2706, 180, 162, 2701, 2695, 2694, 47, 2692, 17, 2690,
	12, 2689, 2688, 22, 1, 2687, 2684, 158, 2682, 2680,
	2678, 2676, 2499, 2675, 179, 2674, 95, 2670, 119, 90,
	2669, 2668, 2667, 2666, 2233, 2665, 2656, 52, 49, 2654,
	2653, 126,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 8, 8, 9, 9, 9, 33, 33,
	11, 11, 10, 10, 10, 12, 12, 7, 7, 7,
	7, 7, 7, 7, 7, 14, 14, 24, 24, 15,
	26, 414, 414, 18, 28, 19, 29, 13, 416, 416,
	416, 416, 22, 20, 20, 30, 139, 139, 17, 17,
	25, 25, 152, 152, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 413, 413, 154, 154, 153, 149, 149,
	417, 417, 155, 155, 155, 157, 157, 34, 34, 89,
	89, 89, 140, 82, 82, 82, 82, 82, 82, 82,
	77, 77, 365, 365, 366, 366, 135, 135, 136, 136,
	136, 136, 137, 137, 138, 138, 138, 48, 36, 36,
	36, 36, 36, 36, 36, 37, 37, 37, 37, 38,
	38, 38, 38, 38, 38, 39, 39, 39, 39, 39,
	39, 46, 46, 129, 129, 49, 49, 49, 49, 49,
	49, 49, 49, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 409, 409, 237, 237, 334, 334, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 71, 71, 71, 72, 72, 72, 69, 69, 69,
	67, 67, 67, 66, 66, 66, 70, 70, 70, 68,
	68, 68, 238, 238, 73, 73, 73, 73, 73, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 76, 76, 76, 76, 76,
	76, 76, 76, 336, 336, 74, 74, 307, 307, 78,
	78, 267, 267, 79, 79, 79, 79, 79, 80, 80,
	80, 80, 90, 90, 90, 90, 412, 412, 230, 230,
	170, 170, 170, 170, 85, 85, 85, 85, 86, 86,
	86, 87, 87, 134, 134, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 40, 40, 40, 41, 41,
	42, 42, 43, 43, 44, 44, 45, 45, 45, 45,
	45, 97, 97, 418, 418, 99, 96, 96, 96, 98,
	98, 98, 98, 100, 101, 101, 101, 101, 101, 101,
	102, 102, 359, 359, 245, 245, 357, 357, 358, 358,
	207, 207, 207, 207, 207, 208, 208, 208, 364, 364,
	364, 364, 364, 364, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 119, 119, 119, 128, 128, 128, 128, 128, 128,
	128, 121, 121, 121, 112, 112, 104, 104, 104, 104,
	108, 108, 108, 108, 108, 105, 105, 109, 109, 111,
	111, 113, 113, 113, 113, 113, 113, 106, 106, 106,
	106, 115, 115, 115, 115, 114, 114, 124, 124, 124,
	124, 124, 124, 321, 321, 120, 120, 120, 120, 123,
	123, 123, 123, 118, 118, 118, 122, 122, 125, 125,
	125, 125, 107, 107, 107, 421, 421, 421, 126, 126,
	117, 117, 127, 127, 127, 127, 127, 127, 127, 116,
	116, 116, 415, 415, 110, 410, 410, 407, 407, 407,
	407, 407, 407, 407, 408, 408, 411, 411, 83, 83,
	83, 55, 55, 56, 56, 209, 209, 210, 210, 289,
	289, 289, 289, 211, 211, 156, 156, 156, 214, 215,
	215, 212, 212, 213, 213, 213, 217, 217, 216, 219,
	219, 218, 288, 375, 375, 376, 376, 376, 376, 376,
	376, 376, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 373, 373, 373, 374, 371, 371, 372, 372,
	372, 372, 422, 422, 287, 287, 223, 223, 378, 378,
	378, 378, 379, 379, 379, 379, 379, 382, 381, 380,
	380, 380, 380, 380, 317, 317, 317, 59, 59, 59,
	256, 256, 255, 255, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 131, 131,
	57, 57, 57, 162, 162, 54, 54, 54, 58, 58,
	61, 61, 61, 61, 61, 61, 53, 53, 53, 53,
	53, 272, 272, 272, 271, 271, 228, 228, 323, 323,
	323, 174, 174, 175, 175, 150, 150, 150, 21, 23,
	23, 16, 16, 16, 16, 16, 16, 31, 31, 32,
	32, 27, 27, 419, 419, 420, 420, 84, 84, 88,
	88, 88, 94, 94, 130, 130, 130, 130, 130, 130,
	130, 35, 35, 35, 35, 47, 47, 47, 47, 92,
	425, 425, 425, 93, 93, 424, 424, 169, 169, 169,
	169, 171, 171, 284, 284, 285, 285, 426, 426, 286,
	286, 286, 164, 163, 165, 165, 52, 52, 52, 158,
	158, 159, 159, 160, 160, 161, 161, 427, 427, 81,
	81, 81, 133, 133, 203, 203, 280, 280, 280, 224,
	224, 180, 180, 283, 283, 281, 281, 281, 254, 254,
	254, 132, 132, 233, 233, 247, 247, 248, 248, 331,
	331, 249, 91, 91, 143, 143, 141, 141, 141, 141,
	141, 141, 142, 142, 142, 144, 144, 144, 144, 144,
	144, 144, 147, 147, 147, 147, 148, 148, 148, 146,
	146, 389, 389, 389, 391, 391, 392, 388, 388, 390,
	390, 423, 423, 258, 258, 258, 221, 222, 220, 220,
	428, 428, 226, 226, 225, 227, 227, 322, 322, 322,
	252, 252, 252, 252, 275, 275, 273, 273, 274, 274,
	276, 276, 277, 277, 277, 278, 278, 279, 279, 251,
	251, 303, 303, 145, 145, 145, 232, 232, 232, 234,
	234, 294, 294, 294, 295, 295, 293, 293, 293, 293,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 325,
	325, 235, 235, 326, 282, 282, 405, 405, 405, 406,
	406, 320, 320, 327, 327, 327, 327, 327, 327, 318,
	318, 319, 319, 332, 333, 333, 261, 261, 261, 261,
	259, 259, 260, 260, 328, 328, 328, 328, 253, 253,
	329, 329, 329, 290, 290, 337, 337, 337, 337, 351,
	231, 231, 231, 429, 429, 338, 338, 338, 338, 338,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 341, 341, 341, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 350, 350, 350, 350, 350, 342, 342,
	347, 347, 348, 348, 348, 343, 344, 349, 349, 349,
	349, 430, 430, 353, 353, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 346, 268, 268, 268, 268, 268,
	268, 268, 268, 268, 268, 268, 268, 268, 268, 269,
	269, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 298, 298, 298,
	298, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 383, 383, 383, 383, 383,
	383, 383, 383, 386, 386, 387, 387, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 393, 393, 394, 394,
	396, 396, 397, 397, 398, 399, 399, 399, 400, 401,
	401, 395, 395, 402, 402, 402, 402, 403, 403, 404,
	404, 404, 404, 404, 309, 309, 310, 310, 316, 316,
	316, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 172, 172, 172,
	172, 172, 243, 243, 241, 241, 241, 244, 244, 242,
	242, 240, 240, 239, 239, 306, 306, 304, 304, 308,
	308, 262, 262, 352, 352, 352, 352, 352, 352, 352,
	263, 263, 263, 270, 264, 264, 265, 265, 265, 265,
	265, 300, 301, 266, 266, 266, 302, 302, 311, 315,
	315, 314, 313, 313, 312, 312, 291, 291, 292, 292,
	250, 250, 431, 431, 246, 246, 330, 330, 330, 330,
	205, 205, 236, 236, 204, 204, 198, 198, 199, 199,
	199, 199, 229, 229, 354, 354, 354, 355, 356, 305,
	190, 189, 177, 178, 188, 187, 186, 176, 179, 183,
	184, 185, 181, 182, 194, 193, 192, 191, 335, 200,
	200, 201, 201, 201, 202, 202, 202, 202, 173, 173,
	195, 195, 196, 197, 197, 166, 166, 166, 167, 167,
	168, 168, 363, 363, 361, 361, 361, 362, 362, 362,
	362, 360, 360, 360, 360, 360, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 6, 4, 6, 6,
	6, 1, 1, 5, 5, 6, 6, 4, 4, 4,
	4, 3, 4, 4, 7, 4, 3, 5, 4, 12,
	4, 12, 1, 3, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 6, 4, 9, 7, 12, 12, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 3, 1, 1, 2, 1, 2, 7, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 2, 2, 5, 6, 3, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 3, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 4, 4, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 5, 4, 6,
	4, 6, 4, 1, 0, 2, 3, 3, 3, 6,
	4, 2, 3, 4, 2, 3, 3, 3, 4, 3,
	3, 3, 3, 4, 3, 1, 1, 1, 2, 3,
	2, 3, 6, 6, 7, 9, 6, 3, 4, 5,
	5, 3, 1, 1, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 8, 11, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 4, 7,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 7, 3,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 6, 3,
	6, 7, 6, 5, 3, 4, 13, 16, 13, 16,
	4, 2, 2, 0, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 1, 0, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 4, 2, 1,
	3, 1, 3, 8, 5, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 3, 4, 1, 5, 3, 4, 5, 1,
	5, 1, 3, 2, 0, 3, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	5, 4, 1, 2, 1, 4, 1, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 5, 4, 6, 3,
	5, 4, 6, 4, 6, 5, 7, 3, 3, 3,
	3, 3, 4, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 8,
	8, 6, 4, 6, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 1, 2, 3, 2, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 1, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 2, 2, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -4, -34, -36, -48, -46,
	-49, -79, -62, -63, -64, -78, -73, -77, -80, -81,
	-82, -83, -74, -89, -88, -90, -94, -40, -91, -84,
	-85, -95, -103, -130, -131, -132, -133, -5, -11, 26,
	37, -37, -38, -39, 52, 79, 67, -57, -54, -51,
	-60, 81, 101, -390, 105, -65, -68, -70, 110, 118,
	123, 124, 148, 158, 260, 267, 289, 291, 293, 302,
	-42, -41, 119, -141, -143, 287, -86, -87, -96, -97,
	-98, -99, -134, 320, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, 323, -35,
	-47, -93, -92, 367, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -389,
	-66, -67, -69, -71, -72, -144, -142, 424, 288, 377,
	38, 332, 68, 113, 297, 21, -14, -18, -19, -15,
	-17, -20, -16, -24, -28, -29, -26, -25, -27, -30,
	-31, -32, -33, -21, -22, -13, 395, 403, -147, -145,
	-146, -148, 309, 385, 345, 428, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 2, 345, 258,
	389, 310, 378, 94, 272, 171, -407, 2, 4, -369,
	-367, -199, -198, 345, 94, 31, 39, 40, 42, 45,
	57, 58, 59, 62, 98, 99, 117, 125, 126, 137,
	150, 152, 161, 162, 163, 178, 184, 186, 166, 207,
	236, 237, 250, 254, 264, 266, 275, 299, 326, 341,
	356, 357, 358, 364, 365, 385, 386, 387, 391, 398,
	21, 22, 23, 24, 26, 36, 37, 38, 41, 43,
	44, 47, 48, 49, 50, 51, 52, 53, 56, 61,
	66, 67, 68, 69, 70, 75, 72, 73, 74, 77,
	79, 80, 83, 84, 92, 93, 95, 96, 97, 101,
	103, 105, 108, 109, 110, 112, 114, 115, 118, 119,
	122, 120, 351, 353, 121, 123, 124, 134, 135, 136,
	138, 139, 141, 143, 147, 149, 153, 155, 156, 157,
	158, 159, 160, 172, 167, 173, 177, 180, 179, 181,
	182, 183, 174, 188, 191, 192, 193, 195, 196, 199,
	200, 201, 204, 203, 206, 209, 210, 213, 214, 217,
	219, 222, 223, 226, 224, 225, 228, 229, 231, 230,
	238, 239, 241, 242, 245, 246, 249, 252, 255, 256,
	257, 258, 259, 260, 261, 263, 265, 267, 269, 270,
	271, 272, 273, 274, 276, 277, 279, 280, 281, 282,
	283, 287, 285, 286, 288, 289, 290, 291, 293, 295,
	296, 297, 298, 300, 321, 322, 334, 302, 303, 304,
	305, 306, 307, 308, 312, 316, 313, 314, 315, 310,
	311, 317, 318, 320, 323, 325, 327, 328, 331, 332,
	333, 335, 338, 339, 340, 336, 337, 330, 343, 344,
	346, 347, 348, 349, 350, 352, 354, 359, 362, 363,
	367, 368, 370, 371, 374, 375, 376, 381, 377, 379,
	382, 383, 384, 390, 389, 396, 397, 399, 400, 401,
	-197, -166, 417, -196, 427, 427, 427, 2, 192, 193,
	271, 270, 317, 318, -191, -195, -196, -197, -166, 4,
	-367, -369, 94, 243, 427, 427, 427, 2, 345, 333,
	56, 310, 378, 295, 389, 368, 108, -271, 94, 373,
	-166, 267, 25, 2, 103, 177, 376, 375, 25, 263,
	311, 347, 349, 2, 427, 427, 2, 389, 310, 345,
	171, 94, 378, 295, -185, 2, -166, -76, 2, 424,
	28, -75, -5, -51, -60, -65, -78, -73, -11, -34,
	-36, -57, -54, -62, -68, -70, -82, -81, -83, -85,
	-89, -88, -91, -96, -97, -103, -132, -133, 81, 26,
	110, 320, 187, 2, -412, -230, 2, 25, -170, -166,
	81, 148, 309, -140, 345, 2, -166, 192, 193, 2,
	-185, 2, -407, 2, 192, 193, 2, -412, -230, 24,
	2, -166, 2, 306, -171, 2, 302, -166, 427, 427,
	427, 427, 427, 427, 214, 61, 299, 317, -101, 363,
	-100, 356, 304, -102, -359, 2, 226, -166, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	2, -128, 317, 333, 156, 37, 61, 25, 66, 95,
	149, 171, 172, 200, 76, 77, 270, 214, 193, -321,
	318, 346, 305, 343, 363, 81, 379, 296, 401, -415,
	120, 4, 94, 226, 319, 356, 70, 350, 351, 427,
	427, 427, -423, 2, 345, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, -142, -144, -143,
	427, 427, 427, 427, 427, -225, -226, 372, 185, 116,
	248, -141, -143, 2, -389, -128, 317, 2, 61, 25,
	-357, 2, -296, 243, -298, 415, 416, 410, 232, 402,
	-309, 100, 221, 220, -299, -311, 117, 299, -244, 8,
	9, 5, 6, 7, -173, -339, -305, -346, 366, 127,
	235, -202, 430, 10, 424, -386, -143, -310, 32, 54,
	-361, -201, -340, -348, -344, -345, -429, 43, 50, 49,
	354, 225, 312, 313, 327, 314, 315, 41, 381, 167,
	241, 242, 179, 4, 186, -200, -166, -383, -384, -367,
	-368, 178, 184, 180, 326, 181, 182, 183, 40, 275,
	138, 139, 137, 109, 99, 98, 237, 45, 44, 42,
	386, -349, 96, 356, 357, 358, 359, 195, 196, 64,
	86, 87, 85, 90, 89, 91, 88, 319, 378, 55,
	31, 161, 162, 166, 236, 163, 62, -385, 337, 82,
	128, 146, 176, 164, 189, 190, 194, 208, 211, 227,
	234, 251, 253, 294, 324, -430, 387, 57, 58, 125,
	126, 150, 207, 254, 264, 341, 364, 365, -424, 2,
	363, 363, 2, -424, 2, -424, 2, -169, 2, 363,
	360, -425, 363, 398, -391, 276, -392, -185, -391, 427,
	427, 429, 427, -220, -221, -222, 2, 25, 106, 424,
	2, -324, 2, 422, -328, -143, 202, -327, 424, -325,
	-191, 244, -387, 300, -383, -384, -173, -166, -201, 4,
	221, 220, -3, 2, -328, 161, -191, 2, -189, -360,
	4, -367, -369, -368, -370, 64, 25, 27, 28, 29,
	30, 32, 33, 34, 35, 46, 54, 55, 60, 63,
	65, 76, 81, 85, 86, 88, 87, 89, 90, 91,
	100, 102, 104, 106, 107, 111, 113, 116, 127, 129,
	142, 144, 145, 148, 151, 154, 165, 171, 175, 185,
	187, 202, 205, 212, 215, 216, 232, 233, 235, 240,
	243, 244, 247, 248, 262, 268, 278, 292, 309, 319,
	329, 342, 345, 355, 360, 361, 366, 372, 373, 378,
	380, 388, 392, 393, 394, 395, 2, -328, 161, 2,
	-192, 161, -328, -195, 2, -365, 161, -363, 10, -362,
	5, 4, -367, -369, -368, 2, -176, -166, 2, -188,
	-360, 2, -204, 161, -191, 360, 429, -236, -198, -199,
	-229, -166, 426, -296, 2, -91, 2, -296, 161, 2,
	-91, 161, 2, -296, 161, 2, -91, 161, 2, -223,
	424, 426, 345, 65, 2, -191, 161, -181, 2, -166,
	142, -192, 161, 2, -195, -365, 161, 2, -365, 161,
	2, -194, 2, -191, -193, -195, -193, 171, 188, -176,
	161, 2, -166, 25, 145, 2, 187, 2, 187, 2,
	-329, 2, -328, -238, 161, 2, -191, -238, 161, 2,
	-238, 161, 2, -205, 161, 2, -204, -176, 161, 2,
	-366, 161, 2, -365, -366, 161, 2, -267, 424, -336,
	2, -335, -362, 385, 424, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 317, -140, 243, 360, 429, 424, -365, -191,
	-296, -91, -307, 424, 145, -296, -91, 243, 145, 245,
	2, 94, 345, -166, 2, 321, 2, 424, -101, 59,
	363, -285, 2, -286, -163, -164, -165, 191, 269, 274,
	401, -357, -418, 145, 407, 360, -357, -245, 426, -128,
	2, 142, 380, 2, 8, 2, -365, 273, 134, 2,
	321, 2, 270, 318, 61, 401, 145, 2, 2, -410,
	2, 243, 145, 2, 145, 2, 145, 2, 145, 2,
	145, 2, 2, 270, 318, 2, 362, 201, 121, 2,
	145, 2, 145, 2, 5, 2, 191, 269, 334, 2,
	-191, -421, 2, 345, 389, 310, 2, 2, 72, 73,
	145, 2, 145, 401, 2, -253, -328, -225, -226, -252,
	-273, -274, 212, 129, 240, -258, 25, 106, -258, -258,
	48, 425, 425, -128, 321, 2, 11, 12, 63, 36,
	415, 416, 417, 418, 140, 419, 420, 413, 414, 412,
	405, 406, 409, 197, 198, 78, 408, 407, 71, 218,
	301, 130, 131, 132, 133, 284, 168, 169, 170, 14,
	15, 16, 29, 247, 211, 402, 164, 324, 410, 17,
	18, 19, 189, 190, 234, 39, 165, -172, -206, -296,
	-296, -296, -296, -296, 253, -250, -291, 422, -143, 424,
	424, 424, 5, 424, 5, -356, 8, -143, -296, -309,
	425, -242, 424, -143, -309, -304, 424, 299, 422, -312,
	-296, 426, -393, 396, -342, 424, 266, -341, 424, -341,
	-341, 390, 397, 403, 397, 403, 142, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	390, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	-284, -285, -284, 360, -171, 429, -391, -223, 424, -246,
	-330, -296, 417, -246, -246, 243, -239, -296, 82, -261,
	194, 227, 146, 208, 294, 176, -356, -76, -293, 430,
	-320, 403, -143, -325, -166, -143, -327, 424, -324, -320,
	417, -191, 424, 145, 424, 426, -152, 285, -151, 23,
	26, 110, 383, 122, -213, 173, 258, 117, 330, -414,
	-416, 303, 352, 353, 74, 238, 285, 117, -255, -257,
	33, 92, 229, 255, 51, 159, 220, 221, 332, 391,
	117, 285, 395, 117, -416, 285, -416, -154, 330, -414,
	-416, 303, 285, -153, -213, 117, 430, -365, -236, 429,
	429, -360, 417, 117, 117, 117, 117, 145, -229, -360,
	-191, -200, -166, -201, 424, -223, 232, 243, -409, -237,
	345, -191, -256, -255, 232, -162, -388, 395, 232, 232,
	-223, 33, 424, 2, -178, 161, 2, -167, -166, 171,
	-388, 232, -329, -203, -191, -203, 320, -185, 33, -155,
	429, 53, 290, 117, -155, 117, -155, 117, -155, 429,
	117, -155, 117, 429, 117, 117, -239, 425, 429, -336,
	-365, -407, -229, -170, -365, -138, 395, 145, 81, 424,
	33, -306, -337, -338, -350, -339, -347, -343, -346, 280,
	281, 279, 283, 282, 43, 50, 49, 354, 225, 312,
	313, 327, 314, 315, 41, 381, 167, 241, 242, 179,
	4, 42, 386, -349, 186, 178, 184, 180, 326, 181,
	182, 183, 40, 275, 138, 139, 137, 109, 99, 98,
	237, 45, 44, 96, 356, 357, 358, 359, 195, 196,
	387, 337, 57, 58, -366, -407, -229, 142, -176, 2,
	-191, 2, -359, -239, 33, -285, 2, -426, 429, 210,
	-208, 217, 231, 155, 244, 399, -364, 5, 4, -305,
	-317, 100, 214, -346, 9, 416, -354, 8, 415, -358,
	-357, 84, 426, -360, 345, 195, -365, -365, -359, 25,
	322, 2, 73, -191, -411, 142, -408, 295, -407, -191,
	-191, -191, -191, -191, 142, 2, 362, 2, 362, 2,
	-166, -166, 210, -191, 142, 345, 171, 345, -155, 429,
	-252, -274, -273, -276, -296, 25, -279, 136, 228, -296,
	-298, -142, -142, -142, -227, -322, -296, 268, 171, -359,
	-351, -337, -337, -190, -360, 356, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, 211, 164, 324, 39, 165, -296, 360, -296, -296,
	-296, -296, 224, 232, 235, 366, 127, 374, 106, 238,
	-431, 342, 35, -302, -143, -243, 424, -316, 30, 329,
	25, -309, 424, -291, -296, -292, -240, -239, -239, 425,
	388, 25, 106, 417, 2, 8, -268, 400, 223, 97,
	157, 222, -269, 308, 425, 429, 33, 425, -296, -240,
	-308, -304, -315, -314, 392, -360, 417, -394, 135, 151,
	8, -356, 356, 356, 356, 356, 424, 425, 2, 425,
	2, 425, 2, 425, 2, 425, 2, -296, -296, -296,
	-296, -296, -296, -296, -239, -262, 2, -352, -239, 4,
	400, 223, 97, 157, 222, 308, -262, 2, -239, 2,
	-239, 2, -263, 2, -296, -239, -264, -297, -298, 415,
	416, 410, -309, -265, 2, -296, -240, -296, 46, 205,
	361, -266, -296, 145, -239, -171, -392, 33, -239, -232,
	429, 145, 33, 4, -232, -232, 424, 425, 429, 194,
	194, -324, -261, 194, -259, 251, -259, -259, -405, 424,
	423, -320, -177, 422, 431, -360, -319, -318, 33, -185,
	249, -320, -320, 426, 425, -319, -191, 424, -239, -360,
	429, 360, -419, 76, 65, -288, 161, 65, -371, -179,
	76, -372, -166, 60, 373, 268, 144, -419, 76, -419,
	76, 76, 320, 333, 48, -328, 36, -91, 206, 145,
	401, 345, 360, -328, -257, -337, 92, 220, 221, 48,
	-355, -354, 416, -355, 48, -355, -355, -355, 395, -192,
	-328, 360, 259, -365, 360, 429, 36, -91, 206, 145,
	360, -204, -177, -333, -332, 404, -198, -166, 426, -296,
	-91, -296, -91, 335, 425, 426, 189, 189, -209, -210,
	-166, -289, -288, -373, -374, -371, 188, 171, 373, 128,
	33, 117, -229, -334, 187, 429, -237, 117, 259, 117,
	117, 33, 424, 114, 272, 2, 243, 232, -178, 161,
	-158, 348, 117, -290, 393, -280, -91, 424, 100, 33,
	-280, -247, -248, -331, -249, -179, 424, -185, -191, -238,
	-238, -238, -204, -205, -176, -365, -366, -366, 425, -76,
	-335, 425, -138, 360, 395, 425, -137, 246, -136, -166,
	5, -140, 380, -210, -75, 26, 81, 110, 425, 429,
	-231, 32, 422, -268, 424, -353, 390, 424, 424, -138,
	-332, 145, -230, -333, -333, -418, 425, 363, -286, -207,
	274, 328, 286, 316, 9, 8, 8, 429, -360, -191,
	142, -229, -229, 317, 142, 142, 426, 272, 94, 345,
	258, 171, -191, -204, -191, -328, -277, -354, 424, -278,
	299, 300, 429, -150, 34, 104, 199, -191, 401, 115,
	-296, -296, 360, -431, 342, -302, 115, -296, 224, 235,
	366, 127, 374, 106, 238, 145, 424, -297, -297, 425,
	-241, -296, -296, 423, 433, 425, -428, 429, -225, -296,
	-239, -239, 425, 425, 360, 360, 360, 360, 424, 426,
	-239, -229, 423, 423, 429, -313, -314, 111, -296, 426,
	-399, 252, 424, 424, 425, 425, 429, 401, 401, 401,
	401, -296, 33, 429, 429, 429, 425, 429, 429, 429,
	425, 425, 145, 425, 425, 425, 425, -270, 262, 425,
	11, 12, 415, 416, 417, 418, 140, 419, 420, 413,
	414, 412, 405, 406, 407, 71, 218, 301, 14, 15,
	16, 189, 165, -297, -297, -297, 425, -300, -301, 145,
	142, 33, -266, -266, -266, 425, 145, -239, 424, 425,
	-290, -330, -234, 2, -324, -187, -360, -290, -290, -239,
	-296, -324, -324, -260, 380, 243, 194, -324, -318, 425,
	-406, -356, -320, -319, -356, -295, -294, 143, 230, -185,
	-223, -319, -319, -360, -320, 425, -235, -326, -387, -428,
	426, -151, -191, -179, -186, -166, 232, -288, 161, -157,
	232, -337, -186, 424, 424, 199, 199, -179, -186, 161,
	-179, 161, -186, -186, -413, 274, 239, -296, 213, 272,
	233, -152, 285, -91, -91, 424, -418, 380, 105, -191,
	-194, 285, -200, -355, -355, -255, 285, -192, -365, 395,
	-176, -153, -91, -91, 424, -177, -154, 285, -135, 160,
	238, 417, -360, -129, 5, 235, -129, 425, 429, 171,
	-178, 171, -184, -167, -91, -191, 145, -138, -365, -191,
	-192, -365, -365, -365, -91, 2, 424, 2, -191, 117,
	243, 232, -159, 112, -427, 407, -176, -226, -225, -296,
	-254, -283, 292, 243, -224, -180, -179, 385, -185, -254,
	-233, 429, 145, 407, 426, -224, -155, -155, -155, -155,
	-155, -76, 145, -229, 24, -138, 429, 424, 407, 407,
	424, -365, -365, 425, -337, 422, 423, 8, 8, 424,
	-356, -356, -138, -229, 145, -43, 395, -357, -285, 371,
	69, 274, -357, 345, 317, 317, -166, -188, -176, -191,
	-189, -204, -278, -296, -322, -191, 430, -296, -296, 115,
	115, -296, -297, -297, -296, 115, 145, 424, -296, -306,
	29, 29, 425, 429, -292, -296, 425, 388, -428, -428,
	-428, 5, 223, 157, 222, -269, 222, -269, -269, 8,
	417, -360, 425, -304, 113, -296, 355, -360, 417, -400,
	-182, 424, -166, 393, -225, -356, 425, -351, -337, -296,
	-296, -296, -296, -296, -296, -300, -296, -351, -337, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, 106, 232,
	238, -297, -301, -300, -296, -296, -337, 425, 425, 425,
	-239, -75, -251, 151, -333, 429, -251, -251, 425, -260,
	424, -296, -324, 423, 425, 429, -319, 423, 429, 432,
	407, -223, 426, -318, 425, 429, -282, 33, 425, -360,
	360, 360, 117, 232, 382, -375, -372, -296, -228, -323,
	-179, -387, 424, -166, 424, 424, -149, 110, 320, -420,
	117, -155, 117, -155, 399, 424, 424, 360, -419, 76,
	-239, -296, -139, 100, -359, -416, 360, 360, 259, -239,
	360, -138, 145, 344, -211, 174, -289, -167, 424, -178,
	424, 424, -223, -191, -256, -162, 2, -272, 380, -177,
	-191, 117, -160, 204, -427, -363, -388, -275, -273, -254,
	-246, 233, 75, 425, 429, 426, -290, -248, -234, -296,
	2, 425, -91, 245, -136, -137, -365, -365, -365, -138,
	-140, -140, 8, 423, 425, -356, 425, 425, -229, 246,
	-191, -215, -214, 258, 238, 244, 425, -150, -177, -296,
	-296, 115, 29, 29, -296, -296, -306, 425, -296, -296,
	-239, 423, 5, -296, 425, 425, 425, 425, -296, 426,
	-401, -166, -296, 425, 425, 425, 425, 429, 429, 425,
	425, 425, 425, -301, 145, 106, 238, 424, 425, 425,
	-303, 154, 48, -324, -303, -303, -229, -293, -356, -294,
	-177, 422, -360, -326, 424, 426, -179, -186, -288, 117,
	-376, 76, -377, 63, 128, 81, 232, 235, 373, 268,
	60, 100, 278, 33, 425, 425, 429, -175, 63, -175,
	-296, -228, -229, 232, 339, 100, 232, 100, 93, 368,
	-179, -186, -229, -229, -191, -179, -186, 425, 429, 407,
	-194, -192, -365, 425, -177, -366, 356, -212, -213, 165,
	424, -228, 424, -229, -209, 33, 424, 147, 47, 243,
	424, -177, -161, 203, -427, -363, -158, -254, -281, 424,
	243, -91, -180, 2, -226, 407, 425, 425, 93, 93,
	423, 425, -44, -45, 171, 76, 261, -189, 345, -150,
	-296, -296, -296, 425, -428, -360, 417, -395, 258, 425,
	-296, -296, -297, 145, 424, -306, -396, 394, -296, -239,
	-396, -396, 425, -320, -356, 2, -288, -186, -190, -183,
	-166, 128, 161, 235, 199, 424, -297, -191, 424, 2,
	-287, -422, 80, 340, -323, -150, -190, -150, 425, 425,
	425, 235, 235, -296, -337, -155, -155, 425, 425, 360,
	360, 360, -359, -357, 360, -296, 256, -228, 425, -228,
	425, 425, -91, -228, -191, -228, 243, -427, -363, -159,
	107, -229, 76, -275, -302, -138, 424, 424, 429, 25,
	424, 25, 424, -191, 425, -226, 48, 425, 425, -297,
	-306, 425, -397, -398, -182, -319, 423, -377, -183, 232,
	-296, -168, 424, -296, -211, 424, -175, 278, -174, 63,
	424, 424, -179, -186, 424, 407, 424, -191, 425, -287,
	425, -211, 425, -272, 425, -191, -363, -160, 375, 233,
	425, -186, -254, -366, -366, -45, -229, -229, -402, 272,
	300, 153, -239, 425, 429, 33, 117, 425, -378, 219,
	-166, 425, -212, -229, -150, -191, -417, 380, -190, -217,
	-216, -214, -219, -218, -214, -239, -357, -239, 424, -211,
	-287, -212, -287, 424, -287, 424, -161, 320, -290, 425,
	425, 425, 425, 425, -403, -404, 39, 370, 84, -296,
	-403, -403, -398, -400, 128, -379, -382, -381, 243, 146,
	257, 325, 425, 339, 391, 425, -223, -296, 425, 429,
	385, 425, 429, 385, 425, 425, -229, -212, -211, -211,
	-228, -211, -228, -247, -138, -138, -404, 265, 141, 299,
	265, 141, -183, -381, 243, -382, 243, 375, 103, -378,
	-216, 165, -218, 145, 425, -212, -212, 425, -212, 425,
	-290, 29, -380, 229, 290, 53, 320, -380, -379, 424,
	424, -156, 53, 290, -287, -287, -404, 22, 235, 100,
	-239, -239, -211, -211, 425, 425, -212, -212, -212, 360,
	424, -239, 425, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 198, 200, 202, 0, 0, 0, 225, 227, 229,
	230, -2, 0, 0, 0, 265, 266, 268, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	405, 406, 0, 882, -2, 0, 384, 386, 395, 397,
	399, 401, 402, 0, 464, 466, 468, 470, 472, 474,
	476, 477, 479, 481, 483, 485, 487, 489, 491, 493,
	495, 497, 499, 501, 503, 505, 507, 509, -2, 794,
	796, 798, 800, -2, 62, 64, 66, 68, 70, 72,
	90, 233, 234, 236, 238, 240, 243, 244, 246, 919,
	271, 273, 275, 277, 279, -2, 933, 0, 0, 0,
	-2, 0, -2, -2, -2, 812, 74, 75, 76, 77,
	78, 79, 80, 97, 98, 99, 100, 101, 102, 103,
	83, 85, 86, 92, 93, 95, 0, 0, 895, 897,
	899, 901, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 46, 52, 54, 56, 60, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, -2, -2,
	-2, -2, 0, 0, 1582, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
	1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
	1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1478, 1522, 1481, 1476, 199, 201, 203, 204, 0, 0,
	0, 0, 0, 0, 687, 1507, 1520, 1521, 1522, 1525,
	1526, 1527, 1582, 0, 226, 228, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 754,
	363, 1674, 365, 367, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 267, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 362, 360, 1501, 304, 305, 0,
	0, 345, 346, 347, 348, 349, 350, 352, 309, 311,
	313, 314, 316, 318, 320, 322, 324, 326, 328, 330,
	331, 333, 335, 336, 338, 340, 341, 343, 755, 0,
	0, 0, 0, 181, 0, 377, 371, 376, 378, 380,
	381, 382, 383, 0, 0, 179, 172, 0, 0, 620,
	358, 356, 0, 171, 0, 0, 791, 0, 377, 1549,
	375, 792, 793, 0, 787, 788, 1704, 822, 385, 387,
	396, 398, 400, 403, -2, -2, 1799, -2, 427, -2,
	434, 1802, 1706, 437, 0, 439, -2, 442, 465, 467,
	469, 471, 473, 475, 478, 480, 482, 484, 486, 488,
	490, 492, 494, 496, 498, 500, 502, 504, 506, 508,
	510, 511, 0, 0, 0, 0, 0, 515, 0, -2,
	-2, 0, 0, 0, 0, 0, -2, 0, -2, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 514, 516, 517, 518, 0, 563, 602, 603, 795,
	797, 799, 0, 729, 921, 63, 65, 67, 69, 71,
	73, 235, 237, 239, 241, 245, 247, -2, 893, 894,
	272, 274, 276, 278, 280, -2, 0, 925, 925, 925,
	0, 0, 894, 892, 0, 388, 0, 390, 0, 515,
	393, 394, 446, 447, 1141, 0, 0, 0, 0, 0,
	1376, 1225, -2, -2, 1257, 1259, 1778, 1799, 1375, 1261,
	1262, 1263, 1264, 1265, 0, 0, 1268, 0, 1270, 1271,
	1272, 1273, 0, 1275, 0, 1279, 1280, 1281, 0, 1455,
	1518, -2, 1050, 1051, 1052, 1053, 1054, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1514, 1509, 1347, 1294, -2,
	1536, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1590, -2, -2, -2, -2, -2, -2,
	-2, 1106, -2, -2, -2, -2, -2, -2, -2, 1812,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 0,
	1767, 1784, 1785, 1790, 1792, 1786, 1775, 1317, -2, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1825,
	1826, 1827, 1828, 1829, 1830, 1107, -2, -2, -2, 1779,
	1780, 1782, 1791, 1795, 1796, 1801, 1805, 1806, 824, 802,
	815, 824, 804, 805, 806, 807, 808, 813, 814, 817,
	0, 809, 810, 811, 911, 1681, 914, 687, 912, 896,
	898, 0, 900, 0, 0, 0, 905, 928, 926, 0,
	964, 909, 910, 920, 979, 1002, 0, 984, 0, 1002,
	1024, 0, 989, 1700, 1295, 1296, 0, 1522, 1519, -2,
	1823, 1824, 2, 81, 0, 1784, 1024, 82, 0, 1491,
	1541, 1542, 1543, 1544, 1545, 1812, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 84, 0, 1784, 87,
	0, 1784, 0, -2, 91, 0, 1784, 182, 183, 1532,
	1533, 1537, 1538, 1539, 1540, 94, 0, 1497, 96, 0,
	1494, 104, 0, 1784, 1475, 0, 0, 612, 1472, 1477,
	613, 1482, 0, 205, 206, 207, 208, 209, 1784, 211,
	212, 0, 214, 215, 1784, 217, 218, 0, 220, 0,
	0, 0, 0, 0, 242, 687, 1784, 0, 249, 1502,
	0, 711, 1784, 709, 1506, -2, 1784, 732, 735, 1784,
	737, 687, 739, 1504, 744, 1505, 0, -2, 0, 918,
	1784, 838, 364, 366, 0, 258, 0, 851, 0, 853,
	0, 872, 1030, 164, 1784, 283, 302, 164, 1784, 286,
	164, 1784, 289, 164, 1784, 292, 1470, 164, 1784, 295,
	296, 1784, 298, 184, 299, 1784, 301, 359, 0, 0,
	-2, 353, 1508, -2, 0, 351, 310, 312, 315, 317,
	319, 321, 323, 325, 327, 329, 332, 334, 337, 339,
	342, 344, -2, 0, 0, 0, 0, 0, 196, 0,
	618, 619, 0, 0, 0, 789, 790, 0, 0, 0,
	407, 0, 0, 821, 404, 0, 422, 0, 426, 1774,
	-2, -2, 430, 825, 829, 830, 831, 0, 0, 0,
	0, 436, 0, 0, 423, 424, 440, 443, 0, 512,
	513, 0, 0, 523, 524, 525, 526, 1679, 1604, 529,
	0, 532, 553, 567, 0, 0, 0, 536, 538, 617,
	540, 0, 0, 542, 0, 544, 0, 546, 0, 548,
	0, 550, 552, 554, 568, 556, 0, 0, 0, 566,
	0, 572, 0, 575, 576, 577, 0, 579, 580, 581,
	582, 0, 584, 585, -2, -2, 589, 591, 0, 597,
	0, 601, 0, 519, 520, 164, 1028, -2, 0, 888,
	942, 943, 0, 0, 0, 0, 923, 924, 0, 0,
	0, 884, 885, 389, 0, 392, 0, 0, 0, 0,
	1381, 1382, 1383, 1384, 1385, 1386, 1389, 1390, 1387, 1388,
	1391, 1392, 0, 0, 0, 0, 0, 1393, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1394,
	1395, 1396, 0, 0, 1398, 0, 1400, 0, 0, 0,
	0, 0, 0, 1204, 1206, 1463, 0, 0, 1397, 1146,
	1147, 1148, 1183, 1184, 0, 1258, 1460, 1459, 1260, 0,
	1412, 0, 1267, 0, 1138, 1274, 1488, -2, 0, 1376,
	1407, 0, 0, 1282, 1283, 1284, 0, 0, 1412, 0,
	1454, 0, 1349, 0, 1086, 0, 1087, 1088, 0, 1089,
	1090, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1108, 0, 0, 0, 0, 0, 1435, -2, 0, 0,
	801, -2, 803, 0, 819, 0, 913, 0, 0, 968,
	1464, 1468, 1469, 968, 968, 0, 0, 1413, 0, 0,
	0, 0, 1021, 1021, 1021, 1019, 996, 0, 1002, 0,
	1012, 0, 1002, 1002, 0, -2, 984, 0, 0, 1012,
	1025, 1026, 0, 0, 0, 0, 105, 784, 132, 0,
	784, 784, 0, 0, 151, 0, 0, 0, 0, 0,
	123, 128, 111, 112, 0, 0, 0, 0, 88, 712,
	0, 715, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 0, 0, 122, 0, 117, 107, 0, 0,
	125, 130, 0, 155, 157, 0, 0, 1015, 611, 0,
	0, 1523, 1480, 0, 0, 0, 0, 0, 0, 1523,
	0, 0, 1509, 1510, 626, 0, 0, 0, 256, 251,
	0, 253, 707, 710, 0, 730, 0, 917, 0, 0,
	0, 0, 0, 745, 0, 1784, 750, 1493, 1528, 1529,
	840, 0, 1034, 0, 854, 0, 0, 1031, 0, 281,
	0, 162, 163, 0, 284, 0, 287, 0, 290, 0,
	0, 293, 0, 0, 0, 0, 0, 920, 0, 0,
	196, 0, 369, 379, 0, 174, 0, 0, 0, 0,
	920, 0, 1415, 1042, 1038, 1045, 1046, 1047, 1138, 1093,
	1094, 1095, 1096, 1097, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, -2, 1104, 1106, 1124, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1099, 0, 1074, 1074,
	1074, 1091, 1092, 1115, 1116, 1118, 1120, 1122, 1043, 1044,
	1109, 1110, 1111, 1112, 196, 0, 373, 0, 1015, 409,
	1015, 411, 0, 0, 0, -2, 432, 0, 827, 0,
	832, 455, 456, 457, 834, 835, 435, 458, 459, 460,
	461, 462, 463, 0, 704, 0, 706, 1484, 0, 433,
	448, 438, 0, 444, 0, 0, 527, 528, 530, 531,
	533, 534, 598, 535, 539, 0, 605, 1696, 615, 541,
	543, 545, 547, 549, 0, 558, 0, 560, 0, 562,
	570, 573, 578, 583, 0, 0, 0, 0, 728, 0,
	891, 940, 941, 946, 950, 951, 954, 957, 958, 948,
	1141, 906, 907, 908, 934, 935, 767, 0, 0, 391,
	1142, 1039, 1143, 1144, 1490, 0, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, -2, -2, -2, -2,
	-2, -2, -2, -2, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, -2, -2, -2, 1181, 1182,
	-2, 1399, 1401, 0, 1463, 0, -2, 0, -2, -2,
	-2, -2, 1201, 0, 1203, 1208, 1210, 1212, 0, 0,
	0, 0, 1462, 1222, 1446, 1447, 0, 0, 1378, 1379,
	1380, 1207, 0, 1461, 1458, 0, 0, 1411, 931, 1285,
	0, 0, 0, 0, 1292, 0, 1489, 1125, 1126, 1127,
	1128, 1129, 1130, 1139, 1278, 1409, 0, 1408, 0, 0,
	0, 1419, 1453, 1449, 0, 1511, 1517, 1357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 1422, -2,
	-2, -2, -2, -2, -2, -2, 0, 1331, 0, 1343,
	0, 1345, 0, 1333, 1413, 1432, 0, 0, 1228, 0,
	0, 0, 1376, 0, 1336, 1413, 1440, 0, 0, 0,
	0, 0, 1413, 0, 1445, 818, 915, 0, 0, 1034,
	0, 0, 0, 1467, 1034, 1034, 0, 963, 0, 0,
	0, 0, 0, 0, 1016, 1020, 1017, 1018, 0, 0,
	1002, 1012, 976, 0, 0, 1492, 982, 1011, 0, 687,
	1001, 1012, 1012, 0, -2, 986, 0, 0, 931, -2,
	0, 0, 0, 0, 783, 134, 1784, 0, 166, 0,
	0, 677, 1498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 713, 714, 716, 722, 724, 0,
	718, 1487, 0, 719, 0, 721, 723, 725, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 1474, 187, 1014, 0, 1473, 1483, 0, 210,
	213, 216, 219, 197, 686, 0, 0, 0, 0, 625,
	-2, 627, 629, 630, 631, 632, 1630, 1529, 0, 1529,
	0, 0, 0, 196, 0, 0, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 1784,
	842, 848, 0, 933, 0, 870, 856, 0, 0, 0,
	870, 874, 875, 877, 878, 0, 0, 1032, 303, 164,
	164, 164, 1471, 164, 164, 185, 297, 300, 361, 306,
	354, 920, 0, 0, 0, 196, 194, 1662, 192, 189,
	191, 0, 0, 0, 355, 0, 0, 0, 357, 0,
	1035, 1037, 0, 1048, 0, 0, -2, 0, 0, 169,
	196, 0, 0, 408, 413, 0, 425, 0, 826, 833,
	0, 452, 0, 454, 705, 1486, 1485, 0, 445, 521,
	0, 616, 614, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 599, 600, 604, 1029, 0, 952, 0, 949,
	955, 956, 0, 937, 765, 766, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1223, 0, -2, 1202, 1205,
	1209, 1211, 1213, 0, 0, 0, 0, 0, 0, 1402,
	0, 1404, 1224, 1456, 1459, 1374, 0, 0, 930, 931,
	931, 931, 1291, 0, 0, 0, 0, 0, 0, 0,
	1410, 0, 1417, 1418, 0, 0, 1450, 0, 0, 0,
	1293, 0, 0, 0, 1098, 1072, 0, 1117, 1119, 1121,
	1123, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	1316, 1328, 0, 1330, 1342, 1344, 1332, 0, 0, 1334,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 1232, 1233, 1335, 1438, 1439, 0,
	0, 0, 0, 0, 0, 1341, 0, 1444, 920, 965,
	960, 1465, 1015, 967, 969, 1466, 1495, 960, 960, 0,
	1414, 1004, 0, 1006, 0, 0, 0, 1008, 0, 997,
	0, 999, 1012, 981, 0, 0, 974, 0, 973, 687,
	1010, 983, 987, 1511, 0, 1027, 0, 991, 994, 0,
	0, 133, 771, 0, 0, 1496, 0, 136, 1784, 145,
	0, 654, 0, 0, 0, 0, 0, 786, 146, 1784,
	164, 1784, 164, 147, 150, 0, 154, 152, 0, 0,
	645, 106, 784, 109, 115, 0, 0, 0, 121, 0,
	777, 0, 717, 720, 726, 89, 0, 779, 769, 0,
	768, 156, 110, 116, 0, 781, 108, 0, 196, 0,
	0, 1479, 1524, 221, 223, 224, 222, 634, 0, 1529,
	0, 1529, 0, 1500, 623, 687, 0, 250, 255, 254,
	711, 733, -2, 736, 738, 740, 0, 742, 753, 0,
	0, 0, 844, 848, 0, 847, 918, 945, 932, 1033,
	849, 870, 0, 0, 0, 859, 861, 858, 855, 852,
	1034, 0, 0, 0, 0, 0, 282, 285, 288, 291,
	294, 307, 0, 368, 0, 173, 0, 0, 0, 0,
	0, 196, 0, 0, 1416, 0, 1040, 0, 0, 0,
	0, 0, 170, 372, 0, 410, 0, 421, -2, 450,
	451, 453, 449, 0, 559, 561, 569, 592, 593, 640,
	0, 596, 0, 0, 936, 767, 0, 1145, 1186, 0,
	0, -2, 0, 0, 1190, 0, 0, 0, -2, 0,
	0, 0, 1403, 1405, 0, 1458, 1286, 0, 0, 0,
	0, 1269, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 0,
	1276, 1277, 1377, 1420, 1448, 1452, 0, 1512, 1516, 1355,
	1356, 1360, 1503, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 1421, 1431, 1433, 1229, 1230, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, -2,
	-2, -2, 1247, 1248, 1249, -2, -2, -2, 0, 0,
	0, 1434, 1436, 1437, 1441, 1442, 0, 1338, 1339, 1340,
	1443, 0, 962, 0, 966, 0, 962, 962, 927, 1005,
	0, 1023, 1007, 979, 998, 0, 988, 977, 0, 978,
	0, 1009, 0, 985, 990, 0, 993, 0, 1286, -2,
	0, 0, 0, 0, 165, 652, 676, 0, 0, 756,
	764, 764, 0, 1498, 0, 0, 138, 0, 0, 0,
	0, 143, 0, 149, 153, 0, 0, 0, 0, 0,
	0, 118, 119, 120, 0, 124, 0, 0, 0, 0,
	0, 167, 0, 0, 642, 0, 628, 0, 0, 0,
	0, 626, 0, 248, 708, 731, 741, 0, 0, 0,
	0, 0, 846, 848, 0, 839, 840, 870, 944, 850,
	868, 869, 867, 0, 0, 0, 933, 876, 873, 879,
	880, 0, 180, 370, 193, 0, 188, 190, 0, 176,
	0, 0, 0, 1041, 1049, 0, 1101, 1105, 374, 0,
	522, 594, 639, 0, 0, 947, 953, 938, 767, 1188,
	1192, 0, 0, 0, 1194, -2, 0, 1216, -2, -2,
	1406, 1457, 1266, 931, 1287, 1289, 1290, 1140, 1451, 0,
	1362, 1359, 0, 1346, 1073, 1307, 1308, 0, 0, 1311,
	1313, 1314, 1315, 1430, 0, 0, 0, 0, 1337, 916,
	1351, 0, 0, 970, 1351, 1351, 0, 1002, 1000, 975,
	971, 0, 1512, 992, 0, 0, 773, 775, 135, 0,
	653, 0, 656, 0, 0, 0, 0, 663, 664, 0,
	0, 0, 0, 0, 678, 685, 0, 767, 0, 767,
	0, 0, 0, 0, 140, 159, 0, 0, 785, 0,
	164, 164, 0, 0, 772, 0, 0, 0, 0, 0,
	778, 780, 770, 0, 782, 186, 0, 621, 641, 0,
	0, 0, 0, 0, 0, 0, 0, 751, 752, 0,
	0, 0, 836, 848, 0, 841, 842, 257, 0, 0,
	0, 857, 860, 862, 945, 0, 195, 196, 0, 0,
	1036, 1100, 412, 414, 0, 0, 420, 638, 0, 939,
	1196, -2, -2, 1217, 0, 1513, 1515, 933, 0, 1348,
	0, 0, -2, 0, 0, 0, 902, 0, 961, 959,
	903, 904, 1022, 1012, 0, 995, 137, 0, 657, 658,
	1499, 660, 0, 662, 665, 0, 667, 1531, 0, 671,
	634, 0, 682, 683, 757, 758, 763, 759, 764, 680,
	0, 139, 141, 158, 762, 142, 148, 0, 0, 0,
	0, 0, 0, 126, 0, 1013, 0, 0, 685, 0,
	675, 634, 624, 0, 753, 0, 0, 0, 843, 844,
	0, 0, 0, 870, 881, 175, 0, 0, 0, 416,
	0, 418, 0, 595, 1288, 1366, 0, 1309, 1310, -2,
	0, 1255, 1350, 1352, 0, 980, 972, 655, 659, 0,
	0, 691, 0, 0, 642, 0, 767, 0, 161, 0,
	0, 0, 774, 776, 0, 0, 0, 0, 674, 634,
	685, 642, 685, 0, 685, 0, 845, 846, 0, 864,
	1034, 866, 871, 0, 0, 415, 0, 0, 0, 0,
	0, 0, 1361, 1256, 0, 0, 0, 666, 696, 0,
	0, 0, 679, 0, 760, 687, 144, 0, 761, 0,
	646, 0, 0, 649, 0, 0, 127, 0, 0, 642,
	634, 622, 634, 0, 634, 0, 837, 0, 865, 196,
	196, 417, 419, 1358, 1363, 1367, -2, 1749, 1579, 0,
	1364, 1365, 1353, 1354, 0, 668, 692, 693, 0, 688,
	689, 690, 1530, 669, 670, 684, 691, 160, 643, 0,
	0, 644, 0, 0, 129, 131, 0, 672, 642, 642,
	0, 642, 0, 1034, 177, 178, 0, 1369, 1370, 1371,
	1372, 1373, 661, 694, 0, 695, 0, 0, 0, 696,
	647, 0, 650, 0, 637, 673, 746, 685, 748, 685,
	863, 0, 697, 0, 700, 701, 0, 698, 681, 0,
	0, 633, 635, 636, 634, 634, 1368, 699, 702, 703,
	0, 0, 642, 642, 642, 0, 747, 749, 648, 0,
	0, 0, 642, 651,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1030
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1036
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1045
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1073
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1074
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1075
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1076
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1079
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1091
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1105
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1106
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1107
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1108
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1159
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1160
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1171
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1190
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1194
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1217
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1235
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1258
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1262
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1266
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1276
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1282
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1288
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1298
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1305
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1312
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1319
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1326
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1334
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1339
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1343
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1348
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1354
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1362
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
			}
			sqlVAL.union.val = s
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1370
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1381
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1391
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1421
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1432
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1437
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1442
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1447
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1452
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1457
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1462
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1466
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1469
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1478
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1500
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1507
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1510
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1540
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1547
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1555
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1556
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1564
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1570
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1578
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1582
		{
			sqlVAL.union.val = nil
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1588
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1592
		{
			sqlVAL.union.val = nil
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1599
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1603
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1607
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1613
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1617
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1646
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1673
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1676
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1680
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1715
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1727
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1731
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1735
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1738
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1758
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1762
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1766
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1772
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1782
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1786
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1800
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1804
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1810
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1814
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1820
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1824
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1827
		{
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1831
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1843
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1844
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1846
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1856
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1864
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1866
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1898
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1902
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1915
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1924
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1932
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1941
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1945
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1950
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1956
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1957
		{
			sqlVAL.str = ""
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1966
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return helpWith(sqllex, "CREATE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1979
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1980
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1981
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1982
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1992
		{

			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2004
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2014
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2018
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2024
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2035
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2039
		{

			sqlVAL.union.val = nil
		}
	case 257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2053
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2063
		{
			return helpWith(sqllex, "DELETE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2070
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2073
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2074
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2075
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2077
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2086
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2087
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2088
		{
			return helpWith(sqllex, "DROP")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2091
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2092
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2093
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2094
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2095
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2103
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2110
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2118
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2122
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2125
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2133
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2137
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2140
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2148
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2156
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2171
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2179
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2186
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2194
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2201
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2209
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2213
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2220
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2245
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2248
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2254
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2261
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2264
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2265
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2267
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2268
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2269
		{
			return helpWith(sqllex, "DELETE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2270
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2271
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2272
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2273
		{
			return helpWith(sqllex, "INSERT")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2274
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2276
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2277
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2279
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2282
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2283
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2285
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2286
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2294
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2295
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2299
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2313
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2320
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2324
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2328
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2338
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2344
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2350
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2354
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2364
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2372
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2376
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2379
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2403
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2407
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2410
		{
			return helpWith(sqllex, "GRANT")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2430
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2434
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2438
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2446
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2450
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2461
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2479
		{
			return helpWith(sqllex, "RESET")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2480
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2488
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2492
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2495
		{
			return helpWith(sqllex, "RESET")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2503
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2506
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2517
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2520
		{
			return helpWith(sqllex, "USE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2524
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2525
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2526
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2527
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2528
		{
			return helpWith(sqllex, "USE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2529
		{
			return unimplemented(sqllex, "set local")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2545
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2560
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2563
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2589
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2593
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2597
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2603
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2607
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2613
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2617
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2621
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2625
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2629
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2643
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2653
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2669
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2673
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2695
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2698
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2700
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2703
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2707
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2726
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2733
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2739
		{
			return unimplemented(sqllex, "set from current")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2740
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2748
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2753
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2781
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2787
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2797
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2805
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2813
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.union.val = tree.Low
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2823
		{
			sqlVAL.union.val = tree.Normal
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2827
		{
			sqlVAL.union.val = tree.High
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2838
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2842
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2846
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2851
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2855
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2867
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2868
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2869
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2870
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2871
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2872
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2874
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2875
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2876
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2877
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2878
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2879
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2880
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2881
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2882
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2883
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2884
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2885
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2886
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2887
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2889
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2891
		{
			return helpWith(sqllex, "SHOW")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2898
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2899
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2900
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2911
		{
			sqlVAL.str = "client_encoding"
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2914
		{
			sqlVAL.str = "timezone"
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2915
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2929
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2934
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2938
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2949
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2966
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2973
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2981
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2988
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2998
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3002
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3005
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3007
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3010
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3018
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3021
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3029
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3045
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3061
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3064
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3069
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3085
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3087
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3090
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3101
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3103
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3107
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3117
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3120
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3129
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3132
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3137
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3139
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3143
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3146
		{
			sqlVAL.union.val = true
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3147
		{
			sqlVAL.union.val = false
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3155
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3158
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3160
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3164
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3183
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3192
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3195
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3202
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3206
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3216
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3220
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3228
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3233
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3250
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3254
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3258
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3271
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3274
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3282
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3285
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3289
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3293
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3297
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3303
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[9].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3310
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3316
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3320
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3331
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3335
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3346
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3353
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3358
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3478
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3482
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3486
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3525
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3529
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3534
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3538
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3547
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3554
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3558
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3582
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3618
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3630
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3655
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3669
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3675
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3685
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3691
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3697
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3705
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3712
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3717
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3722
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3728
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3735
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3742
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3748
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3755
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3768
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3778
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3788
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 651:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3798
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3809
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3824
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3830
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3834
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3838
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3842
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3846
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3850
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3854
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3872
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3876
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3880
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3884
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3892
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3896
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3904
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3908
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3912
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 672:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3919
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3929
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3941
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3951
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3963
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3968
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3974
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3991
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4001
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4025
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4029
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4044
		{
			return unimplemented(sqllex, "match full")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4045
		{
			return unimplemented(sqllex, "match partial")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4046
		{
			return unimplemented(sqllex, "match simple")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4047
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4054
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4058
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4062
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4066
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4070
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4076
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4082
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4090
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4094
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4098
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4102
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4106
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4112
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4116
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4122
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4141
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 708:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4149
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4157
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4161
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4164
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4168
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4169
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4171
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4172
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4173
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4176
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4178
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4180
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4182
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4183
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4185
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4186
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4188
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4190
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4198
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4201
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4213
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4216
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4220
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4224
		{
			sqlVAL.union.val = nil
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4234
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4238
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4241
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4256
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4264
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4266
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4268
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4270
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4272
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4274
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4290
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4303
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4317
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4330
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4343
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4348
		{
			sqlVAL.union.val = true
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = false
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = false
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4362
		{
			sqlVAL.union.val = true
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4366
		{
			sqlVAL.union.val = false
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4388
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4389
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4392
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4393
		{
			sqlVAL.str = ""
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4396
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4397
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4401
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4405
		{
			sqlVAL.union.val = tree.Descending
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4415
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4422
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4426
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4432
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4436
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4440
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4444
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4448
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4450
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4454
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4458
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4464
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4474
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4478
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4483
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4484
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4487
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4488
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4496
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4499
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4509
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4518
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4521
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4529
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4532
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4536
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4537
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4538
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4554
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4557
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4562
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4572
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4575
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4577
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4580
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4584
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4589
		{
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4590
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4591
		{
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4599
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4606
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4609
		{
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4610
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4614
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4618
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4622
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4626
		{
			sqlVAL.str = ""
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4632
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4636
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4642
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4646
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4652
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4656
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4669
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4671
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4675
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4679
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4683
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4689
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4695
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4701
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4705
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 836:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4715
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4725
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4735
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4739
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4743
		{
			sqlVAL.str = ""
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.str = ""
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4759
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4763
		{
			sqlVAL.str = ""
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4769
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4773
		{
			sqlVAL.str = ""
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4778
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4779
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4791
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4798
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4805
		{
			return helpWith(sqllex, "INSERT")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4816
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4823
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4827
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4835
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4841
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4845
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4849
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4855
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4879
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4883
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4887
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4893
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4897
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4899
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4905
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4910
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4914
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 871:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4931
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4942
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4946
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4947
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4951
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4968
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4971
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4975
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5018
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5024
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5028
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5043
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5047
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5051
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5055
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5059
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5063
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5070
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5105
		{
			return helpWith(sqllex, "SELECT")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5106
		{
			return helpWith(sqllex, "VALUES")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5107
		{
			return helpWith(sqllex, "TABLE")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5129
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5142
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5156
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5168
		{
			return helpWith(sqllex, "SELECT")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5172
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5181
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5190
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5205
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5212
		{
			return helpWith(sqllex, "TABLE")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5224
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5227
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5228
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5232
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5236
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5242
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5250
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5251
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5255
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5258
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5261
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5262
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5266
		{
			sqlVAL.union.val = true
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5270
		{
			sqlVAL.union.val = false
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5274
		{
			sqlVAL.union.val = false
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5280
		{
			sqlVAL.union.val = true
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5286
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5291
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5292
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5295
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5296
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5300
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5304
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5310
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5316
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5326
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5330
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5343
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5352
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5363
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5367
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5376
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5382
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5389
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5396
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5405
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5409
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5419
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5420
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5423
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5424
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5441
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5445
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5451
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5455
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5474
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5477
		{
			return helpWith(sqllex, "VALUES")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5479
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5491
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5494
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5496
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5502
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5506
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5512
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5516
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5528
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5533
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5545
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5549
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5553
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5557
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5584
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5607
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5614
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5616
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5620
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5624
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5629
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5645
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5651
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5655
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5661
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5667
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5673
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5675
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5678
		{
			sqlVAL.union.val = nil
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5680
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5684
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5688
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5694
		{
			sqlVAL.union.val = true
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5698
		{
			sqlVAL.union.val = false
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5718
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5722
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5726
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5730
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5734
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5738
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5744
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5748
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5755
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5761
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5768
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5774
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5778
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5782
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5786
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5792
		{
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5793
		{
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5804
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5808
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5813
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5814
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5815
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5816
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5820
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5837
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5841
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5845
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5851
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5855
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5867
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5881
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5890
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5899
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5912
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5914
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5923
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5934
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5951
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5963
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5967
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5979
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5987
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5991
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5995
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6007
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6015
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6019
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6039
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6043
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6047
		{
			sqlVAL.union.val = nil
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6054
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6058
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6062
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6066
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6070
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6074
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6078
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6082
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6086
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6094
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6098
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6102
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6106
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6120
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6127
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6138
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6142
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6146
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6150
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6154
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6160
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6175
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6181
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6187
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6195
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6199
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6203
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6209
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6228
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6236
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6240
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6249
		{
			sqlVAL.union.val = true
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.union.val = false
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6255
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6259
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6263
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6267
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6271
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6275
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6279
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6283
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6287
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6292
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6298
		{
			sqlVAL.union.val = tree.Year
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6302
		{
			sqlVAL.union.val = tree.Month
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6306
		{
			sqlVAL.union.val = tree.Day
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6310
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6314
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6318
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = tree.Month
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = nil
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6358
		{
			sqlVAL.union.val = tree.Second
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6361
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6396
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6405
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6410
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6458
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6462
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6466
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6470
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6474
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6502
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6510
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6514
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6518
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6522
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6526
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6562
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6570
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6574
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6578
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6582
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6598
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6602
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6618
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6649
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6659
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6675
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6679
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6687
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6691
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6695
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6699
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6703
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6707
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6711
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6715
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6732
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6736
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6755
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6763
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6767
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6771
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6775
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6779
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6787
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6791
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6795
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6799
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6811
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6815
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6819
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6823
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6827
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6831
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6835
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6839
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6843
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6847
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6851
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6859
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6877
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6885
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6929
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6937
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6942
		{
			return unimplemented(sqllex, "func const")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6944
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6948
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6951
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6953
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6969
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6983
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6991
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7000
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7028
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7029
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7042
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7053
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7060
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7074
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7076
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7080
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7086
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7094
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7112
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7124
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7136
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7140
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7144
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7162
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7164
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7167
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7172
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7174
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7177
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7182
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7184
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7187
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7192
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7194
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7197
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7206
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7207
		{
			return unimplemented(sqllex, "treat")
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7228
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7230
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7233
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7238
		{
			return unimplemented(sqllex, "within group")
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7239
		{
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7247
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7254
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7258
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7274
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7282
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7290
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7297
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7317
		{
			sqlVAL.str = ""
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7327
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7359
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7365
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7378
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7414
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7425
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7445
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7452
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7464
		{
			sqlVAL.union.val = tree.Any
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7468
		{
			sqlVAL.union.val = tree.Some
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7472
		{
			sqlVAL.union.val = tree.All
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7477
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7478
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7479
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = tree.Div
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7482
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7483
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7484
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7485
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7486
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7487
		{
			sqlVAL.union.val = tree.LT
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7488
		{
			sqlVAL.union.val = tree.GT
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7489
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7490
		{
			sqlVAL.union.val = tree.LE
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7491
		{
			sqlVAL.union.val = tree.GE
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7492
		{
			sqlVAL.union.val = tree.NE
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7496
		{
			sqlVAL.union.val = tree.Like
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7497
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7498
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7499
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7532
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7536
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7540
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7551
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7555
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7561
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7565
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7572
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7578
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7588
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7608
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7618
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7622
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7644
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7648
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7652
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7658
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7665
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7669
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7686
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7690
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7694
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7698
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7702
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7708
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7714
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7720
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7724
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7728
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7753
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7769
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7773
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7780
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7786
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7797
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7803
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7812
		{
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7813
		{
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7817
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7827
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7836
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7840
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7844
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7852
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7862
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7872
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7879
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7921
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7933
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7937
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7948
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7959
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7969
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8067
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8082
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8096
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8100
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8104
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8135
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8145
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8163
		{
			sqlVAL.str = ""
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8169
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8173
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
