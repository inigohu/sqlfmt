// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}
func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*Scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:573
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8747

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	443, 28,
	-2, 939,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	174, 776,
	191, 776,
	205, 227,
	276, 227,
	284, 639,
	311, 227,
	320, 639,
	357, 639,
	381, 227,
	404, 639,
	-2, 0,
	-1, 76,
	205, 231,
	-2, 0,
	-1, 77,
	104, 939,
	180, 939,
	390, 939,
	391, 939,
	-2, 0,
	-1, 88,
	117, 913,
	131, 913,
	188, 913,
	216, 913,
	245, 913,
	253, 913,
	386, 913,
	-2, 900,
	-1, 116,
	122, 571,
	204, 571,
	374, 571,
	-2, 0,
	-1, 117,
	4, 941,
	21, 941,
	22, 941,
	23, 941,
	24, 941,
	25, 941,
	27, 941,
	32, 941,
	37, 941,
	38, 941,
	39, 941,
	40, 941,
	41, 941,
	42, 941,
	43, 941,
	44, 941,
	45, 941,
	46, 941,
	48, 941,
	49, 941,
	50, 941,
	51, 941,
	52, 941,
	53, 941,
	56, 941,
	57, 941,
	58, 941,
	59, 941,
	61, 941,
	62, 941,
	66, 941,
	67, 941,
	68, 941,
	69, 941,
	70, 941,
	72, 941,
	73, 941,
	74, 941,
	75, 941,
	77, 941,
	79, 941,
	80, 941,
	81, 941,
	84, 941,
	85, 941,
	93, 941,
	94, 941,
	95, 941,
	96, 941,
	97, 941,
	98, 941,
	99, 941,
	100, 941,
	102, 941,
	104, 941,
	106, 941,
	109, 941,
	110, 941,
	111, 941,
	113, 941,
	115, 941,
	116, 941,
	118, 941,
	119, 941,
	120, 941,
	121, 941,
	122, 941,
	123, 941,
	124, 941,
	125, 941,
	126, 941,
	127, 941,
	128, 941,
	136, 941,
	137, 941,
	138, 941,
	139, 941,
	140, 941,
	141, 941,
	143, 941,
	145, 941,
	149, 941,
	150, 941,
	152, 941,
	153, 941,
	155, 941,
	156, 941,
	158, 941,
	159, 941,
	160, 941,
	161, 941,
	162, 941,
	163, 941,
	164, 941,
	165, 941,
	166, 941,
	169, 941,
	170, 941,
	175, 941,
	176, 941,
	177, 941,
	180, 941,
	181, 941,
	182, 941,
	183, 941,
	184, 941,
	185, 941,
	186, 941,
	187, 941,
	189, 941,
	191, 941,
	194, 941,
	195, 941,
	196, 941,
	198, 941,
	199, 941,
	202, 941,
	203, 941,
	204, 941,
	205, 941,
	207, 941,
	208, 941,
	210, 941,
	211, 941,
	213, 941,
	214, 941,
	217, 941,
	218, 941,
	221, 941,
	223, 941,
	224, 941,
	227, 941,
	228, 941,
	229, 941,
	230, 941,
	231, 941,
	233, 941,
	234, 941,
	235, 941,
	236, 941,
	241, 941,
	242, 941,
	243, 941,
	244, 941,
	246, 941,
	247, 941,
	249, 941,
	250, 941,
	251, 941,
	254, 941,
	255, 941,
	257, 941,
	259, 941,
	260, 941,
	261, 941,
	262, 941,
	263, 941,
	264, 941,
	265, 941,
	266, 941,
	267, 941,
	269, 941,
	270, 941,
	271, 941,
	272, 941,
	273, 941,
	275, 941,
	277, 941,
	278, 941,
	279, 941,
	280, 941,
	281, 941,
	282, 941,
	283, 941,
	284, 941,
	285, 941,
	287, 941,
	288, 941,
	289, 941,
	290, 941,
	291, 941,
	293, 941,
	294, 941,
	295, 941,
	296, 941,
	297, 941,
	298, 941,
	299, 941,
	300, 941,
	302, 941,
	304, 941,
	305, 941,
	306, 941,
	307, 941,
	308, 941,
	309, 941,
	311, 941,
	312, 941,
	313, 941,
	314, 941,
	315, 941,
	316, 941,
	317, 941,
	318, 941,
	320, 941,
	321, 941,
	322, 941,
	323, 941,
	324, 941,
	325, 941,
	326, 941,
	327, 941,
	328, 941,
	329, 941,
	331, 941,
	332, 941,
	333, 941,
	334, 941,
	336, 941,
	337, 941,
	338, 941,
	339, 941,
	341, 941,
	342, 941,
	343, 941,
	344, 941,
	345, 941,
	346, 941,
	347, 941,
	348, 941,
	349, 941,
	350, 941,
	351, 941,
	352, 941,
	354, 941,
	355, 941,
	356, 941,
	358, 941,
	359, 941,
	360, 941,
	361, 941,
	362, 941,
	363, 941,
	364, 941,
	365, 941,
	366, 941,
	368, 941,
	369, 941,
	370, 941,
	371, 941,
	374, 941,
	375, 941,
	376, 941,
	377, 941,
	378, 941,
	380, 941,
	381, 941,
	382, 941,
	384, 941,
	385, 941,
	388, 941,
	389, 941,
	390, 941,
	391, 941,
	392, 941,
	394, 941,
	396, 941,
	397, 941,
	398, 941,
	399, 941,
	400, 941,
	401, 941,
	402, 941,
	404, 941,
	405, 941,
	406, 941,
	411, 941,
	412, 941,
	413, 941,
	414, 941,
	415, 941,
	416, 941,
	-2, 0,
	-1, 118,
	1, 833,
	194, 833,
	275, 833,
	282, 833,
	442, 833,
	443, 833,
	-2, 0,
	-1, 120,
	1, 833,
	442, 833,
	443, 833,
	-2, 0,
	-1, 121,
	1, 833,
	442, 833,
	443, 833,
	-2, 0,
	-1, 122,
	1, 837,
	442, 837,
	443, 837,
	-2, 0,
	-1, 146,
	117, 912,
	131, 912,
	188, 912,
	216, 912,
	245, 912,
	253, 912,
	386, 912,
	-2, 909,
	-1, 176,
	4, 948,
	5, 948,
	6, 948,
	7, 948,
	8, 948,
	9, 948,
	10, 948,
	21, 948,
	22, 948,
	23, 948,
	24, 948,
	25, 948,
	27, 948,
	32, 948,
	33, 948,
	37, 948,
	38, 948,
	39, 948,
	40, 948,
	41, 948,
	42, 948,
	43, 948,
	44, 948,
	45, 948,
	46, 948,
	48, 948,
	49, 948,
	50, 948,
	51, 948,
	52, 948,
	53, 948,
	54, 948,
	55, 948,
	56, 948,
	57, 948,
	58, 948,
	59, 948,
	61, 948,
	62, 948,
	64, 948,
	66, 948,
	67, 948,
	68, 948,
	69, 948,
	70, 948,
	72, 948,
	73, 948,
	74, 948,
	75, 948,
	77, 948,
	79, 948,
	80, 948,
	81, 948,
	83, 948,
	84, 948,
	85, 948,
	86, 948,
	87, 948,
	88, 948,
	89, 948,
	90, 948,
	91, 948,
	92, 948,
	93, 948,
	94, 948,
	95, 948,
	96, 948,
	97, 948,
	98, 948,
	99, 948,
	100, 948,
	101, 948,
	102, 948,
	104, 948,
	106, 948,
	109, 948,
	110, 948,
	111, 948,
	113, 948,
	115, 948,
	116, 948,
	118, 948,
	119, 948,
	120, 948,
	121, 948,
	122, 948,
	123, 948,
	124, 948,
	125, 948,
	126, 948,
	127, 948,
	128, 948,
	129, 948,
	130, 948,
	136, 948,
	137, 948,
	138, 948,
	139, 948,
	140, 948,
	141, 948,
	143, 948,
	145, 948,
	148, 948,
	149, 948,
	150, 948,
	152, 948,
	153, 948,
	155, 948,
	156, 948,
	158, 948,
	159, 948,
	160, 948,
	161, 948,
	162, 948,
	163, 948,
	164, 948,
	165, 948,
	166, 948,
	167, 948,
	169, 948,
	170, 948,
	175, 948,
	176, 948,
	177, 948,
	179, 948,
	180, 948,
	181, 948,
	182, 948,
	183, 948,
	184, 948,
	185, 948,
	186, 948,
	187, 948,
	189, 948,
	191, 948,
	192, 948,
	193, 948,
	194, 948,
	195, 948,
	196, 948,
	197, 948,
	198, 948,
	199, 948,
	202, 948,
	203, 948,
	204, 948,
	205, 948,
	207, 948,
	208, 948,
	210, 948,
	211, 948,
	212, 948,
	213, 948,
	214, 948,
	215, 948,
	217, 948,
	218, 948,
	221, 948,
	223, 948,
	224, 948,
	225, 948,
	226, 948,
	227, 948,
	228, 948,
	229, 948,
	230, 948,
	231, 948,
	232, 948,
	233, 948,
	234, 948,
	235, 948,
	236, 948,
	237, 948,
	239, 948,
	240, 948,
	241, 948,
	242, 948,
	243, 948,
	244, 948,
	246, 948,
	247, 948,
	250, 948,
	251, 948,
	254, 948,
	255, 948,
	256, 948,
	257, 948,
	258, 948,
	259, 948,
	260, 948,
	261, 948,
	262, 948,
	263, 948,
	264, 948,
	265, 948,
	266, 948,
	267, 948,
	269, 948,
	270, 948,
	271, 948,
	272, 948,
	273, 948,
	275, 948,
	277, 948,
	278, 948,
	279, 948,
	280, 948,
	281, 948,
	282, 948,
	283, 948,
	284, 948,
	285, 948,
	287, 948,
	288, 948,
	289, 948,
	290, 948,
	291, 948,
	293, 948,
	294, 948,
	295, 948,
	296, 948,
	297, 948,
	298, 948,
	299, 948,
	300, 948,
	302, 948,
	303, 948,
	304, 948,
	305, 948,
	306, 948,
	307, 948,
	308, 948,
	309, 948,
	311, 948,
	312, 948,
	313, 948,
	314, 948,
	315, 948,
	316, 948,
	317, 948,
	318, 948,
	320, 948,
	321, 948,
	322, 948,
	323, 948,
	324, 948,
	325, 948,
	326, 948,
	327, 948,
	328, 948,
	329, 948,
	330, 948,
	331, 948,
	332, 948,
	333, 948,
	334, 948,
	335, 948,
	336, 948,
	337, 948,
	338, 948,
	339, 948,
	341, 948,
	342, 948,
	343, 948,
	344, 948,
	345, 948,
	346, 948,
	347, 948,
	348, 948,
	349, 948,
	350, 948,
	351, 948,
	352, 948,
	354, 948,
	355, 948,
	356, 948,
	358, 948,
	359, 948,
	360, 948,
	361, 948,
	362, 948,
	363, 948,
	364, 948,
	365, 948,
	366, 948,
	368, 948,
	369, 948,
	370, 948,
	371, 948,
	374, 948,
	375, 948,
	376, 948,
	377, 948,
	378, 948,
	379, 948,
	380, 948,
	381, 948,
	382, 948,
	384, 948,
	385, 948,
	387, 948,
	388, 948,
	389, 948,
	390, 948,
	391, 948,
	392, 948,
	393, 948,
	394, 948,
	396, 948,
	397, 948,
	398, 948,
	399, 948,
	400, 948,
	401, 948,
	402, 948,
	404, 948,
	405, 948,
	406, 948,
	411, 948,
	412, 948,
	413, 948,
	414, 948,
	415, 948,
	416, 948,
	417, 948,
	425, 948,
	430, 948,
	431, 948,
	432, 948,
	439, 948,
	445, 948,
	-2, 0,
	-1, 179,
	1, 28,
	443, 28,
	-2, 939,
	-1, 525,
	147, 1599,
	372, 1599,
	422, 1599,
	441, 1599,
	-2, 0,
	-1, 526,
	147, 1673,
	372, 1673,
	422, 1673,
	441, 1673,
	-2, 0,
	-1, 527,
	147, 1589,
	372, 1589,
	422, 1589,
	441, 1589,
	-2, 0,
	-1, 529,
	147, 1752,
	372, 1752,
	422, 1752,
	441, 1752,
	-2, 0,
	-1, 531,
	147, 1781,
	372, 1781,
	422, 1781,
	441, 1781,
	-2, 0,
	-1, 538,
	147, 1679,
	372, 1679,
	422, 1679,
	441, 1679,
	-2, 448,
	-1, 555,
	441, 1549,
	444, 1549,
	-2, 614,
	-1, 556,
	441, 1551,
	444, 1551,
	-2, 615,
	-1, 557,
	441, 1550,
	444, 1550,
	-2, 616,
	-1, 558,
	444, 1501,
	-2, 617,
	-1, 700,
	1, 544,
	438, 544,
	440, 544,
	442, 544,
	443, 544,
	-2, 0,
	-1, 701,
	1, 613,
	144, 613,
	438, 613,
	440, 613,
	442, 613,
	443, 613,
	-2, 0,
	-1, 707,
	1, 558,
	438, 558,
	440, 558,
	442, 558,
	443, 558,
	-2, 0,
	-1, 709,
	1, 562,
	438, 562,
	440, 562,
	442, 562,
	443, 562,
	-2, 0,
	-1, 711,
	1, 572,
	438, 572,
	440, 572,
	442, 572,
	443, 572,
	-2, 0,
	-1, 712,
	1, 578,
	438, 578,
	440, 578,
	442, 578,
	443, 578,
	-2, 0,
	-1, 713,
	1, 581,
	438, 581,
	440, 581,
	442, 581,
	443, 581,
	-2, 0,
	-1, 717,
	1, 595,
	438, 595,
	440, 595,
	442, 595,
	443, 595,
	-2, 0,
	-1, 718,
	1, 597,
	438, 597,
	440, 597,
	442, 597,
	443, 597,
	-2, 0,
	-1, 761,
	131, 952,
	216, 952,
	245, 952,
	-2, 909,
	-1, 776,
	131, 951,
	216, 951,
	245, 951,
	-2, 909,
	-1, 798,
	439, 1861,
	-2, 1248,
	-1, 799,
	439, 1862,
	-2, 1249,
	-1, 829,
	439, 1543,
	-2, 1534,
	-1, 835,
	5, 1076,
	-2, 1580,
	-1, 836,
	5, 1077,
	-2, 1584,
	-1, 837,
	5, 1078,
	-2, 1583,
	-1, 838,
	5, 1079,
	-2, 1778,
	-1, 839,
	5, 1080,
	-2, 1681,
	-1, 840,
	5, 1081,
	-2, 1744,
	-1, 841,
	5, 1082,
	-2, 1746,
	-1, 842,
	5, 1083,
	-2, 1757,
	-1, 843,
	5, 1084,
	-2, 1747,
	-1, 844,
	5, 1085,
	-2, 1748,
	-1, 845,
	5, 1086,
	-2, 1579,
	-1, 846,
	5, 1087,
	-2, 1792,
	-1, 847,
	5, 1088,
	-2, 1648,
	-1, 848,
	5, 1089,
	-2, 1688,
	-1, 849,
	5, 1090,
	-2, 1689,
	-1, 850,
	5, 1091,
	-2, 1652,
	-1, 851,
	5, 1092,
	439, 1558,
	-2, 1549,
	-1, 852,
	5, 1145,
	439, 1145,
	-2, 1827,
	-1, 857,
	439, 1559,
	-2, 1550,
	-1, 859,
	5, 1096,
	-2, 1825,
	-1, 860,
	5, 1097,
	-2, 1826,
	-1, 861,
	5, 1098,
	-2, 1651,
	-1, 862,
	5, 1099,
	-2, 1838,
	-1, 863,
	5, 1100,
	-2, 1653,
	-1, 864,
	5, 1101,
	-2, 1654,
	-1, 865,
	5, 1102,
	-2, 1655,
	-1, 866,
	5, 1103,
	-2, 1807,
	-1, 867,
	5, 1104,
	-2, 1836,
	-1, 868,
	5, 1105,
	-2, 1633,
	-1, 869,
	5, 1106,
	-2, 1634,
	-1, 870,
	5, 1120,
	-2, 1819,
	-1, 872,
	5, 1095,
	-2, 1815,
	-1, 873,
	5, 1095,
	-2, 1814,
	-1, 874,
	5, 1095,
	-2, 1831,
	-1, 875,
	5, 1112,
	-2, 1809,
	-1, 876,
	5, 1113,
	-2, 1581,
	-1, 877,
	5, 1123,
	-2, 1808,
	-1, 878,
	5, 1125,
	-2, 1846,
	-1, 880,
	5, 1136,
	-2, 1609,
	-1, 881,
	5, 1137,
	-2, 1840,
	-1, 882,
	5, 1139,
	-2, 1841,
	-1, 883,
	5, 1141,
	-2, 1842,
	-1, 884,
	5, 1143,
	-2, 1779,
	-1, 885,
	5, 1063,
	-2, 1661,
	-1, 886,
	5, 1064,
	-2, 1662,
	-1, 906,
	5, 1131,
	-2, 1767,
	-1, 924,
	5, 1130,
	-2, 1847,
	-1, 925,
	5, 1132,
	405, 1132,
	-2, 1810,
	-1, 926,
	5, 1133,
	405, 1133,
	-2, 1811,
	-1, 971,
	439, 1558,
	-2, 1549,
	-1, 1002,
	147, 1781,
	372, 1781,
	422, 1781,
	441, 1781,
	-2, 0,
	-1, 1003,
	194, 845,
	275, 845,
	282, 845,
	-2, 436,
	-1, 1121,
	293, 1531,
	432, 1531,
	-2, 1530,
	-1, 1177,
	284, 639,
	404, 639,
	-2, 226,
	-1, 1196,
	265, 937,
	-2, 749,
	-1, 1205,
	248, 1553,
	-2, 0,
	-1, 1268,
	1, 328,
	438, 328,
	440, 328,
	442, 328,
	443, 328,
	-2, 911,
	-1, 1271,
	4, 1845,
	11, 1845,
	12, 1845,
	14, 1845,
	15, 1845,
	16, 1845,
	17, 1845,
	18, 1845,
	19, 1845,
	21, 1845,
	22, 1845,
	23, 1845,
	24, 1845,
	25, 1845,
	27, 1845,
	30, 1845,
	32, 1845,
	34, 1845,
	37, 1845,
	38, 1845,
	39, 1845,
	40, 1845,
	41, 1845,
	42, 1845,
	43, 1845,
	44, 1845,
	45, 1845,
	46, 1845,
	48, 1845,
	49, 1845,
	50, 1845,
	51, 1845,
	52, 1845,
	53, 1845,
	56, 1845,
	57, 1845,
	58, 1845,
	59, 1845,
	61, 1845,
	62, 1845,
	63, 1845,
	66, 1845,
	67, 1845,
	68, 1845,
	69, 1845,
	70, 1845,
	71, 1845,
	72, 1845,
	73, 1845,
	74, 1845,
	75, 1845,
	77, 1845,
	78, 1845,
	79, 1845,
	80, 1845,
	81, 1845,
	83, 1845,
	84, 1845,
	85, 1845,
	93, 1845,
	94, 1845,
	95, 1845,
	96, 1845,
	97, 1845,
	98, 1845,
	99, 1845,
	100, 1845,
	102, 1845,
	104, 1845,
	106, 1845,
	109, 1845,
	110, 1845,
	111, 1845,
	113, 1845,
	115, 1845,
	116, 1845,
	118, 1845,
	119, 1845,
	120, 1845,
	121, 1845,
	122, 1845,
	123, 1845,
	124, 1845,
	125, 1845,
	126, 1845,
	127, 1845,
	128, 1845,
	132, 1845,
	133, 1845,
	134, 1845,
	135, 1845,
	136, 1845,
	137, 1845,
	138, 1845,
	139, 1845,
	140, 1845,
	141, 1845,
	142, 1845,
	143, 1845,
	145, 1845,
	148, 1845,
	149, 1845,
	150, 1845,
	152, 1845,
	153, 1845,
	155, 1845,
	156, 1845,
	158, 1845,
	159, 1845,
	160, 1845,
	161, 1845,
	162, 1845,
	163, 1845,
	164, 1845,
	165, 1845,
	166, 1845,
	167, 1845,
	168, 1845,
	169, 1845,
	170, 1845,
	171, 1845,
	172, 1845,
	173, 1845,
	175, 1845,
	176, 1845,
	177, 1845,
	179, 1845,
	180, 1845,
	181, 1845,
	182, 1845,
	183, 1845,
	184, 1845,
	185, 1845,
	186, 1845,
	187, 1845,
	189, 1845,
	191, 1845,
	192, 1845,
	193, 1845,
	194, 1845,
	195, 1845,
	196, 1845,
	197, 1845,
	198, 1845,
	199, 1845,
	200, 1845,
	201, 1845,
	202, 1845,
	203, 1845,
	204, 1845,
	205, 1845,
	207, 1845,
	208, 1845,
	210, 1845,
	211, 1845,
	212, 1845,
	213, 1845,
	214, 1845,
	215, 1845,
	217, 1845,
	218, 1845,
	221, 1845,
	222, 1845,
	223, 1845,
	224, 1845,
	227, 1845,
	228, 1845,
	229, 1845,
	230, 1845,
	231, 1845,
	232, 1845,
	233, 1845,
	234, 1845,
	235, 1845,
	236, 1845,
	239, 1845,
	241, 1845,
	242, 1845,
	243, 1845,
	244, 1845,
	246, 1845,
	247, 1845,
	250, 1845,
	251, 1845,
	252, 1845,
	254, 1845,
	255, 1845,
	257, 1845,
	259, 1845,
	260, 1845,
	261, 1845,
	262, 1845,
	263, 1845,
	264, 1845,
	265, 1845,
	266, 1845,
	267, 1845,
	269, 1845,
	270, 1845,
	271, 1845,
	272, 1845,
	273, 1845,
	275, 1845,
	277, 1845,
	278, 1845,
	279, 1845,
	280, 1845,
	281, 1845,
	282, 1845,
	283, 1845,
	284, 1845,
	285, 1845,
	287, 1845,
	288, 1845,
	289, 1845,
	290, 1845,
	291, 1845,
	292, 1845,
	293, 1845,
	294, 1845,
	295, 1845,
	296, 1845,
	297, 1845,
	298, 1845,
	299, 1845,
	300, 1845,
	302, 1845,
	303, 1845,
	304, 1845,
	305, 1845,
	306, 1845,
	307, 1845,
	308, 1845,
	309, 1845,
	310, 1845,
	311, 1845,
	312, 1845,
	313, 1845,
	314, 1845,
	315, 1845,
	316, 1845,
	317, 1845,
	318, 1845,
	320, 1845,
	321, 1845,
	322, 1845,
	323, 1845,
	324, 1845,
	325, 1845,
	326, 1845,
	327, 1845,
	328, 1845,
	329, 1845,
	331, 1845,
	332, 1845,
	333, 1845,
	334, 1845,
	335, 1845,
	336, 1845,
	337, 1845,
	338, 1845,
	339, 1845,
	341, 1845,
	342, 1845,
	343, 1845,
	344, 1845,
	345, 1845,
	346, 1845,
	347, 1845,
	348, 1845,
	349, 1845,
	350, 1845,
	351, 1845,
	352, 1845,
	354, 1845,
	355, 1845,
	356, 1845,
	358, 1845,
	359, 1845,
	360, 1845,
	361, 1845,
	362, 1845,
	363, 1845,
	364, 1845,
	365, 1845,
	366, 1845,
	368, 1845,
	369, 1845,
	370, 1845,
	371, 1845,
	374, 1845,
	375, 1845,
	376, 1845,
	377, 1845,
	378, 1845,
	380, 1845,
	381, 1845,
	382, 1845,
	384, 1845,
	385, 1845,
	388, 1845,
	389, 1845,
	390, 1845,
	391, 1845,
	392, 1845,
	394, 1845,
	396, 1845,
	397, 1845,
	398, 1845,
	399, 1845,
	400, 1845,
	401, 1845,
	402, 1845,
	404, 1845,
	405, 1845,
	406, 1845,
	411, 1845,
	412, 1845,
	413, 1845,
	414, 1845,
	415, 1845,
	416, 1845,
	417, 1845,
	418, 1845,
	420, 1845,
	421, 1845,
	422, 1845,
	423, 1845,
	424, 1845,
	425, 1845,
	427, 1845,
	428, 1845,
	429, 1845,
	430, 1845,
	431, 1845,
	432, 1845,
	433, 1845,
	434, 1845,
	435, 1845,
	437, 1845,
	440, 1845,
	441, 1845,
	444, 1845,
	445, 1845,
	-2, 0,
	-1, 1274,
	147, 1752,
	372, 1752,
	422, 1752,
	441, 1752,
	-2, 0,
	-1, 1341,
	1, 1799,
	438, 1799,
	440, 1799,
	441, 1799,
	442, 1799,
	443, 1799,
	-2, 593,
	-1, 1342,
	1, 1750,
	438, 1750,
	440, 1750,
	441, 1750,
	442, 1750,
	443, 1750,
	-2, 594,
	-1, 1355,
	194, 845,
	275, 845,
	282, 845,
	-2, 840,
	-1, 1360,
	131, 951,
	216, 951,
	245, 951,
	-2, 909,
	-1, 1453,
	117, 913,
	131, 913,
	188, 913,
	216, 913,
	245, 913,
	253, 913,
	386, 913,
	-2, 1303,
	-1, 1504,
	440, 1436,
	-2, 0,
	-1, 1537,
	117, 913,
	131, 913,
	188, 913,
	216, 913,
	245, 913,
	253, 913,
	386, 913,
	-2, 1021,
	-1, 1591,
	439, 1135,
	-2, 1123,
	-1, 1630,
	194, 845,
	275, 845,
	282, 845,
	-2, 438,
	-1, 1879,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1181,
	-1, 1880,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1182,
	-1, 1881,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1183,
	-1, 1882,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1184,
	-1, 1883,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1185,
	-1, 1884,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1186,
	-1, 1885,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1187,
	-1, 1886,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1188,
	-1, 1898,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1200,
	-1, 1899,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1201,
	-1, 1900,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	200, 0,
	201, 0,
	420, 0,
	421, 0,
	422, 0,
	423, 0,
	424, 0,
	-2, 1202,
	-1, 1903,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1207,
	-1, 1909,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1211,
	-1, 1911,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1219,
	-1, 1912,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1220,
	-1, 1913,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1221,
	-1, 1914,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1222,
	-1, 2005,
	5, 1092,
	147, 1447,
	439, 1558,
	-2, 1549,
	-1, 2006,
	147, 1448,
	-2, 1803,
	-1, 2007,
	147, 1449,
	-2, 1678,
	-1, 2008,
	147, 1450,
	-2, 1610,
	-1, 2009,
	147, 1451,
	-2, 1643,
	-1, 2010,
	147, 1452,
	-2, 1677,
	-1, 2011,
	147, 1453,
	-2, 1743,
	-1, 2079,
	1, 1022,
	83, 1022,
	117, 1022,
	131, 1022,
	144, 1022,
	148, 1022,
	154, 1022,
	157, 1022,
	179, 1022,
	188, 1022,
	197, 1022,
	212, 1022,
	216, 1022,
	232, 1022,
	245, 1022,
	248, 1022,
	253, 1022,
	301, 1022,
	303, 1022,
	386, 1022,
	395, 1022,
	408, 1022,
	409, 1022,
	419, 1022,
	438, 1022,
	440, 1022,
	442, 1022,
	443, 1022,
	444, 1022,
	-2, 1021,
	-1, 2084,
	439, 1535,
	-2, 1547,
	-1, 2103,
	439, 1134,
	-2, 1124,
	-1, 2311,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1209,
	-1, 2312,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1213,
	-1, 2318,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1215,
	-1, 2492,
	194, 845,
	275, 845,
	282, 845,
	-2, 435,
	-1, 2563,
	440, 1506,
	444, 1506,
	-2, 1522,
	-1, 2573,
	265, 937,
	-2, 749,
	-1, 2649,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1217,
	-1, 2656,
	192, 0,
	193, 0,
	239, 0,
	-2, 1236,
	-1, 2717,
	14, 0,
	15, 0,
	16, 0,
	420, 0,
	421, 0,
	422, 0,
	-2, 1267,
	-1, 2718,
	14, 0,
	15, 0,
	16, 0,
	420, 0,
	421, 0,
	422, 0,
	-2, 1268,
	-1, 2719,
	14, 0,
	15, 0,
	16, 0,
	420, 0,
	421, 0,
	422, 0,
	-2, 1269,
	-1, 2723,
	14, 0,
	15, 0,
	16, 0,
	420, 0,
	421, 0,
	422, 0,
	-2, 1273,
	-1, 2724,
	14, 0,
	15, 0,
	16, 0,
	420, 0,
	421, 0,
	422, 0,
	-2, 1274,
	-1, 2725,
	14, 0,
	15, 0,
	16, 0,
	420, 0,
	421, 0,
	422, 0,
	-2, 1275,
	-1, 2767,
	439, 1536,
	-2, 1548,
	-1, 2884,
	192, 0,
	193, 0,
	239, 0,
	-2, 1237,
	-1, 2887,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1240,
	-1, 2888,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1242,
	-1, 3027,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1241,
	-1, 3028,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	167, 0,
	168, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1243,
	-1, 3038,
	192, 0,
	-2, 1276,
	-1, 3123,
	192, 0,
	-2, 1277,
	-1, 3219,
	40, 0,
	167, 0,
	215, 0,
	335, 0,
	417, 0,
	425, 0,
	-2, 1806,
}

const sqlPrivate = 57344

const sqlLast = 65165

var sqlAct = [...]int{

	857, 3296, 3218, 3066, 3228, 3193, 2985, 3286, 3088, 1549,
	2227, 3196, 3182, 3229, 2235, 2687, 3230, 3127, 3194, 2996,
	2785, 1866, 3217, 1794, 2830, 786, 3055, 1125, 2500, 3019,
	2835, 2943, 1926, 1561, 2339, 2561, 1368, 2840, 2786, 3042,
	205, 2590, 205, 205, 975, 777, 205, 205, 205, 205,
	205, 2582, 814, 205, 1260, 536, 2040, 2267, 2304, 2595,
	2071, 557, 2205, 2224, 2337, 2584, 1562, 1026, 2458, 1530,
	1532, 2067, 2202, 1540, 2919, 2469, 964, 1118, 2420, 205,
	1755, 2258, 651, 557, 2131, 2260, 2266, 1511, 2434, 1744,
	2236, 1745, 1673, 2445, 1682, 2133, 2072, 3128, 2185, 5,
	2740, 1752, 1957, 2419, 1939, 1859, 1137, 1706, 1863, 1461,
	200, 856, 2300, 1014, 1661, 785, 139, 2474, 2594, 1659,
	1773, 1256, 87, 3089, 853, 1355, 1134, 1700, 1969, 2124,
	2203, 1923, 1512, 2562, 1263, 2186, 2163, 1269, 1127, 1243,
	1253, 774, 1741, 2229, 2074, 2037, 1190, 2270, 33, 202,
	1005, 1474, 504, 1951, 1521, 959, 2070, 558, 559, 2059,
	938, 1940, 1442, 2162, 2001, 1369, 2044, 1367, 201, 146,
	520, 205, 205, 1451, 553, 530, 1761, 646, 1267, 956,
	628, 1145, 776, 1220, 597, 813, 488, 507, 147, 961,
	1672, 512, 936, 139, 692, 1373, 1354, 1202, 2756, 123,
	515, 2757, 1795, 2335, 3323, 59, 1775, 1531, 2053, 1775,
	562, 2187, 2228, 2644, 1381, 1382, 60, 118, 1775, 3314,
	3313, 3295, 3282, 2053, 2053, 1713, 2957, 3280, 781, 565,
	64, 2957, 562, 3248, 3247, 3244, 1787, 2053, 2053, 3245,
	1384, 2602, 1381, 1382, 781, 40, 120, 2568, 2601, 3241,
	3238, 565, 953, 3242, 1713, 3215, 1709, 660, 39, 1713,
	70, 3214, 2490, 829, 2354, 1713, 1383, 2053, 1384, 3211,
	2355, 782, 879, 1787, 1403, 3210, 2046, 3177, 3168, 1787,
	42, 2096, 2957, 3167, 43, 992, 942, 2957, 943, 76,
	967, 2180, 121, 3178, 1383, 139, 3161, 41, 86, 2093,
	1713, 3155, 77, 44, 3153, 2957, 3125, 3111, 2957, 762,
	2096, 1713, 3112, 3108, 3080, 939, 939, 2957, 1713, 2880,
	3079, 3072, 3071, 3048, 1713, 1713, 2957, 1713, 761, 45,
	3029, 1787, 2743, 1713, 2096, 1406, 1407, 1408, 1409, 78,
	769, 2187, 3010, 2981, 2975, 1389, 2614, 2053, 2053, 2956,
	2886, 2854, 2846, 2957, 2096, 2847, 2847, 2762, 2752, 2746,
	1166, 2763, 2753, 2053, 940, 2680, 2743, 2621, 2431, 1713,
	2045, 2622, 2053, 1389, 1411, 1412, 1413, 2387, 2386, 2382,
	2367, 2053, 2053, 2053, 2368, 2356, 2256, 987, 176, 2053,
	1791, 812, 2232, 2109, 2095, 2090, 2976, 2053, 2096, 2053,
	176, 1713, 1411, 1412, 1413, 1381, 1382, 2086, 2052, 1790,
	2622, 1713, 2053, 1791, 2177, 2122, 1633, 2614, 2211, 2053,
	2303, 1712, 2120, 1507, 1144, 1404, 178, 179, 2603, 944,
	941, 1384, 768, 1992, 767, 2338, 766, 765, 178, 764,
	760, 759, 970, 758, 79, 2392, 2393, 2604, 2410, 2411,
	2412, 46, 1776, 1404, 757, 1776, 756, 1383, 755, 988,
	754, 753, 1381, 1382, 1776, 1403, 752, 751, 750, 177,
	749, 1652, 690, 689, 49, 145, 82, 688, 83, 170,
	47, 177, 687, 686, 122, 685, 684, 171, 1384, 683,
	48, 170, 682, 205, 681, 1410, 680, 176, 1154, 171,
	679, 678, 205, 677, 676, 2407, 675, 674, 148, 52,
	2653, 2934, 116, 1405, 1383, 673, 672, 671, 670, 669,
	148, 119, 1165, 205, 668, 667, 1406, 1407, 1408, 1409,
	205, 666, 659, 658, 619, 178, 1389, 618, 2601, 2392,
	2393, 1405, 3235, 578, 1713, 577, 205, 1029, 205, 205,
	1130, 205, 1029, 205, 576, 568, 567, 2898, 117, 988,
	1013, 205, 205, 566, 1018, 1411, 1412, 1413, 543, 176,
	149, 1148, 542, 2045, 2150, 1160, 2398, 541, 177, 540,
	2217, 524, 988, 198, 985, 197, 205, 196, 170, 195,
	194, 193, 192, 1389, 191, 2848, 171, 1783, 2760, 205,
	1774, 1130, 1130, 205, 205, 190, 205, 178, 189, 1839,
	176, 188, 855, 187, 186, 185, 1404, 148, 205, 184,
	4, 183, 1411, 1412, 1413, 1954, 205, 182, 1381, 1382,
	1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 205,
	205, 205, 205, 205, 1130, 1130, 181, 180, 178, 1130,
	177, 205, 1130, 205, 1384, 2472, 2408, 1003, 2361, 1121,
	1393, 1385, 1386, 1387, 1388, 1390, 1391, 1452, 2350, 2286,
	2398, 2190, 1533, 1404, 1140, 2078, 2087, 176, 1657, 1547,
	1383, 1468, 784, 176, 1123, 1990, 1410, 1955, 1988, 148,
	1150, 177, 1020, 1986, 1380, 1984, 977, 1130, 3216, 1264,
	3151, 170, 1797, 1027, 1405, 1000, 3118, 3011, 1138, 171,
	562, 1463, 2936, 1203, 1203, 178, 3065, 205, 1147, 1146,
	1153, 178, 1158, 2918, 1164, 1022, 3004, 1115, 1120, 565,
	2231, 205, 1207, 2917, 3115, 1196, 1199, 1159, 2905, 3113,
	2904, 2903, 2902, 2896, 2409, 2218, 205, 2895, 2894, 1272,
	2408, 2893, 2822, 2775, 1956, 1953, 2774, 2772, 177, 1389,
	2766, 1405, 2737, 2736, 177, 139, 2735, 1796, 170, 1257,
	2664, 782, 2660, 2624, 170, 2467, 171, 2427, 2418, 1247,
	1250, 2391, 171, 2388, 2385, 2383, 1276, 1270, 1411, 1412,
	1413, 966, 2366, 2344, 2343, 2336, 1360, 148, 1463, 2257,
	2079, 1204, 1962, 148, 1749, 1279, 1380, 1361, 952, 1379,
	647, 3321, 1282, 3294, 1718, 176, 1716, 1450, 2392, 2393,
	3293, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391,
	3249, 1293, 976, 1464, 2689, 59, 3206, 649, 2409, 1404,
	1464, 3204, 1462, 3149, 3147, 1958, 60, 3144, 3143, 3139,
	3136, 3107, 3106, 178, 2404, 2405, 2406, 1929, 3061, 3040,
	64, 2403, 2401, 2402, 2394, 2395, 2396, 2397, 2399, 2400,
	3130, 1991, 3016, 2098, 3015, 2994, 2991, 2987, 1394, 1392,
	1393, 1385, 1386, 1387, 1388, 1390, 1391, 2933, 1286, 2916,
	70, 2867, 176, 1653, 2164, 2864, 177, 811, 2801, 2800,
	1381, 1382, 2299, 1359, 2216, 2789, 170, 2788, 2748, 2655,
	1353, 2615, 2576, 2550, 171, 2531, 1358, 3003, 1366, 76,
	2510, 2509, 2486, 2392, 2393, 2484, 1384, 1405, 86, 1935,
	178, 2430, 77, 1356, 2365, 148, 2364, 2349, 205, 2327,
	2199, 1475, 1952, 1472, 782, 2105, 2104, 2082, 2064, 2398,
	2051, 1982, 1383, 1446, 1546, 762, 2401, 2402, 2394, 2395,
	2396, 2397, 2399, 2400, 205, 1362, 2101, 2482, 1510, 78,
	2392, 2393, 1506, 177, 761, 1376, 1377, 205, 1029, 205,
	205, 1505, 1504, 170, 1509, 1503, 1130, 557, 205, 205,
	1502, 171, 557, 205, 2392, 2393, 1501, 1558, 205, 176,
	1643, 1642, 1625, 1500, 1652, 1649, 1499, 1498, 1518, 1496,
	1495, 1494, 148, 796, 1493, 1492, 1491, 1490, 1489, 1488,
	1487, 1029, 1486, 1485, 1484, 1476, 1477, 1465, 1447, 2408,
	2407, 1389, 1541, 1445, 1515, 1516, 1440, 178, 2510, 1555,
	1655, 2392, 2393, 1568, 999, 1392, 1393, 1385, 1386, 1387,
	1388, 1390, 1391, 1627, 2398, 1529, 1628, 990, 982, 1798,
	1411, 1412, 1413, 2935, 2890, 1648, 1381, 1382, 2771, 2755,
	967, 139, 967, 2751, 79, 2353, 968, 2065, 1443, 1542,
	177, 1015, 939, 782, 1652, 3148, 1381, 1382, 2392, 2393,
	170, 1652, 1384, 1652, 2585, 3009, 2977, 1646, 171, 2451,
	1017, 2398, 1533, 2758, 1552, 145, 82, 2617, 83, 1677,
	2616, 1404, 1384, 2187, 1639, 2534, 1538, 2409, 1383, 148,
	1556, 1351, 2372, 1989, 2166, 2398, 1987, 176, 1630, 1528,
	1508, 1985, 2371, 1983, 1550, 1491, 562, 1491, 1383, 650,
	2370, 562, 116, 1301, 1130, 205, 1667, 3116, 1535, 1651,
	1016, 1029, 3114, 3064, 2369, 565, 1481, 1479, 2309, 2152,
	565, 1557, 1482, 1480, 1012, 178, 1624, 2799, 1470, 747,
	1795, 1746, 2398, 2630, 2545, 2023, 1559, 1658, 1695, 2359,
	3043, 2408, 3297, 2228, 2691, 1594, 1970, 2103, 117, 205,
	205, 1497, 3236, 1478, 2392, 2393, 205, 1389, 1644, 1405,
	149, 1662, 2559, 1954, 1738, 1663, 205, 748, 177, 1750,
	3246, 3243, 2781, 1181, 1647, 205, 2597, 205, 170, 205,
	1381, 1382, 970, 205, 970, 3190, 171, 1697, 1290, 2831,
	1699, 2264, 3272, 1703, 3271, 205, 2402, 2394, 2395, 2396,
	2397, 2399, 2400, 1554, 2967, 951, 1384, 648, 3237, 1681,
	3160, 1449, 2408, 2494, 1169, 2110, 741, 1179, 743, 1325,
	1726, 609, 739, 1593, 1707, 1955, 737, 1734, 1829, 2409,
	3318, 3086, 1383, 734, 1130, 205, 1130, 2099, 1710, 1640,
	3083, 1130, 544, 3082, 1827, 205, 205, 3081, 2815, 1664,
	2812, 2811, 2778, 1767, 562, 1130, 1130, 614, 205, 1758,
	1737, 1666, 1147, 1146, 205, 2777, 1017, 1714, 780, 557,
	205, 2135, 205, 565, 205, 2348, 205, 2347, 205, 1385,
	1386, 1387, 1388, 1390, 1391, 2398, 1711, 1180, 205, 608,
	205, 1702, 1956, 1953, 2346, 1799, 2345, 2313, 2126, 205,
	2409, 1324, 2394, 2395, 2396, 2397, 2399, 2400, 1674, 2804,
	2126, 1389, 2182, 1808, 1668, 2483, 1016, 2176, 205, 1728,
	2173, 2125, 1727, 2154, 205, 2092, 1910, 1765, 1778, 1357,
	1288, 1780, 1143, 615, 1782, 550, 1671, 2818, 1785, 779,
	2225, 1017, 1565, 2984, 1029, 1981, 2403, 2401, 2402, 2394,
	2395, 2396, 2397, 2399, 2400, 1763, 782, 2138, 1760, 1675,
	1676, 1980, 3159, 1836, 2533, 2408, 1846, 1979, 1978, 1868,
	1793, 1800, 1270, 500, 3024, 2396, 2397, 2399, 2400, 1843,
	790, 2631, 1213, 1958, 1212, 1232, 1653, 1650, 1175, 1806,
	1807, 1016, 1191, 3068, 1568, 1568, 1662, 495, 2153, 1211,
	1663, 1210, 1669, 1837, 781, 1283, 731, 1804, 1864, 1865,
	1000, 1925, 1792, 2085, 552, 780, 2145, 1921, 562, 2963,
	2394, 2395, 2396, 2397, 2399, 2400, 3208, 1542, 1189, 1029,
	607, 2528, 606, 1838, 1970, 2144, 1811, 565, 1925, 1919,
	1764, 2791, 775, 1818, 2288, 1385, 1386, 1387, 1388, 1390,
	1391, 980, 1933, 2409, 2633, 2170, 2632, 1931, 1302, 1320,
	610, 2283, 1841, 1941, 1942, 1188, 1653, 2164, 205, 1844,
	1391, 1323, 2400, 1653, 2164, 1653, 2164, 1364, 3271, 1662,
	1952, 1941, 1967, 1663, 1664, 2137, 779, 998, 1840, 1842,
	1958, 2671, 1029, 205, 1845, 1350, 1666, 2592, 1284, 1336,
	1867, 2674, 205, 762, 546, 205, 762, 762, 1029, 665,
	1321, 2301, 2302, 2000, 979, 2004, 2004, 2014, 2016, 2021,
	551, 1941, 1855, 2291, 3232, 1856, 1857, 2043, 782, 2493,
	3263, 966, 1177, 966, 1966, 1191, 1665, 778, 3140, 1915,
	2091, 782, 2542, 617, 616, 782, 1835, 1916, 3308, 1668,
	1917, 781, 3175, 1922, 2593, 2961, 2056, 2537, 2672, 1775,
	548, 2066, 2080, 2083, 1937, 2076, 2077, 1664, 1694, 1679,
	2403, 2401, 2402, 2394, 2395, 2396, 2397, 2399, 2400, 1666,
	1298, 1289, 1677, 2522, 2495, 1971, 1964, 205, 745, 735,
	1669, 744, 1958, 645, 967, 735, 1473, 545, 2136, 736,
	1828, 1387, 1388, 1390, 1391, 2802, 735, 2592, 2813, 1977,
	2213, 967, 939, 2290, 1593, 1593, 1826, 2123, 1029, 2553,
	2094, 2521, 782, 205, 2012, 2174, 2032, 1669, 2041, 2287,
	2872, 205, 1668, 549, 3034, 1009, 139, 1669, 2057, 3233,
	496, 205, 2049, 2050, 547, 2061, 2062, 3150, 1231, 1958,
	2113, 1174, 3262, 2324, 205, 1538, 1961, 1130, 1439, 3289,
	1683, 2792, 2115, 3069, 2084, 1677, 1660, 2363, 2962, 205,
	1029, 3021, 2060, 205, 205, 2322, 3173, 1687, 2075, 2769,
	2127, 781, 2100, 2868, 778, 993, 1631, 2874, 3231, 1918,
	3270, 1333, 497, 3268, 2116, 3096, 1568, 1372, 1920, 205,
	205, 2108, 722, 205, 569, 3174, 2289, 2114, 1907, 2208,
	2157, 1004, 3234, 2993, 1307, 2580, 1010, 2220, 205, 1684,
	1669, 1476, 1477, 1011, 773, 205, 1739, 205, 2315, 205,
	498, 2171, 499, 1565, 1565, 205, 2156, 2200, 205, 2107,
	205, 2184, 205, 2111, 205, 205, 970, 205, 1130, 1130,
	1130, 1517, 1130, 2139, 2141, 1924, 205, 205, 2954, 205,
	1285, 732, 1520, 970, 1121, 205, 1932, 1810, 991, 3020,
	2130, 1665, 1334, 986, 2121, 2319, 205, 487, 205, 2726,
	3261, 2149, 2873, 2275, 2951, 2281, 2320, 2282, 1688, 2325,
	2183, 2175, 2556, 723, 3309, 1455, 205, 205, 205, 1460,
	205, 1698, 1678, 2252, 2253, 1776, 978, 1363, 2475, 2239,
	2147, 2179, 2165, 2167, 2168, 2169, 968, 997, 968, 2222,
	2155, 2914, 562, 205, 3074, 2952, 2192, 1524, 2194, 3304,
	1147, 2188, 3073, 2172, 2197, 1905, 1908, 3059, 3133, 2263,
	3287, 565, 1335, 2670, 2780, 2212, 2581, 2506, 2502, 2221,
	2254, 1689, 1690, 2204, 1665, 1669, 1299, 2201, 1527, 2277,
	1685, 2278, 3022, 2459, 1371, 2248, 139, 2234, 1759, 1748,
	2230, 2241, 2230, 2250, 1747, 2524, 1522, 2245, 1009, 2246,
	1439, 2247, 2251, 1904, 1705, 2249, 1686, 1520, 1722, 2255,
	1270, 1525, 2265, 854, 3183, 2276, 2526, 570, 571, 2966,
	1851, 2316, 1371, 1009, 1704, 3288, 2965, 1300, 1638, 2727,
	1297, 1523, 2158, 1832, 1634, 2728, 1593, 2997, 2293, 2836,
	2198, 1234, 205, 3060, 2512, 2321, 1287, 2447, 722, 724,
	1805, 2352, 1701, 203, 2323, 490, 491, 3290, 2525, 508,
	490, 508, 518, 523, 2296, 2511, 539, 2298, 2307, 1370,
	773, 2448, 1524, 2460, 563, 1675, 1676, 2915, 1524, 1010,
	1308, 2947, 2341, 2342, 2948, 2055, 1011, 2054, 3303, 1691,
	2089, 1636, 654, 2088, 1219, 1205, 563, 2351, 1372, 2295,
	573, 572, 1526, 1527, 1010, 1217, 1637, 1370, 2210, 1527,
	779, 1011, 1206, 2986, 502, 1852, 664, 2625, 2950, 2314,
	3, 1522, 1757, 1906, 3275, 3090, 657, 2058, 1029, 2555,
	2953, 2920, 782, 3057, 2741, 2432, 1525, 1975, 1348, 723,
	2439, 2440, 1525, 1330, 205, 1328, 3277, 205, 725, 3039,
	574, 575, 1692, 2913, 205, 1565, 1523, 205, 205, 1029,
	1318, 2817, 2964, 2476, 2159, 2160, 1316, 3058, 1029, 2421,
	2654, 2478, 2384, 205, 2326, 2181, 2429, 2358, 1314, 2151,
	1312, 2106, 2479, 1310, 490, 490, 726, 205, 2441, 1548,
	1304, 1215, 969, 1545, 2446, 1349, 2489, 1280, 1825, 2462,
	2436, 2422, 775, 2285, 205, 205, 205, 2455, 2443, 2444,
	205, 2284, 2449, 205, 2491, 966, 2454, 2463, 2464, 2280,
	205, 205, 205, 205, 205, 1834, 2496, 1526, 2471, 1568,
	2466, 2949, 966, 1526, 205, 205, 1974, 1815, 967, 2470,
	2450, 2508, 205, 2481, 1626, 1483, 967, 967, 1195, 2514,
	967, 2518, 2519, 3227, 205, 1130, 3180, 205, 2433, 2682,
	2424, 2425, 2426, 1029, 1568, 2940, 2834, 2503, 2797, 2795,
	2779, 1029, 733, 2579, 967, 724, 205, 2566, 2507, 205,
	205, 2565, 1218, 1347, 2438, 2226, 2215, 2477, 1329, 2499,
	1327, 1130, 205, 1216, 1130, 1130, 1130, 2536, 2461, 2583,
	974, 205, 501, 2214, 2513, 1317, 2516, 205, 2195, 662,
	663, 1315, 205, 2569, 205, 2465, 2492, 2497, 2453, 655,
	656, 205, 2456, 1313, 2473, 1311, 1667, 1789, 1309, 1788,
	2567, 2543, 1786, 1784, 2551, 1303, 1214, 1781, 1779, 1777,
	1824, 1768, 2588, 1719, 1130, 1130, 2532, 2527, 1717, 1708,
	1696, 1667, 205, 2587, 1693, 205, 2599, 1680, 2487, 2488,
	1670, 2613, 948, 3100, 1737, 2547, 2538, 205, 1029, 205,
	205, 1029, 205, 1374, 725, 2305, 3272, 2529, 2156, 2530,
	2628, 1707, 2541, 2546, 3013, 3012, 949, 1707, 205, 2544,
	970, 2552, 1656, 738, 740, 1171, 2596, 2126, 970, 970,
	2126, 3102, 970, 2143, 2845, 2596, 1812, 2548, 2142, 2549,
	2539, 2140, 726, 1677, 2540, 1345, 1346, 1381, 1382, 1381,
	1382, 3142, 3120, 2921, 2161, 2570, 970, 2473, 2572, 2573,
	2574, 1029, 2146, 2586, 782, 2627, 2612, 1378, 2638, 2605,
	503, 2657, 1029, 1384, 205, 2306, 2607, 2608, 2609, 1593,
	2610, 2611, 139, 2623, 1375, 2178, 2148, 3179, 2598, 3092,
	1568, 2826, 2765, 2564, 2233, 2042, 1629, 950, 1560, 1383,
	3285, 1383, 2480, 3302, 2635, 2392, 2393, 1292, 2619, 2620,
	2692, 1381, 1382, 1291, 1593, 2666, 2667, 2668, 514, 2642,
	2640, 2118, 2117, 2639, 1452, 2636, 2770, 2677, 2118, 2485,
	968, 2119, 1976, 1949, 2891, 1554, 983, 1568, 1568, 1332,
	2669, 1450, 1331, 1448, 3310, 654, 3051, 968, 3007, 2853,
	2662, 1864, 2696, 2829, 1138, 1568, 1568, 1027, 2821, 2673,
	2675, 2676, 2820, 1934, 2819, 205, 994, 2794, 2606, 1864,
	2706, 2688, 2577, 539, 2575, 2681, 2243, 205, 2219, 2196,
	1936, 1771, 1455, 1029, 1770, 1769, 1568, 1751, 1730, 203,
	1729, 203, 203, 2695, 1135, 2738, 203, 1725, 1565, 1724,
	2734, 205, 1723, 2703, 563, 1149, 1721, 1720, 2730, 1365,
	2776, 2705, 1344, 1343, 1326, 1322, 2759, 2679, 1319, 1305,
	1242, 1241, 1240, 1239, 1238, 2754, 1237, 2028, 2685, 1173,
	1236, 1235, 2750, 1565, 2731, 1233, 1228, 1227, 1226, 1225,
	2739, 1224, 1194, 2742, 205, 1187, 203, 203, 2747, 1135,
	2744, 2745, 2693, 1186, 1185, 1184, 139, 1183, 1182, 1176,
	1170, 203, 1168, 1167, 996, 995, 923, 834, 1632, 1230,
	967, 746, 601, 2761, 730, 3067, 205, 205, 1338, 205,
	75, 1178, 203, 203, 203, 203, 1135, 589, 2816, 69,
	1029, 205, 2793, 3189, 539, 1130, 203, 720, 2805, 2809,
	2520, 1814, 1306, 1740, 1816, 2452, 2063, 3172, 2899, 2362,
	1593, 3126, 205, 3033, 2783, 1973, 1469, 2814, 71, 822,
	905, 2849, 2838, 2941, 2782, 205, 205, 1130, 1130, 1130,
	2269, 205, 205, 205, 2841, 205, 205, 2768, 2810, 2767,
	2268, 1032, 205, 2842, 1641, 828, 2156, 2796, 1654, 2798,
	2102, 2003, 1564, 2860, 2825, 1029, 831, 1593, 1593, 2837,
	203, 2832, 1566, 833, 832, 1567, 2871, 1471, 2803, 966,
	2773, 830, 1563, 2828, 203, 1593, 1593, 966, 966, 2209,
	2237, 966, 1222, 710, 1645, 1930, 2436, 1737, 2839, 523,
	2843, 1968, 2357, 1466, 802, 824, 2239, 1965, 989, 2885,
	205, 2851, 2850, 801, 2457, 966, 1593, 2856, 2591, 2764,
	2855, 3002, 2876, 2861, 2862, 1850, 2866, 2297, 1568, 2863,
	1847, 604, 970, 2823, 967, 2389, 2877, 1950, 2889, 1565,
	981, 2029, 2022, 2018, 1352, 1441, 2865, 2238, 1019, 805,
	1928, 1457, 2331, 2468, 2600, 2097, 771, 1858, 722, 947,
	946, 945, 3195, 3192, 2870, 1635, 2112, 1433, 818, 205,
	2437, 2857, 2858, 2859, 2626, 1192, 3141, 1432, 2925, 1029,
	773, 1029, 742, 3135, 1008, 1007, 1565, 1565, 1006, 2505,
	3307, 2790, 175, 172, 174, 173, 2807, 2554, 205, 205,
	205, 91, 2912, 38, 1565, 1565, 37, 36, 18, 115,
	205, 114, 113, 1854, 112, 772, 205, 111, 205, 2960,
	110, 205, 205, 205, 205, 205, 109, 2938, 108, 2959,
	2970, 2971, 205, 205, 1130, 1565, 1029, 2922, 1130, 2923,
	2924, 2926, 107, 106, 105, 2928, 2969, 104, 103, 723,
	2929, 102, 205, 2974, 101, 1029, 100, 2939, 1130, 2932,
	2470, 99, 98, 97, 96, 95, 2958, 94, 205, 93,
	92, 35, 535, 532, 51, 967, 50, 90, 1519, 89,
	17, 34, 2937, 15, 55, 2999, 970, 56, 205, 2988,
	14, 490, 2983, 1029, 2978, 967, 30, 3017, 31, 81,
	2968, 80, 3001, 29, 2588, 3014, 16, 2982, 2973, 28,
	2979, 26, 1536, 27, 969, 3008, 12, 203, 2989, 1029,
	9, 8, 2998, 3000, 11, 13, 2995, 3006, 25, 144,
	1149, 143, 203, 1553, 74, 142, 73, 2931, 141, 140,
	563, 1149, 508, 1737, 2024, 563, 1149, 2927, 1593, 72,
	24, 539, 2596, 10, 23, 1029, 3025, 2028, 2028, 136,
	3023, 205, 68, 205, 968, 1029, 205, 138, 2980, 137,
	3041, 65, 968, 968, 205, 135, 968, 3030, 134, 66,
	133, 132, 67, 3046, 3047, 724, 3054, 131, 22, 1568,
	6, 3053, 54, 7, 3018, 2990, 2629, 205, 3045, 84,
	968, 85, 32, 63, 62, 61, 21, 53, 205, 20,
	166, 165, 164, 163, 205, 3005, 3070, 3049, 3052, 1130,
	159, 158, 162, 3085, 205, 160, 161, 970, 788, 157,
	130, 168, 3093, 3101, 167, 3095, 155, 152, 151, 154,
	1568, 156, 153, 3091, 150, 205, 3098, 970, 169, 1027,
	129, 58, 3084, 128, 3076, 3105, 3109, 3110, 127, 2028,
	2028, 2028, 3104, 126, 205, 2841, 3103, 1565, 125, 124,
	205, 57, 3099, 19, 2, 3031, 1, 0, 205, 0,
	0, 966, 770, 3097, 725, 0, 0, 0, 2588, 0,
	0, 0, 0, 3138, 3124, 0, 0, 0, 563, 3119,
	0, 0, 205, 205, 3132, 3131, 0, 0, 0, 3077,
	3078, 3031, 0, 1568, 0, 0, 0, 205, 1130, 2328,
	2329, 1867, 726, 205, 3050, 0, 0, 1130, 1130, 0,
	3129, 3146, 3166, 0, 0, 205, 0, 205, 0, 3154,
	0, 0, 203, 203, 3170, 3157, 3171, 0, 0, 203,
	3158, 3162, 0, 0, 0, 0, 0, 205, 0, 1756,
	205, 205, 3169, 1029, 0, 3163, 0, 3186, 203, 3187,
	203, 205, 203, 0, 0, 0, 490, 3203, 3202, 3205,
	0, 3164, 3165, 3197, 3191, 0, 3145, 0, 1772, 0,
	0, 3213, 3209, 3212, 3199, 0, 0, 3176, 3207, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1593,
	0, 0, 0, 0, 0, 3226, 3225, 3223, 3224, 0,
	0, 2415, 2416, 2417, 3198, 0, 3200, 0, 539, 205,
	3251, 3250, 3253, 0, 0, 966, 0, 0, 1135, 203,
	3259, 3258, 3260, 3255, 0, 3252, 0, 3254, 205, 0,
	0, 539, 0, 3239, 3256, 3257, 0, 203, 0, 0,
	1593, 3152, 563, 203, 3269, 203, 3267, 203, 3274, 203,
	205, 203, 3273, 0, 3266, 0, 0, 3276, 0, 3278,
	3279, 1830, 3281, 1831, 3197, 0, 3283, 0, 3284, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 3292, 0,
	3291, 0, 0, 3299, 3298, 0, 3300, 0, 3301, 0,
	0, 523, 0, 2239, 0, 0, 0, 539, 0, 1867,
	0, 0, 0, 0, 0, 3311, 0, 3312, 1565, 0,
	0, 0, 0, 1593, 0, 0, 0, 3319, 3320, 0,
	3315, 3316, 3317, 0, 0, 0, 0, 0, 2028, 2028,
	0, 0, 3324, 0, 0, 0, 1381, 1382, 0, 0,
	0, 0, 0, 0, 2024, 2024, 968, 0, 0, 0,
	3305, 3306, 0, 0, 0, 0, 966, 0, 0, 1565,
	0, 0, 1384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 3322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1383, 0,
	0, 0, 0, 788, 0, 0, 1403, 788, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 2028, 2028,
	2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028,
	2028, 2028, 2028, 2028, 2028, 2028, 2028, 0, 2028, 1151,
	0, 1155, 1565, 1161, 2392, 2393, 0, 2410, 2411, 2412,
	0, 490, 0, 0, 0, 0, 2024, 2024, 2024, 0,
	0, 0, 0, 2882, 0, 0, 969, 1406, 1407, 1408,
	1409, 556, 0, 0, 0, 0, 490, 1389, 0, 0,
	0, 0, 0, 969, 0, 490, 0, 0, 203, 0,
	0, 0, 0, 556, 0, 0, 0, 0, 0, 0,
	2650, 2651, 0, 0, 2407, 0, 1411, 1412, 1413, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	508, 0, 0, 0, 0, 2398, 0, 0, 0, 0,
	2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716,
	2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 1452,
	2729, 0, 0, 0, 0, 0, 2134, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 203, 2413, 0, 1410, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 64, 0, 1405, 0, 0, 0, 0,
	0, 968, 203, 0, 0, 2408, 563, 2189, 0, 0,
	1434, 1435, 1436, 1437, 1438, 0, 0, 0, 0, 0,
	0, 968, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 1149, 0, 0, 203, 0, 0, 0,
	1454, 0, 0, 2954, 0, 0, 1467, 0, 0, 0,
	0, 1756, 76, 0, 0, 0, 0, 0, 2134, 0,
	490, 86, 2242, 0, 0, 77, 0, 0, 203, 2951,
	0, 203, 2944, 203, 0, 203, 0, 203, 203, 0,
	1135, 0, 0, 0, 0, 2942, 0, 0, 0, 2261,
	654, 2946, 2134, 2409, 0, 2024, 2024, 0, 203, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 1149,
	2952, 1149, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390,
	1391, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	203, 203, 0, 203, 0, 0, 0, 0, 0, 2945,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 1513, 1513, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 2024, 2024, 2024, 2024, 2024,
	2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,
	2024, 2024, 2024, 2024, 0, 2024, 0, 0, 0, 0,
	0, 0, 0, 2404, 2405, 2406, 0, 79, 0, 0,
	2403, 2401, 2402, 2394, 2395, 2396, 2397, 2399, 2400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 788, 0, 0, 0, 0, 145, 82,
	0, 83, 0, 0, 0, 0, 2947, 0, 0, 2948,
	0, 0, 0, 0, 0, 1149, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 1381, 1382, 0,
	0, 0, 650, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 2950, 0, 0, 0, 2028, 0, 0,
	0, 0, 0, 1384, 0, 2953, 0, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 0, 0,
	1131, 0, 1030, 0, 0, 0, 0, 0, 0, 1383,
	0, 117, 0, 0, 0, 0, 2028, 1403, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	969, 177, 0, 0, 0, 0, 0, 0, 969, 969,
	0, 170, 969, 0, 0, 0, 0, 490, 0, 171,
	490, 1131, 1131, 0, 0, 0, 0, 490, 0, 0,
	490, 490, 2648, 0, 0, 0, 1536, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 1149, 0, 1406, 1407,
	1408, 1409, 0, 0, 0, 0, 2949, 0, 1389, 0,
	1149, 0, 0, 0, 1131, 1131, 0, 0, 0, 1131,
	0, 0, 1131, 2028, 0, 0, 0, 203, 2134, 2501,
	0, 0, 0, 2134, 0, 0, 2501, 1411, 1412, 1413,
	0, 0, 0, 2134, 2501, 2134, 2501, 2501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 203, 3038,
	0, 0, 0, 0, 0, 1553, 0, 1131, 59, 0,
	0, 0, 0, 858, 0, 0, 0, 203, 0, 60,
	1135, 0, 0, 0, 0, 0, 0, 0, 1404, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 3062, 2558,
	0, 0, 2560, 2563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 70, 203, 0, 0, 0, 0, 0,
	1135, 0, 0, 0, 0, 2134, 0, 490, 0, 0,
	0, 0, 0, 0, 2134, 0, 0, 0, 0, 0,
	0, 0, 76, 1381, 1382, 0, 0, 0, 1410, 0,
	0, 86, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1756, 1405, 0, 1756, 1384,
	0, 0, 0, 0, 0, 3123, 0, 0, 0, 0,
	2634, 0, 1135, 203, 0, 203, 0, 0, 0, 1848,
	0, 1853, 78, 0, 0, 1383, 0, 1860, 0, 0,
	0, 203, 0, 1403, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 0,
	1909, 0, 1911, 1912, 1913, 1914, 0, 0, 2647, 0,
	0, 0, 0, 0, 0, 0, 0, 2690, 0, 0,
	0, 0, 1938, 0, 1406, 1407, 1408, 1409, 0, 0,
	0, 0, 0, 0, 1389, 0, 0, 1454, 0, 0,
	0, 1963, 0, 1394, 1392, 1393, 1385, 1386, 1387, 1388,
	1390, 1391, 962, 0, 2024, 0, 0, 79, 0, 0,
	0, 0, 0, 1411, 1412, 1413, 0, 0, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 0, 0, 0, 0, 0,
	0, 2020, 0, 2031, 2033, 2038, 0, 0, 145, 82,
	0, 83, 199, 2024, 0, 0, 0, 0, 1030, 0,
	0, 0, 969, 0, 0, 0, 1131, 556, 490, 0,
	176, 0, 556, 0, 1404, 0, 0, 0, 0, 0,
	490, 0, 650, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2392, 2393, 0, 2410, 2411,
	2412, 1030, 0, 0, 1149, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 2881, 0, 0, 0, 0, 0,
	0, 0, 0, 2392, 2393, 0, 2410, 2411, 2412, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	2024, 0, 2659, 149, 1410, 0, 0, 539, 0, 0,
	0, 177, 0, 0, 0, 2407, 0, 0, 0, 0,
	0, 170, 1405, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	203, 0, 203, 2407, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2134, 969, 0, 0, 0,
	0, 0, 0, 0, 1131, 0, 2398, 0, 2261, 2261,
	0, 1030, 0, 0, 654, 654, 2134, 0, 1756, 1756,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 2398, 2191, 0, 2193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2413, 0, 0, 1394,
	1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2900, 2413, 0, 2408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1031, 0, 0, 1132, 2408, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1131, 0, 1131, 969, 0, 0,
	0, 1131, 1149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1131, 1131, 1536, 0, 0,
	0, 0, 0, 0, 1132, 1132, 0, 0, 0, 556,
	0, 2134, 2501, 2134, 2409, 0, 0, 0, 0, 0,
	0, 0, 0, 1149, 0, 0, 0, 0, 0, 2134,
	0, 2501, 0, 0, 1149, 1149, 203, 2134, 2501, 0,
	0, 0, 2409, 0, 0, 203, 203, 1132, 1132, 0,
	0, 0, 1132, 0, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 2311, 2312, 2992, 0, 0, 0, 2318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2134, 0, 0, 1030, 0, 0, 0, 2332, 2333,
	0, 0, 0, 0, 1963, 0, 0, 0, 0, 0,
	1132, 1149, 0, 2340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2404, 2405, 2406, 0, 0, 2360,
	0, 2403, 2401, 2402, 2394, 2395, 2396, 2397, 2399, 2400,
	0, 2373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2404, 2405, 2406, 0, 0, 0, 0, 2403,
	2401, 2402, 2394, 2395, 2396, 2397, 2399, 2400, 0, 1030,
	0, 0, 0, 0, 2134, 0, 2501, 0, 1024, 3056,
	0, 0, 0, 0, 0, 1142, 0, 203, 0, 0,
	0, 0, 0, 2038, 2038, 2038, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	539, 0, 2442, 0, 0, 2392, 2393, 0, 2410, 2411,
	2412, 2563, 0, 0, 0, 0, 0, 203, 0, 0,
	1381, 1382, 1030, 0, 2658, 0, 0, 1149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 0,
	1223, 0, 0, 0, 0, 0, 1384, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 788, 0, 0,
	0, 1246, 1246, 1246, 1142, 2407, 0, 2690, 0, 788,
	0, 0, 1383, 490, 0, 1277, 0, 0, 0, 0,
	1403, 3056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2134, 2501, 0, 0, 0,
	0, 0, 0, 2392, 2393, 0, 2410, 2411, 2412, 0,
	203, 0, 0, 0, 0, 2317, 2501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2398, 0, 1149, 1337,
	1149, 1406, 1407, 1408, 1409, 0, 0, 0, 1030, 0,
	0, 1389, 0, 0, 0, 0, 0, 0, 0, 0,
	3184, 0, 0, 1149, 203, 2392, 2393, 0, 2410, 2411,
	2412, 1031, 0, 2407, 203, 0, 0, 2589, 0, 1132,
	1411, 1412, 1413, 0, 0, 0, 2413, 1131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 0, 2690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1031, 0, 2408, 0, 0, 0,
	0, 0, 0, 0, 0, 2407, 0, 0, 823, 88,
	0, 1404, 2134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2398, 0, 0, 0, 2641, 0,
	0, 3056, 1860, 0, 0, 0, 0, 0, 2645, 2646,
	0, 0, 2649, 0, 0, 0, 2652, 0, 0, 0,
	2414, 0, 0, 1149, 0, 2656, 0, 0, 1131, 1131,
	1131, 0, 1131, 0, 2663, 0, 0, 2442, 0, 0,
	0, 0, 0, 0, 2413, 0, 2398, 0, 0, 0,
	0, 1410, 0, 0, 2409, 0, 88, 0, 2683, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1405,
	0, 0, 0, 0, 2408, 2697, 2698, 0, 2699, 2700,
	2701, 0, 0, 2702, 0, 0, 0, 1132, 0, 2704,
	0, 0, 0, 0, 1031, 0, 2413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 763, 0,
	2732, 2733, 0, 0, 0, 0, 2408, 783, 0, 0,
	0, 0, 0, 0, 0, 0, 1543, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 2749, 0, 0, 0,
	0, 1551, 0, 0, 60, 0, 0, 957, 88, 0,
	0, 0, 2409, 0, 2404, 2405, 2406, 0, 64, 0,
	0, 2403, 2401, 2402, 2394, 2395, 2396, 2397, 2399, 2400,
	0, 0, 0, 0, 0, 0, 1394, 1392, 1393, 1385,
	1386, 1387, 1388, 1390, 1391, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2784, 2787,
	0, 0, 0, 0, 2409, 0, 0, 1132, 0, 1132,
	0, 0, 0, 0, 1132, 0, 0, 76, 0, 0,
	0, 2806, 0, 0, 0, 0, 86, 0, 1132, 1132,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 1381,
	1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2404, 2405, 2406, 1384, 0, 78, 1430, 2403,
	2401, 2402, 2394, 2395, 2396, 2397, 2399, 2400, 1030, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1383, 2852, 0, 0, 0, 0, 0, 0, 1403,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 1030,
	0, 0, 0, 0, 2404, 2405, 2406, 1031, 1030, 0,
	0, 2403, 2401, 2402, 2394, 2395, 2396, 2397, 2399, 2400,
	0, 0, 0, 0, 0, 0, 2878, 2879, 0, 0,
	0, 0, 2883, 2884, 0, 0, 0, 2887, 2888, 0,
	0, 1732, 0, 0, 2892, 0, 0, 0, 1743, 0,
	1406, 1407, 1408, 1409, 0, 0, 0, 0, 0, 0,
	1389, 0, 79, 2897, 0, 0, 0, 1223, 0, 1762,
	2901, 1762, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1431, 0, 0, 1411,
	1412, 1413, 1031, 145, 82, 1131, 83, 0, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 0,
	0, 1030, 0, 0, 0, 176, 0, 0, 1398, 1399,
	0, 0, 0, 0, 0, 0, 0, 650, 0, 0,
	116, 1131, 0, 1419, 1131, 1131, 1131, 0, 1802, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 1031, 1813, 0, 0, 0,
	0, 0, 1819, 0, 1820, 0, 1821, 2787, 1822, 0,
	1823, 1031, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 1131, 1131, 0, 0, 149, 0,
	0, 1833, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 1030, 0,
	1410, 1030, 0, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	88, 0, 88, 0, 88, 1273, 0, 0, 0, 0,
	0, 0, 0, 2787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 0, 0, 3026,
	3027, 3028, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 0, 1381, 1382, 0,
	0, 1031, 1030, 0, 0, 3036, 3037, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3044,
	0, 0, 0, 1384, 0, 0, 0, 783, 88, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	1132, 0, 88, 0, 0, 0, 0, 0, 0, 1383,
	0, 0, 0, 1031, 0, 1420, 2787, 1403, 1395, 1396,
	1402, 1401, 1397, 1423, 3075, 1394, 1392, 1393, 1385, 1386,
	1387, 1388, 1390, 1391, 0, 0, 788, 0, 0, 0,
	0, 0, 0, 3087, 0, 0, 0, 0, 0, 0,
	2787, 0, 0, 2787, 0, 0, 0, 0, 0, 0,
	0, 0, 2310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 2787, 2787, 0, 2081, 1406, 1407,
	1408, 1409, 0, 0, 0, 0, 0, 0, 1389, 0,
	0, 1132, 1132, 1132, 0, 1132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1411, 1412, 1413,
	3134, 0, 0, 3137, 763, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 1459, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 0, 0, 0, 0, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 788, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1131, 1131, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3222, 3222, 3222, 0, 0, 0, 1410, 0,
	0, 1142, 0, 0, 0, 1030, 0, 0, 0, 3240,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 0,
	0, 0, 0, 2787, 0, 2787, 0, 0, 0, 0,
	0, 2207, 0, 0, 0, 1743, 0, 0, 3222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 1534, 0, 1537,
	0, 0, 0, 0, 0, 0, 0, 2244, 0, 0,
	1246, 0, 1246, 0, 1246, 0, 1142, 1142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2279, 0, 0,
	0, 0, 0, 0, 3222, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 1030,
	0, 1030, 0, 0, 0, 0, 0, 0, 2292, 1142,
	2294, 0, 0, 1394, 1392, 1393, 1385, 1386, 1387, 1388,
	1390, 1391, 1031, 0, 0, 0, 637, 0, 0, 0,
	0, 1031, 0, 0, 0, 2308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 0, 0, 1131, 0, 1030, 0, 1131, 0,
	0, 0, 0, 0, 0, 1381, 1382, 0, 1414, 1415,
	1416, 1424, 1425, 1426, 0, 1030, 0, 0, 1131, 621,
	0, 0, 0, 0, 1417, 0, 0, 0, 622, 0,
	0, 1384, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 1383, 1132, 642,
	0, 0, 0, 0, 0, 1403, 1031, 0, 0, 0,
	0, 0, 1400, 624, 1031, 0, 0, 0, 0, 1030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 1132, 0, 0, 1132, 1132, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 627, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 1406, 1407, 1408, 1409,
	0, 0, 0, 0, 0, 0, 1389, 0, 641, 0,
	0, 0, 0, 0, 0, 0, 0, 1132, 1132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0,
	0, 1031, 0, 0, 1031, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 0,
	0, 0, 783, 0, 1398, 1399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 1404, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 0, 0,
	0, 0, 0, 1429, 1031, 0, 2498, 0, 0, 0,
	645, 630, 0, 0, 0, 1031, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2535, 2207, 644, 0,
	0, 0, 0, 0, 0, 631, 0, 0, 1131, 0,
	0, 0, 0, 0, 639, 0, 1410, 1131, 1131, 0,
	0, 632, 763, 0, 0, 763, 763, 0, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	633, 640, 0, 1030, 2571, 0, 0, 0, 0, 1422,
	634, 0, 0, 2578, 0, 0, 0, 0, 0, 0,
	0, 636, 0, 0, 0, 0, 635, 0, 0, 0,
	1927, 0, 0, 0, 0, 0, 1031, 643, 0, 0,
	0, 0, 0, 0, 783, 0, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 1453, 0, 0, 1381, 1382, 0, 1414, 1415, 1416,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2637, 1417, 1142, 0, 0, 0, 0, 0,
	1384, 1420, 0, 1430, 1395, 1396, 1402, 1401, 1397, 1423,
	2643, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391,
	0, 0, 0, 0, 2908, 0, 1383, 0, 2907, 0,
	0, 957, 0, 0, 1403, 0, 0, 0, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 1537, 0,
	0, 0, 0, 1031, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1132, 1132, 1132, 0, 0, 1406, 1407, 1408, 1409, 0,
	0, 0, 0, 0, 0, 1389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1031, 0,
	1381, 1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0,
	1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 1384, 0, 0, 1430,
	0, 0, 0, 0, 0, 1427, 1428, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 0, 0, 0, 0,
	0, 0, 1383, 0, 0, 0, 0, 0, 1419, 0,
	1403, 88, 0, 0, 0, 1404, 0, 1400, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 88, 0,
	0, 0, 1031, 0, 1031, 0, 0, 0, 0, 0,
	0, 1406, 1407, 1408, 1409, 0, 0, 0, 0, 0,
	0, 1389, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2824, 0,
	88, 2827, 88, 1405, 0, 0, 1421, 1431, 0, 0,
	1411, 1412, 1413, 2833, 0, 0, 0, 1132, 0, 1031,
	0, 1132, 0, 0, 0, 0, 0, 0, 1422, 88,
	0, 1427, 1428, 0, 0, 0, 0, 0, 1031, 1398,
	1399, 1132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 1404, 0, 0, 2869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1031, 0, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1031, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1395, 1396, 1402, 1401, 1397, 1423, 0,
	1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 0,
	0, 1410, 0, 2378, 0, 0, 0, 2379, 1031, 0,
	0, 0, 0, 0, 0, 0, 0, 1927, 1031, 1405,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 0, 0,
	0, 1381, 1382, 0, 1414, 1415, 1416, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1417, 0, 1132, 0, 0, 0, 0, 1384, 0, 0,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1383, 0, 2972, 0, 0, 0, 0,
	0, 1403, 0, 0, 2207, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1395,
	1396, 1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385,
	1386, 1387, 1388, 1390, 1391, 0, 0, 0, 0, 1959,
	0, 0, 0, 1960, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 957, 957, 0, 0, 957, 0, 0,
	0, 1132, 1406, 1407, 1408, 1409, 0, 0, 0, 0,
	1132, 1132, 1389, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1381, 1382,
	0, 1414, 1415, 1416, 1424, 1425, 1426, 1421, 1431, 0,
	0, 1411, 1412, 1413, 0, 0, 1031, 1417, 0, 0,
	0, 0, 0, 0, 1384, 0, 0, 1430, 0, 0,
	0, 0, 1427, 1428, 0, 0, 0, 0, 0, 0,
	1398, 1399, 0, 0, 0, 0, 0, 0, 0, 0,
	1383, 0, 0, 0, 0, 1419, 3063, 88, 1403, 88,
	0, 0, 1404, 0, 0, 1400, 0, 0, 0, 0,
	0, 0, 0, 0, 1381, 1382, 0, 0, 0, 1429,
	1424, 1425, 1426, 0, 0, 0, 0, 88, 0, 88,
	0, 0, 1418, 0, 0, 0, 3094, 0, 0, 0,
	1384, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1406,
	1407, 1408, 1409, 0, 0, 0, 1383, 3117, 0, 1389,
	0, 0, 1410, 0, 1403, 0, 0, 0, 0, 0,
	783, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 0, 1421, 1431, 0, 0, 1411, 1412,
	1413, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1427,
	1428, 0, 0, 0, 0, 0, 0, 1398, 1399, 0,
	0, 0, 0, 0, 0, 1406, 1407, 1408, 1409, 3156,
	0, 0, 1419, 0, 0, 1389, 0, 0, 0, 1404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0, 1418,
	0, 0, 0, 3188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3201, 0, 0, 0, 1420, 0, 0,
	1395, 1396, 1402, 1401, 1397, 1423, 0, 1394, 1392, 1393,
	1385, 1386, 1387, 1388, 1390, 1391, 0, 0, 1419, 1410,
	0, 0, 0, 0, 2906, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1405, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1410, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1405, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 1420, 0, 0, 1395, 1396, 1402,
	1401, 1397, 1423, 0, 1394, 1392, 1393, 1385, 1386, 1387,
	1388, 1390, 1391, 0, 0, 0, 0, 0, 0, 0,
	0, 2661, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 0, 1423, 0,
	1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 661, 0, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 561, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 957, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 88, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 88, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 560, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 0, 1927, 0,
	0, 437, 438, 486, 439, 440, 441, 1028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 0, 207, 208, 209, 210, 211, 1034,
	212, 1035, 1036, 1037, 1038, 442, 1039, 1040, 1041, 1042,
	213, 214, 215, 443, 444, 216, 445, 217, 218, 446,
	1043, 219, 220, 221, 222, 223, 224, 1044, 1045, 225,
	447, 448, 449, 1046, 226, 450, 1047, 1033, 1048, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 1049,
	236, 88, 237, 238, 239, 1050, 907, 240, 241, 1051,
	1052, 1054, 1053, 1055, 1056, 1057, 242, 243, 244, 245,
	246, 247, 451, 452, 1058, 248, 1059, 249, 1060, 250,
	1061, 1062, 251, 252, 253, 1063, 254, 1064, 255, 256,
	1065, 453, 257, 258, 260, 263, 259, 264, 265, 266,
	454, 455, 1066, 908, 1067, 0, 0, 0, 0, 267,
	268, 269, 456, 270, 271, 0, 272, 1068, 273, 1069,
	1070, 909, 274, 275, 1071, 276, 457, 1072, 458, 277,
	1073, 278, 279, 280, 281, 282, 283, 459, 460, 461,
	911, 1074, 465, 285, 0, 0, 0, 1075, 284, 286,
	293, 1076, 910, 287, 462, 289, 288, 290, 291, 292,
	463, 1077, 464, 1078, 294, 912, 913, 295, 296, 297,
	914, 298, 299, 0, 0, 300, 301, 302, 303, 1079,
	305, 304, 1080, 306, 466, 915, 307, 308, 916, 1081,
	309, 310, 1082, 1083, 311, 0, 312, 313, 973, 972,
	314, 315, 317, 318, 316, 917, 319, 320, 322, 321,
	1084, 1085, 918, 1086, 467, 468, 323, 324, 1087, 325,
	326, 1088, 1089, 328, 329, 1090, 1091, 330, 469, 919,
	331, 920, 470, 332, 327, 333, 334, 335, 336, 337,
	338, 1092, 339, 471, 340, 472, 341, 1093, 342, 0,
	343, 344, 345, 346, 347, 348, 473, 349, 350, 1094,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 1095, 364, 921, 365, 366, 367,
	368, 474, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 380, 1096, 387, 388, 381, 383, 384, 385, 382,
	386, 389, 390, 1097, 391, 371, 372, 392, 922, 393,
	475, 394, 395, 1098, 405, 396, 397, 398, 373, 399,
	403, 404, 400, 401, 402, 476, 1099, 407, 408, 406,
	1100, 409, 410, 411, 412, 413, 261, 414, 262, 415,
	1101, 477, 478, 479, 416, 1102, 1103, 417, 418, 480,
	419, 481, 1104, 420, 421, 422, 0, 423, 424, 1105,
	1106, 425, 426, 427, 428, 430, 1107, 431, 1108, 429,
	432, 433, 434, 482, 483, 484, 1109, 436, 435, 485,
	1110, 1111, 1112, 1113, 437, 438, 486, 439, 440, 441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1028, 0, 0, 0, 0, 0, 0,
	2068, 0, 0, 0, 0, 0, 0, 0, 0, 2069,
	207, 208, 209, 210, 211, 1034, 212, 1035, 1036, 1037,
	1038, 442, 1039, 1040, 1041, 1042, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 1043, 219, 220, 221,
	222, 223, 224, 1044, 1045, 225, 447, 448, 449, 1046,
	226, 450, 1047, 1033, 1048, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 1049, 236, 0, 237, 238,
	239, 1050, 907, 240, 241, 1051, 1052, 1054, 1053, 1055,
	1056, 1057, 242, 243, 244, 245, 246, 247, 451, 452,
	1058, 248, 1059, 249, 1060, 250, 1061, 1062, 251, 252,
	253, 1063, 254, 1064, 255, 256, 1065, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 1066, 908,
	1067, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 1068, 273, 1069, 1070, 909, 274, 275,
	1071, 276, 457, 1072, 458, 277, 1073, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 911, 1074, 465, 285,
	0, 0, 0, 1075, 284, 286, 293, 1076, 910, 287,
	462, 289, 288, 290, 291, 292, 463, 1077, 464, 1078,
	294, 912, 913, 295, 296, 297, 914, 298, 299, 0,
	0, 300, 301, 302, 303, 1079, 305, 304, 1080, 306,
	466, 915, 307, 308, 916, 1081, 309, 310, 1082, 1083,
	311, 0, 312, 313, 973, 972, 314, 315, 317, 318,
	316, 917, 319, 320, 322, 321, 1084, 1085, 918, 1086,
	467, 468, 323, 324, 1087, 325, 326, 1088, 1089, 328,
	329, 1090, 1091, 330, 469, 919, 331, 920, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 1092, 339, 471,
	340, 472, 341, 1093, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 1094, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	1095, 364, 921, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 1096, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 1097,
	391, 371, 372, 392, 922, 393, 475, 394, 395, 1098,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 1099, 407, 408, 406, 1100, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 1101, 477, 478, 479,
	416, 1102, 1103, 417, 418, 480, 419, 481, 1104, 420,
	421, 422, 0, 423, 424, 1105, 1106, 425, 426, 427,
	428, 430, 1107, 431, 1108, 429, 432, 433, 434, 482,
	483, 484, 1109, 436, 435, 485, 1110, 1111, 1112, 1113,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2930, 207, 208, 209,
	210, 211, 1034, 212, 1035, 1036, 1037, 1038, 442, 1039,
	1040, 1041, 1042, 213, 214, 215, 443, 444, 216, 445,
	217, 218, 446, 1043, 219, 220, 221, 222, 223, 224,
	1044, 1045, 225, 447, 448, 449, 1046, 226, 450, 1047,
	1033, 1048, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 1049, 236, 0, 237, 238, 239, 1050, 907,
	240, 241, 1051, 1052, 1054, 1053, 1055, 1056, 1057, 242,
	243, 244, 245, 246, 247, 451, 452, 1058, 248, 1059,
	249, 1060, 250, 1061, 1062, 251, 252, 253, 1063, 254,
	1064, 255, 256, 1065, 453, 257, 258, 260, 263, 259,
	264, 265, 266, 454, 455, 1066, 908, 1067, 0, 0,
	0, 0, 267, 268, 269, 456, 270, 271, 0, 272,
	1068, 273, 1069, 1070, 909, 274, 275, 1071, 276, 457,
	1072, 458, 277, 1073, 278, 279, 280, 281, 282, 283,
	459, 460, 461, 911, 1074, 465, 285, 0, 0, 0,
	1075, 284, 286, 293, 1076, 910, 287, 462, 289, 288,
	290, 291, 292, 463, 1077, 464, 1078, 294, 912, 913,
	295, 296, 297, 914, 298, 299, 0, 0, 300, 301,
	302, 303, 1079, 305, 304, 1080, 306, 466, 915, 307,
	308, 916, 1081, 309, 310, 1082, 1083, 311, 0, 312,
	313, 973, 972, 314, 315, 317, 318, 316, 917, 319,
	320, 322, 321, 1084, 1085, 918, 1086, 467, 468, 323,
	324, 1087, 325, 326, 1088, 1089, 328, 329, 1090, 1091,
	330, 469, 919, 331, 920, 470, 332, 327, 333, 334,
	335, 336, 337, 338, 1092, 339, 471, 340, 472, 341,
	1093, 342, 0, 343, 344, 345, 346, 347, 348, 473,
	349, 350, 1094, 351, 352, 353, 354, 355, 0, 357,
	358, 359, 356, 360, 361, 362, 363, 1095, 364, 921,
	365, 366, 367, 368, 474, 369, 0, 370, 374, 375,
	376, 377, 378, 379, 380, 1096, 387, 388, 381, 383,
	384, 385, 382, 386, 389, 390, 1097, 391, 371, 372,
	392, 922, 393, 475, 394, 395, 1098, 405, 396, 397,
	398, 373, 399, 403, 404, 400, 401, 402, 476, 1099,
	407, 408, 406, 1100, 409, 410, 411, 412, 413, 261,
	414, 262, 415, 1101, 477, 478, 479, 416, 1102, 1103,
	417, 418, 480, 419, 481, 1104, 420, 421, 422, 0,
	423, 424, 1105, 1106, 425, 426, 427, 428, 430, 1107,
	431, 1108, 429, 432, 433, 434, 482, 483, 484, 1109,
	436, 435, 485, 1110, 1111, 1112, 1113, 437, 438, 486,
	439, 440, 441, 1028, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3032, 0,
	207, 208, 209, 210, 211, 1034, 212, 1035, 1036, 1037,
	1038, 442, 1039, 1040, 1041, 1042, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 1043, 219, 220, 221,
	222, 223, 224, 1044, 1045, 225, 447, 448, 449, 1046,
	226, 450, 1047, 1033, 1048, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 1049, 236, 0, 237, 238,
	239, 1050, 907, 240, 241, 1051, 1052, 1054, 1053, 1055,
	1056, 1057, 242, 243, 244, 245, 246, 247, 451, 452,
	1058, 248, 1059, 249, 1060, 250, 1061, 1062, 251, 252,
	253, 1063, 254, 1064, 255, 256, 1065, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 1066, 908,
	1067, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 1068, 273, 1069, 1070, 909, 274, 275,
	1071, 276, 457, 1072, 458, 277, 1073, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 911, 1074, 465, 285,
	0, 0, 0, 1075, 284, 286, 293, 1076, 910, 287,
	462, 289, 288, 290, 291, 292, 463, 1077, 464, 1078,
	294, 912, 913, 295, 296, 297, 914, 298, 299, 0,
	0, 300, 301, 302, 303, 1079, 305, 304, 1080, 306,
	466, 915, 307, 308, 916, 1081, 309, 310, 1082, 1083,
	311, 0, 312, 313, 973, 972, 314, 315, 317, 318,
	316, 917, 319, 320, 322, 321, 1084, 1085, 918, 1086,
	467, 468, 323, 324, 1087, 325, 326, 1088, 1089, 328,
	329, 1090, 1091, 330, 469, 919, 331, 920, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 1092, 339, 471,
	340, 472, 341, 1093, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 1094, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	1095, 364, 921, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 1096, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 1097,
	391, 371, 372, 392, 922, 393, 475, 394, 395, 1098,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 1099, 407, 408, 406, 1100, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 1101, 477, 478, 479,
	416, 1102, 1103, 417, 418, 480, 419, 481, 1104, 420,
	421, 422, 0, 423, 424, 1105, 1106, 425, 426, 427,
	428, 430, 1107, 431, 1108, 429, 432, 433, 434, 482,
	483, 484, 1109, 436, 435, 485, 1110, 1111, 1112, 1113,
	437, 438, 486, 439, 440, 441, 1028, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2686, 0, 207, 208, 209, 210, 211, 1034, 212,
	1035, 1036, 1037, 1038, 442, 1039, 1040, 1041, 1042, 213,
	214, 215, 443, 444, 216, 445, 217, 218, 446, 1043,
	219, 220, 221, 222, 223, 224, 1044, 1045, 225, 447,
	448, 449, 1046, 226, 450, 1047, 1033, 1048, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 1049, 236,
	0, 237, 238, 239, 1050, 907, 240, 241, 1051, 1052,
	1054, 1053, 1055, 1056, 1057, 242, 243, 244, 245, 246,
	247, 451, 452, 1058, 248, 1059, 249, 1060, 250, 1061,
	1062, 251, 252, 253, 1063, 254, 1064, 255, 256, 1065,
	453, 257, 258, 260, 263, 259, 264, 265, 266, 454,
	455, 1066, 908, 1067, 0, 0, 0, 0, 267, 268,
	269, 456, 270, 271, 0, 272, 1068, 273, 1069, 1070,
	909, 274, 275, 1071, 276, 457, 1072, 458, 277, 1073,
	278, 279, 280, 281, 282, 283, 459, 460, 461, 911,
	1074, 465, 285, 0, 0, 0, 1075, 284, 286, 293,
	1076, 910, 287, 462, 289, 288, 290, 291, 292, 463,
	1077, 464, 1078, 294, 912, 913, 295, 296, 297, 914,
	298, 299, 0, 0, 300, 301, 302, 303, 1079, 305,
	304, 1080, 306, 466, 915, 307, 308, 916, 1081, 309,
	310, 1082, 1083, 311, 0, 312, 313, 973, 972, 314,
	315, 317, 318, 316, 917, 319, 320, 322, 321, 1084,
	1085, 918, 1086, 467, 468, 323, 324, 1087, 325, 326,
	1088, 1089, 328, 329, 1090, 1091, 330, 469, 919, 331,
	920, 470, 332, 327, 333, 334, 335, 336, 337, 338,
	1092, 339, 471, 340, 472, 341, 1093, 342, 0, 343,
	344, 345, 346, 347, 348, 473, 349, 350, 1094, 351,
	352, 353, 354, 355, 0, 357, 358, 359, 356, 360,
	361, 362, 363, 1095, 364, 921, 365, 366, 367, 368,
	474, 369, 0, 370, 374, 375, 376, 377, 378, 379,
	380, 1096, 387, 388, 381, 383, 384, 385, 382, 386,
	389, 390, 1097, 391, 371, 372, 392, 922, 393, 475,
	394, 395, 1098, 405, 396, 397, 398, 373, 399, 403,
	404, 400, 401, 402, 476, 1099, 407, 408, 406, 1100,
	409, 410, 411, 412, 413, 261, 414, 262, 415, 1101,
	477, 478, 479, 416, 1102, 1103, 417, 418, 480, 419,
	481, 1104, 420, 421, 422, 0, 423, 424, 1105, 1106,
	425, 426, 427, 428, 430, 1107, 431, 1108, 429, 432,
	433, 434, 482, 483, 484, 1109, 436, 435, 485, 1110,
	1111, 1112, 1113, 437, 438, 486, 439, 440, 441, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2678, 0, 207, 208, 209, 210,
	211, 1034, 212, 1035, 1036, 1037, 1038, 442, 1039, 1040,
	1041, 1042, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 1043, 219, 220, 221, 222, 223, 224, 1044,
	1045, 225, 447, 448, 449, 1046, 226, 450, 1047, 1033,
	1048, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 1049, 236, 0, 237, 238, 239, 1050, 907, 240,
	241, 1051, 1052, 1054, 1053, 1055, 1056, 1057, 242, 243,
	244, 245, 246, 247, 451, 452, 1058, 248, 1059, 249,
	1060, 250, 1061, 1062, 251, 252, 253, 1063, 254, 1064,
	255, 256, 1065, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 1066, 908, 1067, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 1068,
	273, 1069, 1070, 909, 274, 275, 1071, 276, 457, 1072,
	458, 277, 1073, 278, 279, 280, 281, 282, 283, 459,
	460, 461, 911, 1074, 465, 285, 0, 0, 0, 1075,
	284, 286, 293, 1076, 910, 287, 462, 289, 288, 290,
	291, 292, 463, 1077, 464, 1078, 294, 912, 913, 295,
	296, 297, 914, 298, 299, 0, 0, 300, 301, 302,
	303, 1079, 305, 304, 1080, 306, 466, 915, 307, 308,
	916, 1081, 309, 310, 1082, 1083, 311, 0, 312, 313,
	973, 972, 314, 315, 317, 318, 316, 917, 319, 320,
	322, 321, 1084, 1085, 918, 1086, 467, 468, 323, 324,
	1087, 325, 326, 1088, 1089, 328, 329, 1090, 1091, 330,
	469, 919, 331, 920, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 1092, 339, 471, 340, 472, 341, 1093,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 1094, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 1095, 364, 921, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 1096, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 1097, 391, 371, 372, 392,
	922, 393, 475, 394, 395, 1098, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 1099, 407,
	408, 406, 1100, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 1101, 477, 478, 479, 416, 1102, 1103, 417,
	418, 480, 419, 481, 1104, 420, 421, 422, 0, 423,
	424, 1105, 1106, 425, 426, 427, 428, 430, 1107, 431,
	1108, 429, 432, 433, 434, 482, 483, 484, 1109, 436,
	435, 485, 1110, 1111, 1112, 1113, 437, 438, 486, 439,
	440, 441, 1028, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2557, 0, 207,
	208, 209, 210, 211, 1034, 212, 1035, 1036, 1037, 1038,
	442, 1039, 1040, 1041, 1042, 213, 214, 215, 443, 444,
	216, 445, 217, 218, 446, 1043, 219, 220, 221, 222,
	223, 224, 1044, 1045, 225, 447, 448, 449, 1046, 226,
	450, 1047, 1033, 1048, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 1049, 236, 0, 237, 238, 239,
	1050, 907, 240, 241, 1051, 1052, 1054, 1053, 1055, 1056,
	1057, 242, 243, 244, 245, 246, 247, 451, 452, 1058,
	248, 1059, 249, 1060, 250, 1061, 1062, 251, 252, 253,
	1063, 254, 1064, 255, 256, 1065, 453, 257, 258, 260,
	263, 259, 264, 265, 266, 454, 455, 1066, 908, 1067,
	0, 0, 0, 0, 267, 268, 269, 456, 270, 271,
	0, 272, 1068, 273, 1069, 1070, 909, 274, 275, 1071,
	276, 457, 1072, 458, 277, 1073, 278, 279, 280, 281,
	282, 283, 459, 460, 461, 911, 1074, 465, 285, 0,
	0, 0, 1075, 284, 286, 293, 1076, 910, 287, 462,
	289, 288, 290, 291, 292, 463, 1077, 464, 1078, 294,
	912, 913, 295, 296, 297, 914, 298, 299, 0, 0,
	300, 301, 302, 303, 1079, 305, 304, 1080, 306, 466,
	915, 307, 308, 916, 1081, 309, 310, 1082, 1083, 311,
	0, 312, 313, 973, 972, 314, 315, 317, 318, 316,
	917, 319, 320, 322, 321, 1084, 1085, 918, 1086, 467,
	468, 323, 324, 1087, 325, 326, 1088, 1089, 328, 329,
	1090, 1091, 330, 469, 919, 331, 920, 470, 332, 327,
	333, 334, 335, 336, 337, 338, 1092, 339, 471, 340,
	472, 341, 1093, 342, 0, 343, 344, 345, 346, 347,
	348, 473, 349, 350, 1094, 351, 352, 353, 354, 355,
	0, 357, 358, 359, 356, 360, 361, 362, 363, 1095,
	364, 921, 365, 366, 367, 368, 474, 369, 0, 370,
	374, 375, 376, 377, 378, 379, 380, 1096, 387, 388,
	381, 383, 384, 385, 382, 386, 389, 390, 1097, 391,
	371, 372, 392, 922, 393, 475, 394, 395, 1098, 405,
	396, 397, 398, 373, 399, 403, 404, 400, 401, 402,
	476, 1099, 407, 408, 406, 1100, 409, 410, 411, 412,
	413, 261, 414, 262, 415, 1101, 477, 478, 479, 416,
	1102, 1103, 417, 418, 480, 419, 481, 1104, 420, 421,
	422, 0, 423, 424, 1105, 1106, 425, 426, 427, 428,
	430, 1107, 431, 1108, 429, 432, 433, 434, 482, 483,
	484, 1109, 436, 435, 485, 1110, 1111, 1112, 1113, 437,
	438, 486, 439, 440, 441, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1972, 0, 207, 208, 209, 210, 211, 1034, 212, 1035,
	1036, 1037, 1038, 442, 1039, 1040, 1041, 1042, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 1043, 219,
	220, 221, 222, 223, 224, 1044, 1045, 225, 447, 448,
	449, 1046, 226, 450, 1047, 1033, 1048, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 1049, 236, 0,
	237, 238, 239, 1050, 907, 240, 241, 1051, 1052, 1054,
	1053, 1055, 1056, 1057, 242, 243, 244, 245, 246, 247,
	451, 452, 1058, 248, 1059, 249, 1060, 250, 1061, 1062,
	251, 252, 253, 1063, 254, 1064, 255, 256, 1065, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	1066, 908, 1067, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 1068, 273, 1069, 1070, 909,
	274, 275, 1071, 276, 457, 1072, 458, 277, 1073, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 911, 1074,
	465, 285, 0, 0, 0, 1075, 284, 286, 293, 1076,
	910, 287, 462, 289, 288, 290, 291, 292, 463, 1077,
	464, 1078, 294, 912, 913, 295, 296, 297, 914, 298,
	299, 0, 0, 300, 301, 302, 303, 1079, 305, 304,
	1080, 306, 466, 915, 307, 308, 916, 1081, 309, 310,
	1082, 1083, 311, 0, 312, 313, 973, 972, 314, 315,
	317, 318, 316, 917, 319, 320, 322, 321, 1084, 1085,
	918, 1086, 467, 468, 323, 324, 1087, 325, 326, 1088,
	1089, 328, 329, 1090, 1091, 330, 469, 919, 331, 920,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 1092,
	339, 471, 340, 472, 341, 1093, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 1094, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 1095, 364, 921, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	1096, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 1097, 391, 371, 372, 392, 922, 393, 475, 394,
	395, 1098, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 1099, 407, 408, 406, 1100, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 1101, 477,
	478, 479, 416, 1102, 1103, 417, 418, 480, 419, 481,
	1104, 420, 421, 422, 0, 423, 424, 1105, 1106, 425,
	426, 427, 428, 430, 1107, 431, 1108, 429, 432, 433,
	434, 482, 483, 484, 1109, 436, 435, 485, 1110, 1111,
	1112, 1113, 437, 438, 486, 439, 440, 441, 1136, 0,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1715, 0, 0, 0, 207, 208, 209,
	210, 211, 1034, 212, 1035, 1036, 1037, 1038, 442, 1039,
	1040, 1041, 1042, 213, 214, 215, 443, 444, 216, 445,
	217, 218, 446, 1043, 219, 220, 221, 222, 223, 224,
	1044, 1045, 225, 447, 448, 449, 1046, 226, 450, 1047,
	1033, 1048, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 1049, 236, 0, 237, 238, 239, 1050, 907,
	240, 241, 1051, 1052, 1054, 1053, 1055, 1056, 1057, 242,
	243, 244, 245, 246, 247, 451, 452, 1058, 248, 1059,
	249, 1060, 250, 1061, 1062, 251, 252, 253, 1063, 254,
	1064, 255, 256, 1065, 453, 257, 258, 260, 263, 259,
	264, 265, 266, 454, 455, 1066, 908, 1067, 0, 0,
	0, 0, 267, 268, 269, 456, 270, 271, 0, 272,
	1068, 273, 1069, 1070, 909, 274, 275, 1071, 276, 457,
	1072, 458, 277, 1073, 278, 279, 280, 281, 282, 283,
	459, 460, 461, 911, 1074, 465, 285, 0, 0, 0,
	1075, 284, 286, 293, 1076, 910, 287, 462, 289, 288,
	290, 291, 292, 463, 1077, 464, 1078, 294, 912, 913,
	295, 296, 297, 914, 298, 299, 0, 0, 300, 301,
	302, 303, 1079, 305, 304, 1080, 306, 466, 915, 307,
	308, 916, 1081, 309, 310, 1082, 1083, 311, 0, 312,
	313, 973, 972, 314, 315, 317, 318, 316, 917, 319,
	320, 322, 321, 1084, 1085, 918, 1086, 467, 468, 323,
	324, 1087, 325, 326, 1088, 1089, 328, 329, 1090, 1091,
	330, 469, 919, 331, 920, 470, 332, 327, 333, 334,
	335, 336, 337, 338, 1092, 339, 471, 340, 472, 341,
	1093, 342, 0, 343, 344, 345, 346, 347, 348, 473,
	349, 350, 1094, 351, 352, 353, 354, 355, 0, 357,
	358, 359, 356, 360, 361, 362, 363, 1095, 364, 921,
	365, 366, 367, 368, 474, 369, 0, 370, 374, 375,
	376, 377, 378, 379, 380, 1096, 387, 388, 381, 383,
	384, 385, 382, 386, 389, 390, 1097, 391, 371, 372,
	392, 922, 393, 475, 394, 395, 1098, 405, 396, 397,
	398, 373, 399, 403, 404, 400, 401, 402, 476, 1099,
	407, 408, 406, 1100, 409, 410, 411, 412, 413, 261,
	414, 262, 415, 1101, 477, 478, 479, 416, 1102, 1103,
	417, 418, 480, 419, 481, 1104, 420, 421, 422, 0,
	423, 424, 1105, 1106, 425, 426, 427, 428, 430, 1107,
	431, 1108, 429, 432, 433, 434, 482, 483, 484, 1109,
	436, 435, 485, 1110, 1111, 1112, 1113, 437, 438, 486,
	439, 440, 441, 1025, 0, 1028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 1034, 212, 1035,
	1036, 1037, 1038, 442, 1039, 1040, 1041, 1042, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 1043, 219,
	220, 221, 222, 223, 224, 1044, 1045, 225, 447, 448,
	449, 1046, 226, 450, 1047, 1033, 1048, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 1049, 236, 0,
	237, 238, 239, 1050, 907, 240, 241, 1051, 1052, 1054,
	1053, 1055, 1056, 1057, 242, 243, 244, 245, 246, 247,
	451, 452, 1058, 248, 1059, 249, 1060, 250, 1061, 1062,
	251, 252, 253, 1063, 254, 1064, 255, 256, 1065, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	1066, 908, 1067, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 1068, 273, 1069, 1070, 909,
	274, 275, 1071, 276, 457, 1072, 458, 277, 1073, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 911, 1074,
	465, 285, 0, 0, 0, 1075, 284, 286, 293, 1076,
	910, 287, 462, 289, 288, 290, 291, 292, 463, 1077,
	464, 1078, 294, 912, 913, 295, 296, 297, 914, 298,
	299, 0, 0, 300, 301, 302, 303, 1079, 305, 304,
	1080, 306, 466, 915, 307, 308, 916, 1081, 309, 310,
	1082, 1083, 311, 0, 312, 313, 973, 972, 314, 315,
	317, 318, 316, 917, 319, 320, 322, 321, 1084, 1085,
	918, 1086, 467, 468, 323, 324, 1087, 325, 326, 1088,
	1089, 328, 329, 1090, 1091, 330, 469, 919, 331, 920,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 1092,
	339, 471, 340, 472, 341, 1093, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 1094, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 1095, 364, 921, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	1096, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 1097, 391, 371, 372, 392, 922, 393, 475, 394,
	395, 1098, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 1099, 407, 408, 406, 1100, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 1101, 477,
	478, 479, 416, 1102, 1103, 417, 418, 480, 419, 481,
	1104, 420, 421, 422, 0, 423, 424, 1105, 1106, 425,
	426, 427, 428, 430, 1107, 431, 1108, 429, 432, 433,
	434, 482, 483, 484, 1109, 436, 435, 485, 1110, 1111,
	1112, 1113, 437, 438, 486, 439, 440, 441, 1028, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	1034, 212, 1035, 1036, 1037, 1038, 442, 1039, 1040, 1041,
	1042, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 1043, 219, 220, 221, 222, 223, 224, 1044, 1045,
	225, 447, 448, 449, 1046, 226, 450, 1047, 1033, 1048,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	1049, 236, 0, 237, 238, 239, 1050, 907, 240, 241,
	1051, 1052, 1054, 1053, 1055, 1056, 1057, 242, 243, 244,
	245, 246, 247, 451, 452, 1058, 248, 1059, 249, 1060,
	250, 1061, 1062, 251, 252, 253, 1063, 254, 1064, 255,
	256, 1065, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 1066, 908, 1067, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 1068, 273,
	1069, 1070, 909, 274, 275, 1071, 276, 457, 1072, 458,
	277, 1073, 278, 279, 280, 281, 282, 283, 459, 460,
	461, 911, 1074, 465, 285, 0, 0, 0, 1075, 284,
	286, 293, 1076, 910, 287, 462, 289, 288, 290, 291,
	292, 463, 1077, 464, 1078, 294, 912, 913, 295, 296,
	297, 914, 298, 299, 0, 0, 300, 301, 302, 303,
	1079, 305, 304, 1080, 306, 466, 915, 307, 308, 916,
	1081, 309, 310, 1082, 1083, 311, 0, 312, 313, 973,
	972, 314, 315, 317, 318, 316, 917, 319, 320, 322,
	321, 1084, 1085, 918, 1086, 467, 468, 323, 324, 1087,
	325, 326, 1088, 1089, 328, 329, 1090, 1091, 330, 469,
	919, 331, 920, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 1092, 339, 471, 340, 472, 341, 1093, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	1094, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 1095, 364, 921, 365, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 1096, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 1097, 391, 371, 372, 392, 922,
	393, 475, 394, 395, 1098, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 1099, 407, 408,
	406, 1100, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 1101, 477, 478, 479, 416, 1102, 1103, 417, 418,
	480, 419, 481, 1104, 420, 421, 422, 0, 423, 424,
	1105, 1106, 425, 426, 427, 428, 430, 1107, 431, 1108,
	429, 432, 433, 434, 482, 483, 484, 1109, 436, 435,
	485, 1110, 1111, 1112, 1113, 437, 438, 486, 439, 440,
	441, 1948, 0, 851, 808, 809, 810, 806, 807, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 1945, 212, 0, 0, 0,
	0, 898, 825, 0, 0, 0, 213, 214, 215, 443,
	866, 845, 877, 835, 876, 875, 0, 219, 837, 836,
	222, 223, 224, 827, 897, 225, 925, 926, 449, 0,
	226, 904, 0, 887, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 907, 240, 241, 890, 888, 889, 894, 892,
	891, 893, 242, 243, 244, 245, 880, 247, 873, 872,
	797, 248, 0, 249, 0, 250, 1946, 0, 251, 871,
	253, 0, 254, 0, 255, 256, 0, 803, 257, 258,
	260, 263, 259, 264, 265, 266, 927, 928, 816, 908,
	0, 0, 0, 0, 0, 267, 268, 269, 870, 868,
	869, 0, 272, 0, 273, 0, 0, 909, 274, 275,
	0, 276, 929, 0, 826, 277, 0, 278, 279, 280,
	281, 282, 283, 899, 900, 903, 911, 0, 901, 847,
	0, 0, 0, 0, 284, 286, 293, 0, 910, 287,
	859, 850, 861, 863, 864, 865, 860, 0, 852, 0,
	294, 912, 913, 295, 296, 297, 914, 885, 886, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	930, 915, 307, 308, 916, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 799, 798, 314, 315, 317, 839,
	316, 917, 319, 320, 322, 321, 794, 0, 918, 817,
	902, 874, 323, 324, 0, 848, 849, 0, 0, 328,
	329, 0, 0, 330, 469, 919, 331, 920, 931, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 932,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 867, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 921, 365, 366, 367, 368, 804, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 840, 841, 843, 844, 382, 386, 389, 390, 895,
	391, 371, 372, 392, 922, 393, 862, 842, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 906, 400, 401,
	402, 933, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 838, 0, 881, 882, 883,
	884, 0, 0, 417, 418, 934, 419, 935, 815, 420,
	421, 422, 0, 423, 424, 0, 800, 425, 426, 427,
	428, 430, 896, 431, 0, 846, 432, 433, 434, 482,
	878, 924, 1944, 436, 435, 485, 0, 0, 0, 0,
	437, 438, 486, 439, 440, 441, 795, 0, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 0, 791,
	792, 1947, 0, 0, 0, 0, 0, 0, 821, 1943,
	0, 0, 0, 784, 819, 851, 808, 809, 810, 806,
	807, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 898, 825, 0, 0, 0, 213, 214,
	215, 443, 866, 845, 877, 835, 876, 875, 0, 219,
	837, 836, 222, 223, 224, 827, 897, 225, 925, 926,
	449, 0, 226, 904, 0, 887, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 890, 888, 889,
	894, 892, 891, 893, 242, 243, 244, 245, 880, 247,
	873, 872, 797, 248, 0, 249, 0, 250, 0, 0,
	251, 871, 253, 0, 254, 0, 255, 256, 0, 803,
	257, 258, 260, 263, 259, 264, 265, 266, 927, 928,
	816, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	870, 868, 869, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 929, 0, 826, 277, 0, 278,
	279, 280, 281, 282, 283, 899, 900, 903, 911, 0,
	901, 847, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 859, 850, 861, 863, 864, 865, 860, 0,
	852, 0, 294, 912, 913, 295, 296, 297, 914, 885,
	886, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 930, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 799, 798, 314, 315,
	317, 839, 316, 917, 319, 320, 322, 321, 794, 0,
	918, 817, 902, 874, 323, 324, 0, 848, 849, 0,
	0, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	931, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 932, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 867, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 804,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	176, 387, 388, 840, 841, 843, 844, 382, 386, 389,
	390, 895, 391, 371, 372, 392, 922, 393, 862, 842,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 906,
	400, 401, 402, 933, 0, 407, 408, 406, 178, 409,
	410, 411, 412, 413, 261, 414, 262, 838, 0, 881,
	882, 883, 884, 0, 0, 417, 418, 934, 419, 935,
	815, 420, 421, 422, 0, 423, 424, 0, 800, 425,
	426, 427, 428, 430, 896, 431, 0, 846, 432, 433,
	434, 1271, 878, 924, 0, 436, 435, 485, 0, 0,
	0, 170, 437, 438, 486, 439, 440, 441, 795, 171,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 791, 792, 851, 808, 809, 810, 806, 807, 820,
	1458, 1456, 0, 0, 0, 0, 819, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 898, 825, 0, 0, 0, 213, 214, 215, 443,
	866, 845, 877, 835, 876, 875, 0, 219, 837, 836,
	222, 223, 224, 827, 897, 225, 925, 926, 449, 0,
	226, 904, 0, 887, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 907, 240, 241, 890, 888, 889, 894, 892,
	891, 893, 242, 243, 244, 245, 880, 247, 873, 872,
	797, 248, 0, 249, 0, 250, 0, 0, 251, 871,
	253, 0, 254, 0, 255, 256, 0, 803, 257, 258,
	260, 263, 259, 264, 265, 266, 927, 928, 816, 908,
	0, 0, 0, 0, 0, 267, 268, 269, 870, 868,
	869, 0, 272, 0, 273, 0, 0, 909, 274, 275,
	0, 276, 929, 0, 826, 277, 0, 278, 279, 280,
	281, 282, 283, 899, 900, 903, 911, 0, 901, 847,
	0, 0, 0, 0, 284, 286, 293, 0, 910, 287,
	859, 850, 861, 863, 864, 865, 860, 0, 852, 0,
	294, 912, 913, 295, 296, 297, 914, 885, 886, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	930, 915, 307, 308, 916, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 799, 798, 314, 315, 317, 839,
	316, 917, 319, 320, 322, 321, 794, 0, 918, 817,
	902, 874, 323, 324, 0, 848, 849, 0, 0, 328,
	329, 0, 0, 330, 469, 919, 331, 920, 931, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 932,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 867, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 921, 365, 366, 367, 368, 804, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 176, 387,
	388, 840, 841, 843, 844, 382, 386, 389, 390, 895,
	391, 371, 372, 392, 922, 393, 862, 842, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 906, 400, 401,
	402, 933, 0, 407, 408, 406, 178, 409, 410, 411,
	412, 413, 261, 414, 262, 838, 0, 881, 882, 883,
	884, 0, 0, 417, 418, 934, 419, 935, 815, 420,
	421, 422, 0, 423, 424, 0, 800, 425, 426, 427,
	428, 430, 896, 431, 0, 846, 432, 433, 434, 1271,
	878, 924, 0, 436, 435, 485, 0, 0, 0, 170,
	437, 438, 486, 439, 440, 441, 795, 171, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 0, 791,
	792, 851, 808, 809, 810, 806, 807, 820, 1458, 2330,
	0, 0, 0, 0, 819, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 898,
	825, 0, 0, 0, 213, 214, 215, 443, 866, 845,
	877, 835, 876, 875, 0, 219, 837, 836, 222, 223,
	224, 827, 897, 225, 925, 926, 449, 0, 226, 904,
	0, 887, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	907, 240, 241, 890, 888, 889, 894, 892, 891, 893,
	242, 243, 244, 245, 880, 247, 873, 872, 797, 248,
	0, 249, 0, 250, 0, 0, 251, 871, 253, 0,
	254, 0, 255, 256, 0, 803, 257, 258, 260, 263,
	259, 264, 265, 266, 927, 928, 816, 908, 0, 0,
	0, 0, 0, 267, 268, 269, 870, 868, 869, 0,
	272, 0, 273, 0, 0, 909, 274, 275, 0, 276,
	929, 0, 826, 277, 0, 278, 279, 280, 281, 282,
	283, 899, 900, 903, 911, 0, 901, 847, 0, 0,
	0, 0, 284, 286, 293, 0, 910, 287, 859, 850,
	861, 863, 864, 865, 860, 0, 852, 0, 294, 912,
	913, 295, 296, 297, 914, 885, 886, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 930, 915,
	307, 308, 916, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 799, 798, 314, 315, 317, 839, 316, 917,
	319, 320, 322, 321, 794, 0, 918, 817, 902, 874,
	323, 324, 0, 848, 849, 0, 0, 328, 329, 0,
	0, 330, 469, 919, 331, 920, 931, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 932, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	867, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	921, 365, 366, 367, 368, 804, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 176, 387, 388, 840,
	841, 843, 844, 382, 386, 389, 390, 895, 391, 371,
	372, 392, 922, 393, 862, 842, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 906, 400, 401, 402, 933,
	0, 407, 408, 406, 178, 409, 410, 411, 412, 413,
	261, 414, 262, 838, 0, 881, 882, 883, 884, 0,
	0, 417, 418, 934, 419, 935, 815, 420, 421, 422,
	0, 423, 424, 0, 800, 425, 426, 427, 428, 430,
	896, 431, 0, 846, 432, 433, 434, 1271, 878, 924,
	0, 436, 435, 485, 0, 0, 0, 170, 437, 438,
	486, 439, 440, 441, 795, 171, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 791, 792, 851,
	808, 809, 810, 806, 807, 820, 1458, 1456, 0, 0,
	0, 0, 819, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 898, 825, 0,
	0, 0, 213, 214, 215, 443, 866, 845, 877, 835,
	876, 875, 2034, 219, 837, 836, 222, 223, 224, 827,
	897, 225, 925, 926, 449, 0, 226, 904, 0, 887,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	241, 890, 888, 889, 894, 892, 891, 893, 242, 243,
	244, 245, 880, 247, 873, 872, 797, 248, 0, 249,
	0, 250, 0, 0, 251, 871, 253, 0, 254, 0,
	255, 256, 0, 803, 257, 258, 260, 263, 259, 264,
	265, 266, 927, 928, 816, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 870, 868, 869, 0, 272, 0,
	273, 0, 2039, 909, 274, 275, 0, 276, 929, 0,
	826, 277, 0, 278, 279, 280, 281, 282, 283, 899,
	900, 903, 911, 0, 901, 847, 0, 0, 0, 0,
	284, 286, 293, 0, 910, 287, 859, 850, 861, 863,
	864, 865, 860, 0, 852, 0, 294, 912, 913, 295,
	296, 297, 914, 885, 886, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 2035, 306, 930, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	799, 798, 314, 315, 317, 839, 316, 917, 319, 320,
	322, 321, 794, 0, 918, 817, 902, 874, 323, 324,
	0, 848, 849, 0, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 931, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 932, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 867, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 804, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 840, 841, 843,
	844, 382, 386, 389, 390, 895, 391, 371, 372, 392,
	922, 393, 862, 842, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 906, 400, 401, 402, 933, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 838, 0, 881, 882, 883, 884, 0, 2036, 417,
	418, 934, 419, 935, 815, 420, 421, 422, 0, 423,
	424, 0, 800, 425, 426, 427, 428, 430, 896, 431,
	0, 846, 432, 433, 434, 482, 878, 924, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 795, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 791, 792, 851, 808, 809,
	810, 806, 807, 820, 821, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 898, 825, 0, 0, 0,
	213, 214, 215, 443, 866, 845, 877, 835, 876, 875,
	0, 219, 837, 836, 222, 223, 224, 827, 897, 225,
	925, 926, 449, 0, 226, 904, 0, 887, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 907, 240, 241, 890,
	888, 889, 894, 892, 891, 893, 242, 243, 244, 245,
	880, 247, 873, 872, 797, 248, 0, 249, 0, 250,
	0, 0, 251, 871, 253, 0, 254, 0, 255, 256,
	0, 803, 257, 258, 260, 263, 259, 264, 265, 266,
	927, 928, 816, 908, 0, 0, 0, 0, 0, 267,
	268, 269, 870, 868, 869, 0, 272, 0, 273, 0,
	0, 909, 274, 275, 0, 276, 929, 0, 826, 277,
	0, 278, 279, 280, 281, 282, 283, 899, 900, 903,
	911, 0, 901, 847, 0, 0, 0, 0, 284, 286,
	293, 0, 910, 287, 859, 850, 861, 863, 864, 865,
	860, 0, 852, 0, 294, 912, 913, 295, 296, 297,
	914, 885, 886, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 930, 915, 307, 308, 916, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 799, 798,
	314, 315, 317, 839, 316, 917, 319, 320, 322, 321,
	794, 2844, 918, 817, 902, 874, 323, 324, 0, 848,
	849, 0, 0, 328, 329, 0, 0, 330, 469, 919,
	331, 920, 931, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 932, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 867, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 921, 365, 366, 367,
	368, 804, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 380, 0, 387, 388, 840, 841, 843, 844, 382,
	386, 389, 390, 895, 391, 371, 372, 392, 922, 393,
	862, 842, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 906, 400, 401, 402, 933, 0, 407, 408, 406,
	0, 409, 410, 411, 412, 413, 261, 414, 262, 838,
	0, 881, 882, 883, 884, 0, 0, 417, 418, 934,
	419, 935, 815, 420, 421, 422, 0, 423, 424, 0,
	800, 425, 426, 427, 428, 430, 896, 431, 0, 846,
	432, 433, 434, 482, 878, 924, 0, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 440, 441,
	795, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 791, 792, 1514, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 819, 851,
	808, 809, 810, 806, 807, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 898, 825, 0,
	0, 0, 213, 214, 215, 443, 866, 845, 877, 835,
	876, 875, 0, 219, 837, 836, 222, 223, 224, 827,
	897, 225, 925, 926, 449, 0, 226, 904, 0, 887,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	241, 890, 888, 889, 894, 892, 891, 893, 242, 243,
	244, 245, 880, 247, 873, 872, 797, 248, 0, 249,
	0, 250, 0, 0, 251, 871, 253, 0, 254, 0,
	255, 256, 0, 803, 257, 258, 260, 263, 259, 264,
	265, 266, 927, 928, 816, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 870, 868, 869, 0, 272, 0,
	273, 0, 0, 909, 274, 275, 0, 276, 929, 0,
	826, 277, 0, 278, 279, 280, 281, 282, 283, 899,
	900, 903, 911, 0, 901, 847, 0, 0, 0, 1862,
	284, 286, 293, 0, 910, 287, 859, 850, 861, 863,
	864, 865, 860, 0, 852, 0, 294, 912, 913, 295,
	296, 297, 914, 885, 886, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 930, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	799, 798, 314, 315, 317, 839, 316, 917, 319, 320,
	322, 321, 794, 0, 918, 817, 902, 874, 323, 324,
	0, 848, 849, 0, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 931, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 932, 340, 472, 341, 1861,
	342, 0, 343, 344, 345, 346, 347, 348, 867, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 804, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 840, 841, 843,
	844, 382, 386, 389, 390, 895, 391, 371, 372, 392,
	922, 393, 862, 842, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 906, 400, 401, 402, 933, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 838, 0, 881, 882, 883, 884, 0, 0, 417,
	418, 934, 419, 935, 815, 420, 421, 422, 0, 423,
	424, 0, 800, 425, 426, 427, 428, 430, 896, 431,
	0, 846, 432, 433, 434, 482, 878, 924, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 795, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 791, 792, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 787,
	819, 851, 808, 809, 810, 806, 807, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 898,
	825, 0, 0, 0, 213, 214, 215, 443, 866, 845,
	877, 835, 876, 875, 0, 219, 837, 836, 222, 223,
	224, 827, 897, 225, 925, 926, 449, 0, 226, 904,
	0, 887, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	907, 240, 241, 890, 888, 889, 894, 892, 891, 893,
	242, 243, 244, 245, 880, 247, 873, 872, 797, 248,
	0, 249, 0, 250, 0, 0, 251, 871, 253, 0,
	254, 0, 255, 256, 0, 803, 257, 258, 260, 263,
	259, 264, 265, 266, 927, 928, 816, 908, 0, 0,
	0, 0, 0, 267, 268, 269, 870, 868, 869, 0,
	272, 0, 273, 0, 0, 909, 274, 275, 0, 276,
	929, 0, 826, 277, 0, 278, 279, 280, 281, 282,
	283, 899, 900, 903, 911, 0, 901, 847, 0, 0,
	0, 0, 284, 286, 293, 0, 910, 287, 859, 850,
	861, 863, 864, 865, 860, 0, 852, 0, 294, 912,
	913, 295, 296, 297, 914, 885, 886, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 930, 915,
	307, 308, 916, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 799, 798, 314, 315, 317, 839, 316, 917,
	319, 320, 322, 321, 794, 0, 918, 817, 902, 874,
	323, 324, 0, 848, 849, 789, 0, 328, 329, 0,
	0, 330, 469, 919, 331, 920, 931, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 932, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	867, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	921, 365, 366, 367, 368, 804, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 0, 387, 388, 840,
	841, 843, 844, 382, 386, 389, 390, 895, 391, 371,
	372, 392, 922, 393, 862, 842, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 906, 400, 401, 402, 933,
	0, 407, 408, 406, 0, 409, 410, 411, 412, 413,
	261, 414, 262, 838, 0, 881, 882, 883, 884, 0,
	0, 417, 418, 934, 419, 935, 815, 420, 421, 422,
	0, 423, 424, 0, 800, 425, 426, 427, 428, 430,
	896, 431, 0, 846, 432, 433, 434, 482, 878, 924,
	0, 436, 435, 485, 0, 0, 0, 0, 437, 438,
	486, 439, 440, 441, 795, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 791, 792, 851,
	808, 809, 810, 806, 807, 820, 821, 0, 0, 0,
	0, 0, 819, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 898, 825, 0,
	0, 0, 213, 214, 215, 443, 866, 845, 877, 835,
	876, 875, 0, 219, 837, 836, 222, 223, 224, 827,
	897, 225, 925, 926, 449, 0, 226, 904, 0, 887,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	241, 890, 888, 889, 894, 892, 891, 893, 242, 243,
	244, 245, 880, 247, 873, 872, 797, 248, 0, 249,
	0, 250, 0, 0, 251, 871, 253, 0, 254, 0,
	255, 256, 0, 803, 257, 258, 260, 263, 259, 264,
	265, 266, 927, 928, 816, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 870, 868, 869, 0, 272, 0,
	273, 0, 0, 909, 274, 275, 0, 276, 929, 0,
	826, 277, 0, 278, 279, 280, 281, 282, 283, 899,
	900, 903, 911, 0, 901, 847, 0, 0, 0, 0,
	284, 286, 293, 0, 910, 287, 859, 850, 861, 863,
	864, 865, 860, 0, 852, 0, 294, 912, 913, 295,
	296, 297, 914, 885, 886, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 930, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	799, 798, 314, 315, 317, 839, 316, 917, 319, 320,
	322, 321, 794, 0, 918, 817, 902, 874, 323, 324,
	0, 848, 849, 789, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 931, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 932, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 867, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 804, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 840, 841, 843,
	844, 382, 386, 389, 390, 895, 391, 371, 372, 392,
	922, 393, 862, 842, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 906, 400, 401, 402, 933, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 838, 0, 881, 882, 883, 884, 0, 0, 417,
	418, 934, 419, 935, 815, 420, 421, 422, 0, 423,
	424, 0, 800, 425, 426, 427, 428, 430, 896, 431,
	0, 846, 432, 433, 434, 482, 878, 924, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 795, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 791, 792, 851, 808, 809,
	810, 806, 807, 820, 821, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 898, 825, 0, 0, 0,
	213, 214, 215, 443, 866, 845, 877, 835, 876, 875,
	0, 219, 837, 836, 222, 223, 224, 827, 897, 225,
	925, 926, 449, 0, 226, 904, 0, 887, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 907, 240, 241, 890,
	888, 889, 894, 892, 891, 893, 242, 243, 244, 245,
	880, 247, 873, 872, 797, 248, 0, 249, 0, 250,
	0, 0, 251, 871, 253, 0, 254, 0, 255, 256,
	0, 803, 257, 258, 260, 263, 259, 264, 265, 266,
	927, 928, 816, 908, 0, 0, 0, 0, 0, 267,
	268, 269, 870, 868, 869, 0, 272, 0, 273, 0,
	0, 909, 274, 275, 0, 276, 929, 0, 826, 277,
	0, 278, 279, 280, 281, 282, 283, 899, 900, 903,
	911, 0, 901, 847, 0, 0, 0, 0, 284, 286,
	293, 0, 910, 287, 859, 850, 861, 863, 864, 865,
	860, 0, 852, 0, 294, 912, 913, 295, 296, 297,
	914, 885, 886, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 930, 915, 307, 308, 916, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 799, 798,
	314, 315, 317, 839, 316, 917, 319, 320, 322, 321,
	794, 0, 918, 817, 902, 874, 323, 324, 0, 848,
	849, 0, 0, 328, 329, 0, 0, 330, 469, 919,
	331, 920, 931, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 932, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 867, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 921, 365, 366, 367,
	368, 804, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 380, 0, 387, 388, 840, 841, 843, 844, 382,
	386, 389, 390, 895, 391, 371, 372, 392, 922, 393,
	862, 842, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 906, 400, 401, 402, 933, 0, 407, 408, 406,
	0, 409, 410, 411, 412, 413, 261, 414, 262, 838,
	0, 881, 882, 883, 884, 0, 0, 417, 418, 934,
	419, 935, 815, 420, 421, 422, 0, 423, 424, 0,
	800, 425, 426, 427, 428, 430, 896, 431, 0, 846,
	432, 433, 434, 482, 878, 924, 2665, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 440, 441,
	795, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 791, 792, 851, 808, 809, 810, 806,
	807, 820, 821, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 898, 825, 0, 0, 0, 213, 214,
	215, 443, 866, 845, 877, 835, 876, 875, 0, 219,
	837, 836, 222, 223, 224, 827, 897, 225, 925, 926,
	449, 0, 226, 904, 0, 887, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 890, 888, 889,
	894, 892, 891, 893, 242, 243, 244, 245, 880, 247,
	873, 872, 797, 248, 0, 249, 0, 250, 0, 0,
	251, 871, 253, 0, 254, 0, 255, 256, 0, 803,
	257, 258, 260, 263, 259, 264, 265, 266, 927, 928,
	816, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	870, 868, 869, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 929, 0, 826, 277, 0, 278,
	279, 280, 281, 282, 283, 899, 900, 903, 911, 0,
	901, 847, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 859, 850, 861, 863, 864, 865, 860, 0,
	852, 0, 294, 912, 913, 295, 296, 297, 914, 885,
	886, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 930, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 799, 798, 314, 315,
	317, 839, 316, 917, 319, 320, 322, 321, 794, 0,
	918, 817, 902, 874, 323, 324, 0, 848, 849, 0,
	0, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	931, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 932, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 867, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 804,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 840, 841, 843, 844, 382, 386, 389,
	390, 895, 391, 371, 372, 392, 922, 393, 862, 842,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 906,
	400, 401, 402, 933, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 838, 0, 881,
	882, 883, 884, 0, 0, 417, 418, 934, 419, 935,
	815, 420, 421, 422, 0, 423, 424, 0, 800, 425,
	426, 427, 428, 430, 896, 431, 0, 846, 432, 433,
	434, 482, 878, 924, 0, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 795, 0,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 791, 792, 1514, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 819, 851, 808, 809,
	810, 806, 807, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 898, 825, 0, 0, 0,
	213, 214, 215, 443, 866, 845, 877, 835, 876, 875,
	0, 219, 837, 836, 222, 223, 224, 827, 897, 225,
	925, 926, 449, 0, 226, 904, 0, 887, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 907, 240, 241, 890,
	888, 889, 894, 892, 891, 893, 242, 243, 244, 245,
	880, 247, 873, 872, 797, 248, 0, 249, 0, 250,
	0, 0, 251, 871, 253, 0, 254, 0, 255, 256,
	0, 803, 257, 258, 260, 263, 259, 264, 265, 266,
	927, 928, 816, 908, 0, 0, 0, 0, 0, 267,
	268, 269, 870, 868, 869, 0, 272, 0, 273, 0,
	2039, 909, 274, 275, 0, 276, 929, 0, 826, 277,
	0, 278, 279, 280, 281, 282, 283, 899, 900, 903,
	911, 0, 901, 847, 0, 0, 0, 0, 284, 286,
	293, 0, 910, 287, 859, 850, 861, 863, 864, 865,
	860, 0, 852, 0, 294, 912, 913, 295, 296, 297,
	914, 885, 886, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 930, 915, 307, 308, 916, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 799, 798,
	314, 315, 317, 839, 316, 917, 319, 320, 322, 321,
	794, 0, 918, 817, 902, 874, 323, 324, 0, 848,
	849, 0, 0, 328, 329, 0, 0, 330, 469, 919,
	331, 920, 931, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 932, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 867, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 921, 365, 366, 367,
	368, 804, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 380, 0, 387, 388, 840, 841, 843, 844, 382,
	386, 389, 390, 895, 391, 371, 372, 392, 922, 393,
	862, 842, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 906, 400, 401, 402, 933, 0, 407, 408, 406,
	0, 409, 410, 411, 412, 413, 261, 414, 262, 838,
	0, 881, 882, 883, 884, 0, 0, 417, 418, 934,
	419, 935, 815, 420, 421, 422, 0, 423, 424, 0,
	800, 425, 426, 427, 428, 430, 896, 431, 0, 846,
	432, 433, 434, 482, 878, 924, 0, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 440, 441,
	795, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 791, 792, 851, 808, 809, 810, 806,
	807, 820, 821, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 898, 825, 0, 0, 0, 213, 214,
	215, 443, 866, 845, 877, 835, 876, 875, 0, 219,
	837, 836, 222, 223, 224, 827, 897, 225, 925, 926,
	449, 0, 226, 904, 0, 887, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 890, 888, 889,
	894, 892, 891, 893, 242, 243, 244, 245, 880, 247,
	873, 872, 797, 248, 0, 249, 0, 250, 0, 0,
	251, 871, 253, 0, 254, 0, 255, 256, 0, 803,
	257, 258, 260, 263, 259, 264, 265, 266, 927, 928,
	816, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	870, 868, 869, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 929, 0, 826, 277, 0, 278,
	279, 280, 281, 282, 283, 899, 900, 903, 911, 0,
	901, 847, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 859, 850, 861, 863, 864, 865, 860, 0,
	852, 0, 294, 912, 913, 295, 296, 297, 914, 885,
	886, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 930, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 799, 798, 314, 315,
	317, 839, 316, 917, 319, 320, 322, 321, 794, 0,
	918, 817, 902, 874, 323, 324, 0, 848, 849, 0,
	0, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	931, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 932, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 867, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 804,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 840, 841, 843, 844, 382, 386, 389,
	390, 895, 391, 371, 372, 392, 922, 393, 862, 842,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 906,
	400, 401, 402, 933, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 838, 0, 881,
	882, 883, 884, 0, 0, 417, 418, 934, 419, 935,
	815, 420, 421, 422, 0, 423, 424, 0, 800, 425,
	426, 427, 428, 430, 896, 431, 0, 846, 432, 433,
	434, 482, 878, 924, 0, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 795, 0,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 791, 792, 0, 0, 0, 0, 0, 0, 0,
	821, 1456, 0, 0, 0, 2030, 819, 851, 808, 809,
	810, 806, 807, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 898, 825, 0, 0, 0,
	213, 214, 215, 443, 866, 845, 877, 835, 876, 875,
	0, 219, 837, 836, 222, 223, 224, 827, 897, 225,
	925, 926, 449, 0, 226, 904, 0, 887, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 907, 240, 241, 890,
	888, 889, 894, 892, 891, 893, 242, 243, 244, 245,
	880, 247, 873, 872, 797, 248, 0, 249, 0, 250,
	0, 0, 251, 871, 253, 0, 254, 0, 255, 256,
	0, 803, 257, 258, 260, 263, 259, 264, 265, 266,
	927, 928, 816, 908, 0, 0, 0, 0, 0, 267,
	268, 269, 870, 868, 869, 0, 272, 0, 273, 0,
	0, 909, 274, 275, 0, 276, 929, 0, 826, 277,
	0, 278, 279, 280, 281, 282, 283, 899, 900, 903,
	911, 0, 901, 847, 0, 0, 0, 0, 284, 286,
	293, 0, 910, 287, 859, 850, 861, 863, 864, 865,
	860, 0, 852, 0, 294, 912, 913, 295, 296, 297,
	914, 885, 886, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 930, 915, 307, 308, 916, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 799, 798,
	314, 315, 317, 839, 316, 917, 319, 320, 322, 321,
	794, 0, 918, 817, 902, 874, 323, 324, 0, 848,
	849, 0, 0, 328, 329, 0, 0, 330, 469, 919,
	331, 920, 931, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 932, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 867, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 921, 365, 366, 367,
	368, 804, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 380, 0, 387, 388, 840, 841, 843, 844, 382,
	386, 389, 390, 895, 391, 371, 372, 392, 922, 393,
	862, 842, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 906, 400, 401, 402, 933, 0, 407, 408, 406,
	0, 409, 410, 411, 412, 413, 261, 414, 262, 838,
	0, 881, 882, 883, 884, 0, 0, 417, 418, 934,
	419, 935, 815, 420, 421, 422, 0, 423, 424, 0,
	800, 425, 426, 427, 428, 430, 896, 431, 0, 846,
	432, 433, 434, 482, 878, 924, 0, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 440, 441,
	795, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 791, 792, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 2019, 819, 851,
	808, 809, 810, 806, 807, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 898, 825, 0,
	0, 0, 213, 214, 215, 443, 866, 845, 877, 835,
	876, 875, 0, 219, 837, 836, 222, 223, 224, 827,
	897, 225, 925, 926, 449, 0, 226, 904, 0, 887,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	241, 890, 888, 889, 894, 892, 891, 893, 242, 243,
	244, 245, 880, 247, 873, 872, 797, 248, 0, 249,
	0, 250, 0, 0, 251, 871, 253, 0, 254, 0,
	255, 256, 0, 803, 257, 258, 260, 263, 259, 264,
	265, 266, 927, 928, 816, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 870, 868, 869, 0, 272, 0,
	273, 0, 0, 909, 274, 275, 0, 276, 929, 0,
	826, 277, 0, 278, 279, 280, 281, 282, 283, 899,
	900, 903, 911, 0, 901, 847, 0, 0, 0, 0,
	284, 286, 293, 0, 910, 287, 859, 850, 861, 863,
	864, 865, 860, 0, 852, 0, 294, 912, 913, 295,
	296, 297, 914, 885, 886, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 930, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	799, 798, 314, 315, 317, 839, 316, 917, 319, 320,
	322, 321, 794, 0, 918, 817, 902, 874, 323, 324,
	0, 848, 849, 0, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 931, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 932, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 867, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 804, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 840, 841, 843,
	844, 382, 386, 389, 390, 895, 391, 371, 372, 392,
	922, 393, 862, 842, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 906, 400, 401, 402, 933, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 838, 0, 881, 882, 883, 884, 0, 0, 417,
	418, 934, 419, 935, 815, 420, 421, 422, 0, 423,
	424, 0, 800, 425, 426, 427, 428, 430, 896, 431,
	0, 846, 432, 433, 434, 482, 878, 924, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 795, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 791, 792, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 2017,
	819, 851, 808, 809, 810, 806, 807, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 898,
	825, 0, 0, 0, 213, 214, 215, 443, 866, 845,
	877, 835, 876, 875, 0, 219, 837, 836, 222, 223,
	224, 827, 897, 225, 925, 926, 449, 0, 226, 904,
	0, 887, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	907, 240, 241, 890, 888, 889, 894, 892, 891, 893,
	242, 243, 244, 245, 880, 247, 873, 872, 797, 248,
	0, 249, 0, 250, 0, 0, 251, 871, 253, 0,
	254, 0, 255, 256, 0, 803, 257, 258, 260, 263,
	259, 264, 265, 266, 927, 928, 816, 908, 0, 0,
	0, 0, 0, 267, 268, 269, 870, 868, 869, 0,
	272, 0, 273, 0, 0, 909, 274, 275, 0, 276,
	929, 0, 826, 277, 0, 278, 279, 280, 281, 282,
	283, 899, 900, 903, 911, 0, 901, 847, 0, 0,
	0, 0, 284, 286, 293, 0, 910, 287, 859, 850,
	861, 863, 864, 865, 860, 0, 852, 0, 294, 912,
	913, 295, 296, 297, 914, 885, 886, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 930, 915,
	307, 308, 916, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 799, 798, 314, 315, 317, 839, 316, 917,
	319, 320, 322, 321, 794, 0, 918, 817, 902, 874,
	323, 324, 0, 848, 849, 0, 0, 328, 329, 0,
	0, 330, 469, 919, 331, 920, 931, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 932, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	867, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	921, 365, 366, 367, 368, 804, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 0, 387, 388, 840,
	841, 843, 844, 382, 386, 389, 390, 895, 391, 371,
	372, 392, 922, 393, 862, 842, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 906, 400, 401, 402, 933,
	0, 407, 408, 406, 0, 409, 410, 411, 412, 413,
	261, 414, 262, 838, 0, 881, 882, 883, 884, 0,
	0, 417, 418, 934, 419, 935, 815, 420, 421, 422,
	0, 423, 424, 0, 800, 425, 426, 427, 428, 430,
	896, 431, 0, 846, 432, 433, 434, 482, 878, 924,
	0, 436, 435, 485, 0, 0, 0, 0, 437, 438,
	486, 439, 440, 441, 795, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 791, 792, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 2015, 819, 851, 808, 809, 810, 806, 807, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 898, 825, 0, 0, 0, 213, 214, 215, 443,
	866, 845, 877, 835, 876, 875, 0, 219, 837, 836,
	222, 223, 224, 827, 897, 225, 925, 926, 449, 0,
	226, 904, 0, 887, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 907, 240, 241, 890, 888, 889, 894, 892,
	891, 893, 242, 243, 244, 245, 880, 247, 873, 872,
	797, 248, 0, 249, 0, 250, 0, 0, 251, 871,
	253, 0, 254, 0, 255, 256, 0, 803, 257, 258,
	260, 263, 259, 264, 265, 266, 927, 928, 816, 908,
	0, 0, 0, 0, 0, 267, 268, 269, 870, 868,
	869, 0, 272, 0, 273, 0, 0, 909, 274, 275,
	0, 276, 929, 0, 826, 277, 0, 278, 279, 280,
	281, 282, 283, 899, 900, 903, 911, 0, 901, 847,
	0, 0, 0, 0, 284, 286, 293, 0, 910, 287,
	859, 850, 861, 863, 864, 865, 860, 0, 852, 0,
	294, 912, 913, 295, 296, 297, 914, 885, 886, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	930, 915, 307, 308, 916, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 799, 798, 314, 315, 317, 839,
	316, 917, 319, 320, 322, 321, 794, 0, 918, 817,
	902, 874, 323, 324, 0, 848, 849, 0, 0, 328,
	329, 0, 0, 330, 469, 919, 331, 920, 931, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 932,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 867, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 921, 365, 366, 367, 368, 804, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 840, 841, 843, 844, 382, 386, 389, 390, 895,
	391, 371, 372, 392, 922, 393, 862, 842, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 906, 400, 401,
	402, 933, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 838, 0, 881, 882, 883,
	884, 0, 0, 417, 418, 934, 419, 935, 815, 420,
	421, 422, 0, 423, 424, 0, 800, 425, 426, 427,
	428, 430, 896, 431, 0, 846, 432, 433, 434, 482,
	878, 924, 0, 436, 435, 485, 0, 0, 0, 0,
	437, 438, 486, 439, 440, 441, 795, 0, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 0, 791,
	792, 0, 0, 0, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 2013, 819, 2005, 808, 809, 810, 806,
	807, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 898, 825, 0, 0, 0, 213, 214,
	215, 443, 866, 845, 877, 835, 876, 875, 0, 219,
	837, 836, 222, 223, 224, 827, 897, 225, 925, 926,
	449, 0, 226, 904, 0, 887, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 890, 888, 889,
	894, 892, 891, 893, 242, 243, 244, 245, 880, 2008,
	873, 872, 797, 248, 0, 249, 0, 250, 0, 0,
	251, 871, 253, 0, 254, 0, 255, 256, 0, 803,
	257, 258, 260, 263, 259, 264, 265, 266, 927, 928,
	816, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	870, 868, 869, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 929, 0, 826, 277, 0, 278,
	279, 2009, 281, 282, 283, 899, 900, 903, 911, 0,
	901, 847, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 859, 850, 861, 863, 864, 865, 860, 0,
	852, 0, 294, 912, 913, 295, 296, 297, 914, 885,
	886, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 930, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 799, 798, 2010, 2007,
	317, 839, 316, 917, 319, 320, 322, 321, 794, 0,
	918, 817, 902, 874, 323, 324, 0, 848, 849, 0,
	0, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	931, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 932, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 867, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 804,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 2011,
	0, 387, 388, 840, 841, 843, 844, 382, 386, 389,
	390, 895, 391, 371, 372, 392, 922, 393, 862, 842,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 906,
	400, 401, 402, 933, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 838, 0, 881,
	882, 883, 884, 0, 0, 417, 418, 934, 419, 935,
	815, 420, 421, 422, 0, 423, 424, 0, 800, 425,
	426, 427, 428, 430, 896, 431, 0, 846, 432, 433,
	434, 482, 878, 924, 0, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 2006, 441, 795, 0,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 791, 792, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 2002, 819, 2005, 808, 809,
	810, 806, 807, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 898, 825, 0, 0, 0,
	213, 214, 215, 443, 866, 845, 877, 835, 876, 875,
	0, 219, 837, 836, 222, 223, 224, 827, 897, 225,
	925, 926, 449, 0, 226, 904, 0, 887, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 907, 240, 241, 890,
	888, 889, 894, 892, 891, 893, 242, 243, 244, 245,
	880, 2008, 873, 872, 797, 248, 0, 249, 0, 250,
	0, 0, 251, 871, 253, 0, 254, 0, 255, 256,
	0, 803, 257, 258, 260, 263, 259, 264, 265, 266,
	927, 928, 816, 908, 0, 0, 0, 0, 0, 267,
	268, 269, 870, 868, 869, 0, 272, 0, 273, 0,
	0, 909, 274, 275, 0, 276, 929, 0, 826, 277,
	0, 278, 279, 2009, 281, 282, 283, 899, 900, 903,
	911, 0, 901, 847, 0, 0, 0, 0, 284, 286,
	293, 0, 910, 287, 859, 850, 861, 863, 864, 865,
	860, 0, 852, 0, 294, 912, 913, 295, 296, 297,
	914, 885, 886, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 930, 915, 307, 308, 916, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 799, 798,
	2010, 2007, 317, 839, 316, 917, 319, 320, 322, 321,
	794, 0, 918, 817, 902, 874, 323, 324, 0, 848,
	849, 0, 0, 328, 329, 0, 0, 330, 469, 919,
	331, 920, 931, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 932, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 867, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 921, 365, 366, 367,
	368, 804, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 2011, 0, 387, 388, 840, 841, 843, 844, 382,
	386, 389, 390, 895, 391, 371, 372, 392, 922, 393,
	862, 842, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 906, 400, 401, 402, 933, 0, 407, 408, 406,
	0, 409, 410, 411, 412, 413, 261, 414, 262, 838,
	0, 881, 882, 883, 884, 0, 0, 417, 418, 934,
	419, 935, 815, 420, 421, 422, 0, 423, 424, 0,
	800, 425, 426, 427, 428, 430, 896, 431, 0, 846,
	432, 433, 434, 482, 878, 924, 0, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 2006, 441,
	795, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 791, 792, 851, 808, 809, 810, 806,
	807, 820, 821, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 898, 825, 0, 0, 0, 213, 214,
	215, 443, 866, 845, 877, 835, 876, 875, 0, 219,
	837, 836, 222, 223, 224, 827, 897, 225, 925, 926,
	449, 0, 226, 904, 0, 887, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 890, 888, 889,
	894, 892, 891, 893, 242, 243, 244, 245, 880, 247,
	873, 872, 797, 248, 0, 249, 0, 250, 0, 0,
	251, 871, 253, 0, 254, 0, 255, 256, 0, 803,
	257, 258, 260, 263, 259, 264, 265, 266, 927, 928,
	816, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	870, 868, 869, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 929, 0, 826, 277, 0, 278,
	279, 280, 281, 282, 283, 899, 900, 903, 911, 0,
	901, 847, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 859, 850, 861, 863, 864, 865, 860, 0,
	852, 0, 294, 912, 913, 295, 296, 297, 914, 885,
	886, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 930, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 799, 798, 314, 315,
	317, 839, 316, 917, 319, 320, 322, 321, 794, 0,
	918, 817, 902, 874, 323, 324, 0, 848, 849, 0,
	0, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	931, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 932, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 867, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 804,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 840, 841, 843, 844, 382, 386, 389,
	390, 895, 391, 371, 372, 392, 922, 393, 862, 842,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 906,
	400, 401, 402, 933, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 838, 0, 881,
	882, 883, 884, 0, 0, 417, 418, 934, 419, 935,
	815, 420, 421, 422, 0, 423, 424, 0, 800, 425,
	426, 427, 428, 430, 896, 431, 0, 846, 432, 433,
	434, 482, 878, 924, 0, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 795, 0,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 791, 792, 0, 0, 0, 0, 0, 1464, 0,
	821, 0, 0, 0, 0, 0, 819, 851, 808, 809,
	810, 806, 807, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 1849,
	212, 0, 0, 0, 0, 898, 825, 0, 0, 0,
	213, 214, 215, 443, 866, 845, 877, 835, 876, 875,
	0, 219, 837, 836, 222, 223, 224, 827, 897, 225,
	925, 926, 449, 0, 226, 904, 0, 887, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 907, 240, 241, 890,
	888, 889, 894, 892, 891, 893, 242, 243, 244, 245,
	880, 247, 873, 872, 797, 248, 0, 249, 0, 250,
	0, 0, 251, 871, 253, 0, 254, 0, 255, 256,
	0, 803, 257, 258, 260, 263, 259, 264, 265, 266,
	927, 928, 816, 908, 0, 0, 0, 0, 0, 267,
	268, 269, 870, 868, 869, 0, 272, 0, 273, 0,
	0, 909, 274, 275, 0, 276, 929, 0, 826, 277,
	0, 278, 279, 280, 281, 282, 283, 899, 900, 903,
	911, 0, 901, 847, 0, 0, 0, 0, 284, 286,
	293, 0, 910, 287, 859, 850, 861, 863, 864, 865,
	860, 0, 852, 0, 294, 912, 913, 295, 296, 297,
	914, 885, 886, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 930, 915, 307, 308, 916, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 799, 798,
	314, 315, 317, 839, 316, 917, 319, 320, 322, 321,
	794, 0, 918, 817, 902, 874, 323, 324, 0, 848,
	849, 0, 0, 328, 329, 0, 0, 330, 469, 919,
	331, 920, 931, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 932, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 867, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 921, 365, 366, 367,
	368, 804, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 380, 0, 387, 388, 840, 841, 843, 844, 382,
	386, 389, 390, 895, 391, 371, 372, 392, 922, 393,
	862, 842, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 906, 400, 401, 402, 933, 0, 407, 408, 406,
	0, 409, 410, 411, 412, 413, 261, 414, 262, 838,
	0, 881, 882, 883, 884, 0, 0, 417, 418, 934,
	419, 935, 815, 420, 421, 422, 0, 423, 424, 0,
	800, 425, 426, 427, 428, 430, 896, 431, 0, 846,
	432, 433, 434, 482, 878, 924, 0, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 440, 441,
	795, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 791, 792, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 1163, 819, 851,
	808, 809, 810, 806, 807, 820, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 898, 825, 0,
	0, 0, 213, 214, 215, 443, 866, 845, 877, 835,
	876, 875, 0, 219, 837, 836, 222, 223, 224, 827,
	897, 225, 925, 926, 449, 0, 226, 904, 0, 887,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	241, 890, 888, 889, 894, 892, 891, 893, 242, 243,
	244, 245, 880, 247, 873, 872, 797, 248, 0, 249,
	0, 250, 0, 0, 251, 871, 253, 0, 254, 0,
	255, 256, 0, 803, 257, 258, 260, 263, 259, 264,
	265, 266, 927, 928, 816, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 870, 868, 869, 0, 272, 0,
	273, 0, 0, 909, 274, 275, 0, 276, 929, 0,
	826, 277, 0, 278, 279, 280, 281, 282, 283, 1162,
	900, 903, 911, 0, 901, 847, 0, 0, 0, 0,
	284, 286, 293, 0, 910, 287, 859, 850, 861, 863,
	864, 865, 860, 0, 852, 0, 294, 912, 913, 295,
	296, 297, 914, 885, 886, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 930, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	799, 798, 314, 315, 317, 839, 316, 917, 319, 320,
	322, 321, 794, 0, 918, 817, 902, 874, 323, 324,
	0, 848, 849, 0, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 931, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 932, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 867, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 804, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 840, 841, 843,
	844, 382, 386, 389, 390, 895, 391, 371, 372, 392,
	922, 393, 862, 842, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 906, 400, 401, 402, 933, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 838, 0, 881, 882, 883, 884, 0, 0, 417,
	418, 934, 419, 935, 815, 420, 421, 422, 0, 423,
	424, 0, 800, 425, 426, 427, 428, 430, 896, 431,
	0, 846, 432, 433, 434, 482, 878, 924, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 795, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 791, 792, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 1157,
	819, 851, 808, 809, 810, 806, 807, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 898,
	825, 0, 0, 0, 213, 214, 215, 443, 866, 845,
	877, 835, 876, 875, 0, 219, 837, 836, 222, 223,
	224, 827, 897, 225, 925, 926, 449, 0, 226, 904,
	0, 887, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	907, 240, 241, 890, 888, 889, 894, 892, 891, 893,
	242, 243, 244, 245, 880, 247, 873, 872, 797, 248,
	0, 249, 0, 250, 0, 0, 251, 871, 253, 0,
	254, 0, 255, 256, 0, 803, 257, 258, 260, 263,
	259, 264, 265, 266, 927, 928, 816, 908, 0, 0,
	0, 0, 0, 267, 268, 269, 870, 868, 869, 0,
	272, 0, 273, 0, 0, 909, 274, 275, 0, 276,
	929, 0, 826, 277, 0, 278, 279, 280, 281, 282,
	283, 1156, 900, 903, 911, 0, 901, 847, 0, 0,
	0, 0, 284, 286, 293, 0, 910, 287, 859, 850,
	861, 863, 864, 865, 860, 0, 852, 0, 294, 912,
	913, 295, 296, 297, 914, 885, 886, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 930, 915,
	307, 308, 916, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 799, 798, 314, 315, 317, 839, 316, 917,
	319, 320, 322, 321, 794, 0, 918, 817, 902, 874,
	323, 324, 0, 848, 849, 0, 0, 328, 329, 0,
	0, 330, 469, 919, 331, 920, 931, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 932, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	867, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	921, 365, 366, 367, 368, 804, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 0, 387, 388, 840,
	841, 843, 844, 382, 386, 389, 390, 895, 391, 371,
	372, 392, 922, 393, 862, 842, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 906, 400, 401, 402, 933,
	0, 407, 408, 406, 0, 409, 410, 411, 412, 413,
	261, 414, 262, 838, 0, 881, 882, 883, 884, 0,
	0, 417, 418, 934, 419, 935, 815, 420, 421, 422,
	0, 423, 424, 0, 800, 425, 426, 427, 428, 430,
	896, 431, 0, 846, 432, 433, 434, 482, 878, 924,
	0, 436, 435, 485, 0, 0, 0, 0, 437, 438,
	486, 439, 440, 441, 795, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 791, 792, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 1152, 819, 851, 808, 809, 810, 806, 807, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 898, 825, 0, 0, 0, 213, 214, 215, 443,
	866, 845, 877, 835, 876, 875, 0, 219, 837, 836,
	222, 223, 224, 827, 897, 225, 925, 926, 449, 0,
	226, 904, 0, 887, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 907, 240, 241, 890, 888, 889, 894, 892,
	891, 893, 242, 243, 244, 245, 880, 247, 873, 872,
	797, 248, 0, 249, 0, 250, 0, 0, 251, 871,
	253, 0, 254, 0, 255, 256, 0, 803, 257, 258,
	260, 263, 259, 264, 265, 266, 927, 928, 816, 908,
	0, 0, 0, 0, 0, 267, 268, 269, 870, 868,
	869, 0, 272, 0, 273, 0, 0, 909, 274, 275,
	0, 276, 929, 0, 826, 277, 0, 278, 279, 280,
	281, 282, 283, 899, 900, 903, 911, 0, 901, 847,
	0, 0, 0, 0, 284, 286, 293, 0, 910, 287,
	859, 850, 861, 863, 864, 865, 860, 0, 852, 0,
	294, 912, 913, 295, 296, 297, 914, 885, 886, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	930, 915, 307, 308, 916, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 799, 798, 314, 315, 317, 839,
	316, 917, 319, 320, 322, 321, 794, 0, 918, 817,
	902, 874, 323, 324, 0, 848, 849, 0, 0, 328,
	329, 0, 0, 330, 469, 919, 331, 920, 931, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 932,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 867, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 921, 365, 366, 367, 368, 804, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 840, 841, 843, 844, 382, 386, 389, 390, 895,
	391, 371, 372, 392, 922, 393, 862, 842, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 906, 400, 401,
	402, 933, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 838, 0, 881, 882, 883,
	884, 0, 0, 417, 418, 934, 419, 935, 815, 420,
	421, 422, 0, 423, 424, 0, 800, 425, 426, 427,
	428, 430, 896, 431, 0, 846, 432, 433, 434, 482,
	878, 924, 0, 436, 435, 485, 0, 0, 0, 0,
	437, 438, 486, 439, 440, 441, 795, 0, 0, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 0, 791,
	792, 851, 808, 809, 810, 806, 807, 820, 821, 0,
	0, 0, 0, 0, 819, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 898,
	825, 0, 0, 0, 213, 214, 215, 443, 866, 845,
	877, 835, 876, 875, 0, 219, 837, 836, 222, 223,
	224, 827, 897, 225, 925, 926, 449, 0, 226, 904,
	0, 887, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	907, 240, 241, 890, 888, 889, 894, 892, 891, 893,
	242, 243, 244, 245, 880, 247, 873, 872, 797, 248,
	0, 249, 0, 250, 0, 0, 251, 871, 253, 0,
	254, 0, 255, 256, 0, 803, 257, 258, 260, 263,
	259, 264, 265, 266, 927, 928, 816, 908, 0, 0,
	0, 0, 0, 267, 268, 269, 870, 868, 869, 0,
	272, 0, 273, 0, 0, 909, 274, 275, 0, 276,
	929, 0, 826, 277, 0, 278, 279, 280, 281, 282,
	283, 899, 900, 903, 911, 0, 901, 847, 0, 0,
	0, 0, 284, 286, 293, 0, 910, 287, 859, 850,
	861, 863, 864, 865, 860, 0, 852, 0, 294, 912,
	913, 295, 296, 297, 914, 885, 886, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 930, 915,
	307, 308, 916, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 799, 798, 314, 315, 317, 839, 316, 917,
	319, 320, 322, 321, 794, 0, 918, 817, 902, 874,
	323, 324, 0, 848, 849, 0, 0, 328, 329, 0,
	0, 330, 469, 919, 331, 920, 931, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 932, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	867, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	921, 365, 366, 367, 368, 804, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 0, 387, 388, 840,
	841, 843, 844, 382, 386, 389, 390, 895, 391, 371,
	372, 392, 922, 393, 862, 842, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 906, 400, 401, 402, 933,
	0, 407, 408, 406, 0, 409, 410, 411, 412, 413,
	261, 414, 262, 838, 0, 881, 882, 883, 884, 0,
	0, 417, 418, 934, 419, 935, 815, 420, 421, 422,
	0, 423, 424, 0, 800, 425, 426, 427, 428, 430,
	896, 431, 0, 846, 432, 433, 434, 482, 878, 924,
	0, 436, 435, 485, 0, 0, 0, 0, 437, 438,
	486, 439, 440, 441, 795, 0, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 791, 792, 851,
	808, 809, 810, 806, 807, 820, 821, 0, 0, 0,
	0, 0, 819, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 898, 825, 0,
	0, 0, 213, 214, 215, 443, 866, 845, 877, 835,
	876, 875, 0, 219, 837, 836, 222, 223, 224, 827,
	897, 225, 925, 926, 449, 0, 226, 904, 0, 887,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	3221, 890, 888, 889, 894, 892, 891, 893, 242, 243,
	244, 245, 880, 247, 873, 872, 797, 248, 0, 249,
	0, 250, 0, 0, 251, 871, 253, 0, 254, 0,
	255, 256, 0, 803, 257, 258, 260, 263, 259, 264,
	265, 266, 927, 928, 816, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 870, 868, 869, 0, 272, 0,
	273, 0, 0, 909, 274, 275, 0, 276, 929, 0,
	826, 277, 0, 278, 279, 280, 281, 282, 283, 899,
	900, 903, 911, 0, 901, 847, 0, 0, 0, 0,
	284, 286, 293, 0, 910, 287, 859, 850, 861, 863,
	864, 865, 860, 0, 852, 0, 294, 912, 913, 295,
	296, 297, 914, 885, 886, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 930, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	799, 798, 314, 315, 317, 839, 316, 917, 319, 320,
	322, 321, 794, 0, 918, 817, 902, 874, 323, 324,
	0, 848, 849, 0, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 931, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 932, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 867, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 804, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 840, 841, 843,
	844, 382, 386, 389, 390, 895, 391, 371, 372, 392,
	922, 393, 862, 842, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 906, 400, 401, 402, 933, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 838, 0, 881, 882, 883, 884, 0, 0, 417,
	418, 934, 419, 935, 815, 420, 421, 422, 0, 3220,
	424, 0, 800, 425, 426, 427, 428, 430, 896, 431,
	0, 846, 432, 433, 434, 482, 878, 924, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 795, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 791, 792, 851, 808, 809,
	810, 806, 807, 820, 821, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 898, 825, 0, 0, 0,
	213, 214, 215, 3219, 866, 845, 877, 835, 876, 875,
	0, 219, 837, 836, 222, 223, 224, 827, 897, 225,
	925, 926, 449, 0, 226, 904, 0, 887, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 907, 240, 3221, 890,
	888, 889, 894, 892, 891, 893, 242, 243, 244, 245,
	880, 247, 873, 872, 797, 248, 0, 249, 0, 250,
	0, 0, 251, 871, 253, 0, 254, 0, 255, 256,
	0, 803, 257, 258, 260, 263, 259, 264, 265, 266,
	927, 928, 816, 908, 0, 0, 0, 0, 0, 267,
	268, 269, 870, 868, 869, 0, 272, 0, 273, 0,
	0, 909, 274, 275, 0, 276, 929, 0, 826, 277,
	0, 278, 279, 280, 281, 282, 283, 899, 900, 903,
	911, 0, 901, 847, 0, 0, 0, 0, 284, 286,
	293, 0, 910, 287, 859, 850, 861, 863, 864, 865,
	860, 0, 852, 0, 294, 912, 913, 295, 296, 297,
	914, 885, 886, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 930, 915, 307, 308, 916, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 799, 798,
	314, 315, 317, 839, 316, 917, 319, 320, 322, 321,
	794, 0, 918, 817, 902, 874, 323, 324, 0, 848,
	849, 0, 0, 328, 329, 0, 0, 330, 469, 919,
	331, 920, 931, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 932, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 867, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 921, 365, 366, 367,
	368, 804, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 380, 0, 387, 388, 840, 841, 843, 844, 382,
	386, 389, 390, 895, 391, 371, 372, 392, 922, 393,
	862, 842, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 906, 400, 401, 402, 933, 0, 407, 408, 406,
	0, 409, 410, 411, 412, 413, 261, 414, 262, 838,
	0, 881, 882, 883, 884, 0, 0, 417, 418, 934,
	419, 935, 815, 420, 421, 422, 0, 3220, 424, 0,
	800, 425, 426, 427, 428, 430, 896, 431, 0, 846,
	432, 433, 434, 482, 878, 924, 0, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 440, 441,
	795, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 791, 792, 851, 808, 809, 810, 806,
	807, 820, 821, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 898, 825, 0, 0, 0, 213, 214,
	215, 443, 866, 845, 877, 835, 876, 875, 0, 219,
	837, 836, 222, 223, 224, 827, 897, 225, 925, 926,
	449, 0, 226, 904, 0, 887, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 890, 888, 889,
	894, 892, 891, 893, 242, 243, 244, 245, 880, 247,
	873, 872, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 871, 253, 0, 254, 0, 255, 256, 0, 803,
	257, 258, 260, 263, 259, 264, 265, 266, 927, 928,
	816, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	870, 868, 869, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 929, 0, 826, 277, 0, 278,
	279, 280, 281, 282, 283, 899, 900, 903, 911, 0,
	901, 847, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 859, 850, 861, 863, 864, 865, 860, 0,
	852, 0, 294, 912, 913, 295, 296, 297, 914, 885,
	886, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 930, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 973, 972, 314, 315,
	317, 839, 316, 917, 319, 320, 322, 321, 0, 0,
	918, 817, 902, 874, 323, 324, 0, 848, 849, 0,
	0, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	931, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 932, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 867, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 804,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 840, 841, 843, 844, 382, 386, 389,
	390, 895, 391, 371, 372, 392, 922, 393, 862, 842,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 906,
	400, 401, 402, 933, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 838, 0, 881,
	882, 883, 884, 0, 0, 417, 418, 934, 419, 935,
	815, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 896, 431, 0, 846, 432, 433,
	434, 482, 878, 924, 0, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 0, 0,
	0, 0, 0, 0, 0, 0, 2027, 0, 0, 0,
	0, 2025, 2026, 851, 808, 809, 810, 806, 807, 820,
	821, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 898, 825, 0, 0, 0, 213, 214, 215, 0,
	866, 845, 877, 835, 876, 875, 0, 219, 837, 836,
	222, 223, 224, 827, 897, 225, 925, 926, 449, 0,
	226, 904, 0, 887, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 907, 240, 3221, 890, 888, 889, 894, 892,
	891, 893, 242, 243, 244, 245, 880, 247, 873, 872,
	797, 248, 0, 249, 0, 250, 0, 0, 251, 871,
	253, 0, 254, 0, 255, 256, 0, 803, 257, 258,
	260, 263, 259, 264, 265, 266, 927, 928, 816, 908,
	0, 0, 0, 0, 0, 267, 268, 269, 870, 868,
	869, 0, 272, 0, 273, 0, 0, 909, 274, 275,
	0, 276, 929, 0, 826, 277, 0, 278, 279, 280,
	281, 282, 283, 899, 900, 903, 0, 0, 901, 847,
	0, 0, 0, 0, 284, 286, 293, 0, 910, 287,
	859, 850, 861, 863, 864, 865, 860, 0, 852, 0,
	294, 0, 0, 295, 296, 297, 914, 885, 886, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	930, 915, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 799, 798, 314, 315, 317, 839,
	316, 917, 319, 320, 322, 321, 794, 0, 0, 817,
	902, 874, 323, 324, 0, 848, 849, 0, 0, 328,
	329, 0, 0, 330, 469, 919, 331, 920, 931, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 932,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 867, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 921, 365, 366, 367, 368, 804, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 840, 841, 843, 844, 382, 386, 389, 390, 895,
	391, 371, 372, 392, 0, 393, 862, 842, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 906, 400, 401,
	402, 933, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 838, 0, 881, 882, 883,
	884, 0, 0, 417, 418, 934, 419, 935, 815, 420,
	421, 422, 0, 3220, 424, 0, 800, 425, 426, 427,
	428, 430, 896, 431, 0, 846, 432, 433, 434, 482,
	878, 924, 0, 436, 435, 485, 0, 0, 0, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	784, 0, 971, 0, 0, 0, 0, 0, 0, 791,
	792, 0, 0, 0, 0, 0, 0, 0, 821, 207,
	208, 209, 210, 211, 819, 212, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 213, 214, 215, 443, 444,
	216, 445, 217, 218, 446, 0, 219, 220, 221, 222,
	223, 224, 0, 897, 225, 447, 448, 449, 0, 226,
	904, 0, 887, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 907, 240, 241, 890, 888, 889, 894, 892, 891,
	893, 242, 243, 244, 245, 246, 247, 451, 452, 0,
	248, 0, 249, 0, 250, 0, 0, 251, 252, 253,
	0, 254, 0, 255, 256, 0, 453, 257, 258, 260,
	263, 259, 264, 265, 266, 927, 928, 0, 908, 0,
	0, 0, 0, 0, 267, 268, 269, 456, 270, 271,
	0, 272, 0, 273, 0, 0, 909, 274, 275, 0,
	276, 929, 0, 458, 277, 0, 278, 279, 280, 281,
	282, 283, 899, 900, 903, 911, 0, 901, 285, 0,
	0, 0, 0, 284, 286, 293, 0, 910, 287, 462,
	289, 288, 290, 291, 292, 463, 0, 464, 0, 294,
	912, 913, 295, 296, 297, 914, 298, 299, 0, 0,
	300, 301, 302, 303, 958, 305, 304, 0, 306, 930,
	915, 307, 308, 916, 0, 309, 310, 0, 0, 311,
	0, 312, 313, 973, 972, 314, 315, 317, 318, 316,
	917, 319, 320, 322, 321, 0, 0, 918, 0, 902,
	468, 323, 324, 0, 325, 326, 0, 963, 328, 329,
	0, 0, 330, 469, 919, 331, 920, 931, 332, 327,
	333, 334, 335, 336, 337, 338, 0, 339, 932, 340,
	472, 341, 0, 342, 0, 343, 344, 345, 346, 347,
	348, 473, 349, 350, 0, 351, 352, 353, 354, 355,
	0, 357, 358, 359, 356, 360, 361, 362, 363, 0,
	364, 921, 365, 366, 367, 368, 474, 965, 0, 370,
	374, 375, 376, 377, 378, 379, 380, 176, 387, 388,
	381, 383, 384, 385, 382, 386, 389, 390, 895, 391,
	371, 372, 392, 922, 393, 475, 394, 395, 0, 405,
	396, 397, 398, 373, 399, 403, 404, 400, 401, 402,
	933, 0, 407, 408, 406, 178, 409, 410, 411, 412,
	413, 261, 414, 262, 415, 0, 477, 478, 479, 416,
	0, 0, 417, 418, 934, 419, 935, 0, 420, 421,
	422, 0, 423, 424, 0, 0, 425, 426, 427, 428,
	430, 896, 431, 0, 429, 432, 433, 434, 1271, 483,
	484, 0, 436, 435, 485, 971, 0, 0, 170, 437,
	438, 486, 439, 440, 441, 0, 171, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 898, 0, 955, 0, 1539, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 897, 225, 447, 448,
	449, 0, 226, 904, 0, 887, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 890, 888, 889,
	894, 892, 891, 893, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 927, 928,
	0, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 929, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 899, 900, 903, 911, 0,
	901, 285, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 294, 912, 913, 295, 296, 297, 914, 298,
	299, 0, 0, 300, 301, 302, 303, 958, 305, 304,
	0, 306, 930, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 973, 972, 314, 315,
	317, 318, 316, 917, 319, 320, 322, 321, 0, 0,
	918, 0, 902, 468, 323, 324, 0, 325, 326, 0,
	963, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	931, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 932, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 474,
	965, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	176, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 895, 391, 371, 372, 392, 922, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 933, 0, 407, 408, 406, 178, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 477,
	478, 479, 416, 0, 0, 417, 418, 934, 419, 935,
	0, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 896, 431, 0, 429, 432, 433,
	434, 1271, 483, 484, 0, 436, 435, 485, 0, 0,
	0, 170, 437, 438, 486, 439, 440, 441, 0, 171,
	0, 0, 2435, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	1539, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 897, 225, 447, 448, 449,
	0, 226, 904, 0, 887, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 907, 240, 241, 890, 888, 889, 894,
	892, 891, 893, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 927, 928, 0,
	908, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 909, 274,
	275, 0, 276, 929, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 899, 900, 903, 911, 0, 901,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 910,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 912, 913, 295, 296, 297, 914, 298, 299,
	0, 0, 300, 301, 302, 303, 958, 305, 304, 0,
	306, 930, 915, 307, 308, 916, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 973, 972, 314, 315, 317,
	318, 316, 917, 319, 320, 322, 321, 0, 0, 918,
	0, 902, 468, 323, 324, 0, 325, 326, 0, 963,
	328, 329, 0, 0, 330, 469, 919, 331, 920, 931,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	932, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 921, 365, 366, 367, 368, 474, 965,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	895, 391, 371, 372, 392, 922, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 933, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 934, 419, 935, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 896, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 0, 954, 0,
	971, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 955, 898, 960,
	0, 0, 0, 213, 214, 215, 443, 444, 216, 445,
	217, 218, 446, 0, 219, 220, 221, 222, 223, 224,
	0, 897, 225, 447, 448, 449, 0, 226, 904, 0,
	887, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 907,
	240, 241, 890, 888, 889, 894, 892, 891, 893, 242,
	243, 244, 245, 246, 247, 451, 452, 0, 248, 0,
	249, 0, 250, 0, 0, 251, 252, 253, 0, 254,
	0, 255, 256, 0, 453, 257, 258, 260, 263, 259,
	264, 265, 266, 927, 928, 0, 908, 0, 0, 0,
	0, 0, 267, 268, 269, 456, 270, 271, 0, 272,
	0, 273, 0, 0, 909, 274, 275, 0, 276, 929,
	0, 458, 277, 0, 278, 279, 280, 281, 282, 283,
	899, 900, 903, 911, 0, 901, 285, 0, 0, 0,
	0, 284, 286, 293, 0, 910, 287, 462, 289, 288,
	290, 291, 292, 463, 0, 464, 0, 294, 912, 913,
	295, 296, 297, 914, 298, 299, 0, 0, 300, 301,
	302, 303, 958, 305, 304, 0, 306, 930, 915, 307,
	308, 916, 0, 309, 310, 0, 0, 311, 0, 312,
	313, 973, 972, 314, 315, 317, 318, 316, 917, 319,
	320, 322, 321, 0, 0, 918, 0, 902, 468, 323,
	324, 0, 325, 326, 0, 963, 328, 329, 0, 0,
	330, 469, 919, 331, 920, 931, 332, 327, 333, 334,
	335, 336, 337, 338, 0, 339, 932, 340, 472, 341,
	0, 342, 0, 343, 344, 345, 346, 347, 348, 473,
	349, 350, 0, 351, 352, 353, 354, 355, 0, 357,
	358, 359, 356, 360, 361, 362, 363, 0, 364, 921,
	365, 366, 367, 368, 474, 965, 0, 370, 374, 375,
	376, 377, 378, 379, 380, 0, 387, 388, 381, 383,
	384, 385, 382, 386, 389, 390, 895, 391, 371, 372,
	392, 922, 393, 475, 394, 395, 0, 405, 396, 397,
	398, 373, 399, 403, 404, 400, 401, 402, 933, 0,
	407, 408, 406, 0, 409, 410, 411, 412, 413, 261,
	414, 262, 415, 0, 477, 478, 479, 416, 0, 0,
	417, 418, 934, 419, 935, 0, 420, 421, 422, 0,
	423, 424, 0, 0, 425, 426, 427, 428, 430, 896,
	431, 0, 429, 432, 433, 434, 482, 483, 484, 0,
	436, 435, 485, 971, 0, 0, 0, 437, 438, 486,
	439, 440, 441, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 898, 0, 955, 0, 960, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 897, 225, 447, 448, 449, 0,
	226, 904, 0, 887, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 907, 240, 241, 890, 888, 889, 894, 892,
	891, 893, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 927, 928, 0, 908,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 909, 274, 275,
	0, 276, 929, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 899, 900, 903, 911, 0, 901, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 910, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 912, 913, 295, 296, 297, 914, 298, 299, 0,
	0, 300, 301, 302, 303, 958, 305, 304, 0, 306,
	930, 915, 307, 308, 916, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 973, 972, 314, 315, 317, 318,
	316, 917, 319, 320, 322, 321, 0, 0, 918, 0,
	902, 468, 323, 324, 0, 325, 326, 0, 963, 328,
	329, 0, 0, 330, 469, 919, 331, 920, 931, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 932,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 921, 365, 366, 367, 368, 474, 965, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 895,
	391, 371, 372, 392, 922, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 933, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 934, 419, 935, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 896, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 0, 436, 435, 485, 971, 0, 0, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 898, 0, 955, 0, 960, 213,
	214, 215, 443, 444, 216, 445, 217, 218, 446, 0,
	219, 220, 221, 222, 223, 224, 0, 897, 225, 447,
	448, 449, 0, 226, 904, 0, 887, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 907, 240, 241, 890, 888,
	889, 894, 892, 891, 893, 242, 243, 244, 245, 246,
	247, 451, 452, 0, 248, 0, 249, 0, 250, 0,
	0, 251, 252, 253, 0, 254, 0, 255, 256, 0,
	453, 257, 258, 260, 263, 259, 264, 265, 266, 927,
	928, 0, 908, 0, 0, 0, 0, 0, 267, 268,
	269, 456, 270, 271, 0, 272, 0, 273, 0, 0,
	909, 274, 275, 0, 276, 929, 0, 458, 277, 0,
	278, 279, 280, 281, 282, 283, 899, 900, 903, 911,
	0, 901, 285, 0, 0, 0, 0, 284, 286, 293,
	0, 910, 287, 462, 289, 288, 290, 291, 292, 463,
	0, 464, 0, 294, 912, 913, 295, 296, 297, 914,
	298, 299, 0, 0, 300, 301, 302, 303, 0, 305,
	304, 0, 306, 930, 915, 307, 308, 916, 0, 309,
	310, 0, 0, 311, 0, 312, 313, 973, 972, 314,
	315, 317, 318, 316, 917, 319, 320, 322, 321, 0,
	0, 918, 0, 902, 468, 323, 324, 0, 325, 326,
	0, 0, 328, 329, 0, 0, 330, 469, 919, 331,
	920, 931, 332, 327, 333, 334, 335, 336, 337, 338,
	0, 339, 932, 340, 472, 341, 0, 342, 0, 343,
	344, 345, 346, 347, 348, 473, 349, 350, 0, 351,
	352, 353, 354, 355, 0, 357, 358, 359, 356, 360,
	361, 362, 363, 0, 364, 921, 365, 366, 367, 368,
	474, 965, 0, 370, 374, 375, 376, 377, 378, 379,
	380, 0, 387, 388, 381, 383, 384, 385, 382, 386,
	389, 390, 895, 391, 371, 372, 392, 922, 393, 475,
	394, 395, 0, 405, 396, 397, 398, 373, 399, 403,
	404, 400, 401, 402, 933, 0, 407, 408, 406, 0,
	409, 410, 411, 412, 413, 261, 414, 262, 415, 0,
	477, 478, 479, 416, 0, 0, 417, 418, 934, 419,
	935, 0, 420, 421, 422, 0, 423, 424, 0, 0,
	425, 426, 427, 428, 430, 896, 431, 0, 429, 432,
	433, 434, 482, 483, 484, 0, 436, 435, 485, 784,
	0, 1129, 0, 437, 438, 486, 439, 440, 441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 442,
	0, 1445, 0, 0, 213, 214, 215, 443, 444, 216,
	445, 217, 218, 446, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 447, 448, 449, 0, 226, 450,
	0, 1033, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	907, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 451, 452, 0, 248,
	0, 249, 0, 250, 0, 0, 251, 252, 253, 0,
	254, 0, 255, 256, 0, 453, 257, 258, 260, 263,
	259, 264, 265, 266, 454, 455, 0, 908, 0, 0,
	0, 0, 0, 267, 268, 269, 456, 270, 271, 0,
	272, 0, 273, 0, 0, 909, 274, 275, 0, 276,
	457, 0, 458, 277, 0, 278, 279, 280, 281, 282,
	283, 459, 460, 461, 911, 0, 465, 285, 0, 0,
	0, 0, 284, 286, 293, 0, 910, 287, 462, 289,
	288, 290, 291, 292, 463, 0, 464, 0, 294, 912,
	913, 295, 296, 297, 914, 298, 299, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 466, 915,
	307, 308, 916, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 973, 972, 314, 315, 317, 318, 316, 917,
	319, 320, 322, 321, 0, 0, 918, 0, 467, 468,
	323, 324, 0, 325, 326, 0, 0, 328, 329, 0,
	0, 330, 469, 919, 331, 920, 470, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 471, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	473, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	921, 365, 366, 367, 368, 474, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 176, 387, 388, 381,
	383, 384, 385, 382, 386, 389, 390, 0, 391, 371,
	372, 392, 922, 393, 475, 394, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 404, 400, 401, 402, 476,
	0, 407, 408, 406, 178, 409, 410, 411, 412, 413,
	261, 414, 262, 415, 0, 477, 478, 479, 416, 0,
	0, 417, 418, 480, 419, 481, 0, 420, 421, 422,
	0, 423, 424, 0, 0, 425, 426, 427, 428, 430,
	0, 431, 0, 429, 432, 433, 434, 1271, 483, 484,
	0, 436, 435, 485, 1268, 0, 1129, 170, 437, 438,
	486, 439, 440, 441, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 442, 0, 148, 0, 0, 213,
	214, 215, 443, 444, 216, 445, 217, 218, 446, 0,
	219, 220, 221, 222, 223, 224, 0, 0, 225, 447,
	448, 449, 0, 226, 450, 0, 1033, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 907, 240, 241, 0, 0,
	0, 0, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 451, 452, 0, 248, 0, 249, 0, 250, 0,
	0, 251, 252, 253, 0, 254, 0, 255, 256, 0,
	453, 257, 258, 260, 263, 259, 264, 265, 266, 454,
	455, 0, 908, 0, 0, 0, 0, 0, 267, 268,
	269, 456, 270, 271, 0, 272, 0, 273, 0, 0,
	909, 274, 275, 0, 276, 457, 0, 458, 277, 0,
	278, 279, 280, 281, 282, 283, 459, 460, 461, 911,
	0, 465, 285, 0, 0, 0, 0, 284, 286, 293,
	0, 910, 287, 462, 289, 288, 290, 291, 292, 463,
	0, 464, 0, 294, 912, 913, 295, 296, 297, 914,
	298, 299, 0, 0, 300, 301, 302, 303, 0, 305,
	304, 0, 306, 466, 915, 307, 308, 916, 0, 309,
	310, 0, 0, 311, 0, 312, 313, 973, 972, 314,
	315, 317, 318, 316, 917, 319, 320, 322, 321, 0,
	0, 918, 0, 467, 468, 323, 324, 0, 325, 326,
	0, 0, 328, 329, 0, 0, 330, 469, 919, 331,
	920, 470, 332, 327, 333, 334, 335, 336, 337, 338,
	0, 339, 471, 340, 472, 341, 0, 342, 0, 343,
	344, 345, 346, 347, 348, 473, 349, 350, 0, 351,
	352, 353, 354, 355, 0, 357, 358, 359, 356, 360,
	361, 362, 363, 0, 364, 921, 365, 366, 367, 368,
	474, 369, 0, 370, 374, 375, 376, 377, 378, 379,
	380, 176, 387, 388, 381, 383, 384, 385, 382, 386,
	389, 390, 0, 391, 371, 372, 392, 922, 393, 475,
	394, 395, 0, 405, 396, 397, 398, 373, 399, 403,
	404, 400, 401, 402, 476, 0, 407, 408, 406, 178,
	409, 410, 411, 412, 413, 261, 414, 262, 415, 0,
	477, 478, 479, 416, 0, 0, 417, 418, 480, 419,
	481, 0, 420, 421, 422, 0, 423, 424, 0, 0,
	425, 426, 427, 428, 430, 0, 431, 0, 429, 432,
	433, 434, 1271, 483, 484, 0, 436, 435, 485, 0,
	0, 0, 170, 437, 438, 486, 439, 440, 441, 0,
	171, 0, 0, 0, 0, 1129, 1128, 0, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 447, 448,
	449, 0, 226, 450, 0, 1033, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	0, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 457, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 911, 0,
	465, 285, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 294, 912, 913, 295, 296, 297, 914, 298,
	299, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 466, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 973, 972, 314, 315,
	317, 318, 316, 917, 319, 320, 322, 321, 0, 0,
	918, 0, 467, 468, 323, 324, 0, 325, 326, 0,
	0, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 471, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 0, 391, 371, 372, 392, 922, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 477,
	478, 479, 416, 0, 0, 417, 418, 480, 419, 481,
	0, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 0, 431, 0, 429, 432, 433,
	434, 482, 483, 484, 0, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 1129, 1128,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	2618, 212, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 1033, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 907, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 908, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 909, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 459, 460,
	461, 911, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 910, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 912, 913, 295, 296,
	297, 914, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 915, 307, 308, 916,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 973,
	972, 314, 315, 317, 318, 316, 917, 319, 320, 322,
	321, 0, 0, 918, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 0, 328, 329, 0, 0, 330, 469,
	919, 331, 920, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 921, 365, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 0, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 922,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 0, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 0, 436, 435,
	485, 971, 0, 0, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 898,
	0, 0, 0, 1275, 213, 214, 215, 443, 444, 216,
	445, 217, 218, 446, 0, 219, 220, 221, 222, 223,
	224, 0, 897, 225, 447, 448, 449, 0, 226, 904,
	0, 887, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	907, 240, 241, 890, 888, 889, 894, 892, 891, 893,
	242, 243, 244, 245, 246, 247, 451, 452, 0, 248,
	0, 249, 0, 250, 0, 0, 251, 252, 253, 0,
	254, 0, 255, 256, 0, 453, 257, 258, 260, 263,
	259, 264, 265, 266, 927, 928, 0, 908, 0, 0,
	0, 0, 0, 267, 268, 269, 456, 270, 271, 0,
	272, 0, 273, 0, 0, 909, 274, 275, 0, 276,
	929, 0, 458, 277, 0, 278, 279, 280, 281, 282,
	283, 899, 900, 903, 911, 0, 901, 285, 0, 0,
	0, 0, 284, 286, 293, 0, 910, 287, 462, 289,
	288, 290, 291, 292, 463, 0, 464, 0, 294, 912,
	913, 295, 296, 297, 914, 298, 299, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 930, 915,
	307, 308, 916, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 973, 972, 314, 315, 317, 318, 316, 917,
	319, 320, 322, 321, 0, 0, 918, 0, 902, 468,
	323, 324, 0, 325, 326, 0, 0, 328, 329, 0,
	0, 330, 469, 919, 331, 920, 931, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 932, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	473, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	921, 365, 366, 367, 368, 474, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 0, 387, 388, 381,
	383, 384, 385, 382, 386, 389, 390, 895, 391, 371,
	372, 392, 922, 393, 475, 394, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 404, 400, 401, 402, 933,
	0, 407, 408, 406, 0, 409, 410, 411, 412, 413,
	261, 414, 262, 415, 0, 477, 478, 479, 416, 0,
	0, 417, 418, 934, 419, 935, 0, 420, 421, 422,
	0, 423, 424, 0, 0, 425, 426, 427, 428, 430,
	896, 431, 0, 429, 432, 433, 434, 482, 483, 484,
	0, 436, 435, 485, 784, 0, 204, 0, 437, 438,
	486, 439, 440, 441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 213,
	214, 215, 443, 444, 216, 445, 217, 218, 446, 0,
	219, 220, 221, 222, 223, 224, 0, 0, 225, 447,
	448, 449, 0, 226, 450, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 0, 240, 241, 0, 0,
	0, 0, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 451, 452, 0, 248, 0, 249, 0, 250, 0,
	0, 251, 252, 253, 0, 254, 0, 255, 256, 0,
	453, 257, 258, 260, 263, 259, 264, 265, 266, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 267, 268,
	269, 456, 270, 271, 0, 272, 0, 273, 0, 0,
	0, 274, 275, 0, 276, 457, 0, 458, 277, 0,
	278, 279, 280, 281, 282, 283, 459, 460, 461, 0,
	0, 465, 285, 0, 0, 0, 0, 284, 286, 293,
	0, 0, 287, 462, 289, 288, 290, 291, 292, 463,
	0, 464, 0, 294, 0, 0, 295, 296, 297, 0,
	298, 299, 0, 0, 300, 301, 302, 303, 0, 305,
	304, 0, 306, 466, 0, 307, 308, 0, 0, 309,
	310, 0, 0, 311, 0, 312, 313, 0, 0, 314,
	315, 317, 318, 316, 0, 319, 320, 322, 321, 0,
	0, 0, 0, 467, 468, 323, 324, 0, 325, 326,
	0, 0, 328, 329, 0, 0, 330, 469, 0, 331,
	0, 470, 332, 327, 333, 334, 335, 336, 337, 338,
	0, 339, 471, 340, 472, 341, 0, 342, 0, 343,
	344, 345, 346, 347, 348, 473, 349, 350, 0, 351,
	352, 353, 354, 355, 0, 357, 358, 359, 356, 360,
	361, 362, 363, 0, 364, 0, 365, 366, 367, 368,
	474, 369, 0, 370, 374, 375, 376, 377, 378, 379,
	380, 176, 387, 388, 381, 383, 384, 385, 382, 386,
	389, 390, 0, 391, 371, 372, 392, 0, 393, 475,
	394, 395, 0, 405, 396, 397, 398, 373, 399, 403,
	404, 400, 401, 402, 476, 0, 407, 408, 406, 178,
	409, 410, 411, 412, 413, 261, 414, 262, 415, 0,
	477, 478, 479, 416, 0, 0, 417, 418, 480, 419,
	481, 0, 420, 421, 422, 0, 423, 424, 0, 0,
	425, 426, 427, 428, 430, 0, 431, 0, 429, 432,
	433, 434, 1271, 483, 484, 0, 436, 435, 485, 204,
	0, 0, 170, 437, 438, 486, 439, 440, 441, 0,
	171, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 148, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 459,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 204, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	442, 0, 0, 0, 2240, 213, 214, 215, 443, 444,
	216, 445, 217, 218, 446, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 447, 448, 449, 0, 226,
	450, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 0, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 451, 452, 0,
	248, 0, 249, 0, 250, 0, 0, 251, 252, 253,
	0, 254, 0, 255, 256, 0, 453, 257, 258, 260,
	263, 259, 264, 265, 266, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 267, 268, 269, 456, 270, 271,
	0, 272, 0, 273, 0, 0, 0, 274, 275, 0,
	276, 457, 0, 458, 277, 0, 278, 279, 280, 281,
	282, 283, 459, 460, 461, 0, 0, 465, 285, 0,
	0, 0, 0, 284, 286, 293, 0, 0, 287, 462,
	289, 288, 290, 291, 292, 463, 0, 464, 0, 294,
	0, 0, 295, 296, 297, 0, 298, 299, 0, 0,
	300, 301, 302, 303, 0, 305, 304, 0, 306, 466,
	0, 307, 308, 0, 0, 309, 310, 0, 0, 311,
	0, 312, 313, 0, 0, 314, 315, 317, 318, 316,
	0, 319, 320, 322, 321, 0, 0, 0, 0, 467,
	468, 323, 324, 0, 325, 326, 0, 0, 328, 329,
	0, 0, 330, 469, 0, 331, 0, 470, 332, 327,
	333, 334, 335, 336, 337, 338, 0, 339, 471, 340,
	472, 341, 0, 342, 0, 343, 344, 345, 346, 347,
	348, 473, 349, 350, 0, 351, 352, 353, 354, 355,
	0, 357, 358, 359, 356, 360, 361, 362, 363, 0,
	364, 0, 365, 366, 367, 368, 474, 369, 0, 370,
	374, 375, 376, 377, 378, 379, 380, 0, 387, 388,
	381, 383, 384, 385, 382, 386, 389, 390, 0, 391,
	371, 372, 392, 0, 393, 475, 394, 395, 0, 405,
	396, 397, 398, 373, 399, 403, 404, 400, 401, 402,
	476, 0, 407, 408, 406, 0, 409, 410, 411, 412,
	413, 261, 414, 262, 415, 0, 477, 478, 479, 416,
	0, 0, 417, 418, 480, 419, 481, 0, 420, 421,
	422, 0, 423, 424, 0, 0, 425, 426, 427, 428,
	430, 0, 431, 0, 429, 432, 433, 434, 482, 483,
	484, 0, 436, 435, 485, 204, 0, 0, 0, 437,
	438, 486, 439, 440, 441, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 442, 0, 0, 0, 2689, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 447, 448,
	449, 0, 226, 450, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 0, 0, 0,
	274, 275, 0, 276, 457, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 0, 0,
	465, 285, 0, 0, 0, 0, 284, 286, 293, 0,
	0, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 294, 0, 0, 295, 296, 297, 0, 298,
	299, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 466, 0, 307, 308, 0, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 0, 0, 314, 315,
	317, 318, 316, 0, 319, 320, 322, 321, 0, 0,
	0, 0, 467, 468, 323, 324, 0, 325, 326, 0,
	0, 328, 329, 0, 0, 330, 469, 0, 331, 0,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 471, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 0, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 0, 391, 371, 372, 392, 0, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 477,
	478, 479, 416, 0, 0, 417, 418, 480, 419, 481,
	0, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 0, 431, 0, 429, 432, 433,
	434, 482, 483, 484, 0, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 0, 0,
	0, 0, 1296, 0, 1129, 1128, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1544, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 1033, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 907, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	908, 0, 0, 0, 0, 0, 1295, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 909, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 911, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 910,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 912, 913, 295, 296, 297, 914, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 915, 307, 308, 916, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 973, 972, 314, 315, 317,
	318, 316, 917, 319, 320, 322, 321, 0, 0, 918,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 919, 331, 920, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 1294, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 921, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 922, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 0, 0, 0,
	0, 437, 438, 486, 439, 440, 441, 1266, 0, 1129,
	1128, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 1033,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 909, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1265,
	460, 461, 911, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 910, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 912, 913, 295,
	296, 297, 914, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	973, 972, 314, 315, 317, 318, 316, 917, 319, 320,
	322, 321, 0, 0, 918, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	922, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 1262, 0, 1129, 1128, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 1033, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 907, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	908, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 909, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 1261, 460, 461, 911, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 910,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 912, 913, 295, 296, 297, 914, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 915, 307, 308, 916, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 973, 972, 314, 315, 317,
	318, 316, 917, 319, 320, 322, 321, 0, 0, 918,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 919, 331, 920, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 921, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 922, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 0, 0, 0,
	0, 437, 438, 486, 439, 440, 441, 1201, 0, 1129,
	1128, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 1033,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 909, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1200,
	460, 461, 911, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 910, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 912, 913, 295,
	296, 297, 914, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	973, 972, 314, 315, 317, 318, 316, 917, 319, 320,
	322, 321, 0, 0, 918, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	922, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 1198, 0, 1129, 1128, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 1033, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 907, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	908, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 909, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 1197, 460, 461, 911, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 910,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 912, 913, 295, 296, 297, 914, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 915, 307, 308, 916, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 973, 972, 314, 315, 317,
	318, 316, 917, 319, 320, 322, 321, 0, 0, 918,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 919, 331, 920, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 921, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 922, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 0, 0, 0,
	0, 437, 438, 486, 439, 440, 441, 1122, 0, 1129,
	1128, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 1033,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 907, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 908, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 909, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1124,
	460, 461, 911, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 910, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 912, 913, 295,
	296, 297, 914, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 915, 307, 308,
	916, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	973, 972, 314, 315, 317, 318, 316, 917, 319, 320,
	322, 321, 0, 0, 918, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 919, 331, 920, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 921, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	922, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 1129, 1128, 0, 0, 0, 0, 1126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 213, 214, 215, 443, 444,
	216, 445, 217, 218, 446, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 447, 448, 449, 0, 226,
	450, 0, 1033, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 907, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 451, 452, 0,
	248, 0, 249, 0, 250, 0, 0, 251, 252, 253,
	0, 254, 0, 255, 256, 0, 453, 257, 258, 260,
	263, 259, 264, 265, 266, 454, 455, 0, 908, 0,
	0, 0, 0, 0, 267, 268, 269, 456, 270, 271,
	0, 272, 0, 273, 0, 0, 909, 274, 275, 0,
	276, 457, 0, 458, 277, 0, 278, 279, 280, 281,
	282, 283, 459, 460, 461, 911, 0, 465, 285, 0,
	0, 0, 0, 284, 286, 293, 0, 910, 287, 462,
	289, 288, 290, 291, 292, 463, 0, 464, 0, 294,
	912, 913, 295, 296, 297, 914, 298, 299, 0, 0,
	300, 301, 302, 303, 0, 305, 304, 0, 306, 466,
	915, 307, 308, 916, 0, 309, 310, 0, 0, 311,
	0, 312, 313, 973, 972, 314, 315, 317, 318, 316,
	917, 319, 320, 322, 321, 0, 0, 918, 0, 467,
	468, 323, 324, 0, 325, 326, 0, 0, 328, 329,
	0, 0, 330, 469, 919, 331, 920, 470, 332, 327,
	333, 334, 335, 336, 337, 338, 0, 339, 471, 340,
	472, 341, 0, 342, 0, 343, 344, 345, 346, 347,
	348, 473, 349, 350, 0, 351, 352, 353, 354, 355,
	0, 357, 358, 359, 356, 360, 361, 362, 363, 0,
	364, 921, 365, 366, 367, 368, 474, 369, 0, 370,
	374, 375, 376, 377, 378, 379, 380, 0, 387, 388,
	381, 383, 384, 385, 382, 386, 389, 390, 0, 391,
	371, 372, 392, 922, 393, 475, 394, 395, 0, 405,
	396, 397, 398, 373, 399, 403, 404, 400, 401, 402,
	476, 0, 407, 408, 406, 0, 409, 410, 411, 412,
	413, 261, 414, 262, 415, 0, 477, 478, 479, 416,
	0, 0, 417, 418, 480, 419, 481, 0, 420, 421,
	422, 0, 423, 424, 0, 0, 425, 426, 427, 428,
	430, 0, 431, 0, 429, 432, 433, 434, 482, 483,
	484, 0, 436, 435, 485, 1129, 1128, 0, 0, 437,
	438, 486, 439, 440, 441, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 447, 448,
	449, 0, 226, 450, 0, 1033, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 907, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	0, 908, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 0, 0, 909,
	274, 275, 0, 276, 457, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 911, 0,
	465, 285, 0, 0, 0, 0, 284, 286, 293, 0,
	910, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 294, 912, 913, 295, 296, 297, 914, 298,
	299, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 466, 915, 307, 308, 916, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 973, 972, 314, 315,
	317, 318, 316, 917, 319, 320, 322, 321, 0, 0,
	918, 0, 467, 468, 323, 324, 0, 325, 326, 0,
	0, 328, 329, 0, 0, 330, 469, 919, 331, 920,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 471, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 921, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 0, 391, 371, 372, 392, 922, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 477,
	478, 479, 416, 0, 0, 417, 418, 480, 419, 481,
	0, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 0, 431, 0, 429, 432, 433,
	434, 482, 483, 484, 1129, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 1033, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 907, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	908, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 909, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 911, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 910,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 912, 913, 295, 296, 297, 914, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 915, 307, 308, 916, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 973, 972, 314, 315, 317,
	318, 316, 917, 319, 320, 322, 321, 0, 0, 918,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 919, 331, 920, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 921, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 922, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 554, 0, 555,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	561, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 459,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 560, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 555, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 442, 564, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 561,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 0, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 459, 460,
	461, 0, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 0, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 0, 0, 295, 296,
	297, 0, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 0, 307, 308, 0,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 0,
	0, 314, 315, 317, 318, 316, 0, 319, 320, 322,
	321, 0, 0, 0, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 0, 328, 329, 0, 0, 330, 469,
	0, 331, 0, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 0, 1817, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 0, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 0,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 560, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 555, 436, 435,
	485, 0, 0, 0, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 442, 564, 0, 0, 0,
	213, 214, 215, 443, 444, 216, 445, 217, 218, 446,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	447, 448, 449, 0, 226, 450, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 561, 245,
	246, 247, 451, 452, 0, 248, 0, 249, 0, 250,
	0, 0, 251, 252, 253, 0, 254, 0, 255, 256,
	0, 453, 257, 258, 260, 263, 259, 264, 265, 266,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 267,
	268, 269, 456, 270, 271, 0, 272, 0, 273, 0,
	0, 0, 274, 275, 0, 276, 457, 0, 458, 277,
	0, 278, 279, 280, 281, 282, 283, 459, 460, 461,
	0, 0, 465, 285, 0, 0, 0, 0, 284, 286,
	293, 0, 0, 287, 462, 289, 288, 290, 291, 292,
	463, 0, 464, 0, 294, 0, 0, 295, 296, 297,
	0, 298, 299, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 466, 0, 307, 308, 0, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 0, 0,
	314, 315, 317, 318, 316, 0, 319, 320, 322, 321,
	0, 0, 0, 0, 467, 468, 323, 324, 0, 325,
	326, 0, 0, 328, 329, 0, 0, 330, 469, 0,
	331, 0, 470, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 471, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 473, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 0, 365, 366, 367,
	368, 474, 369, 0, 370, 374, 375, 376, 377, 378,
	379, 380, 0, 387, 388, 381, 383, 384, 385, 382,
	386, 389, 390, 0, 391, 371, 372, 392, 0, 393,
	475, 394, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 404, 400, 401, 402, 476, 0, 407, 408, 406,
	560, 409, 410, 411, 412, 413, 261, 414, 262, 415,
	0, 477, 478, 479, 416, 0, 0, 417, 418, 480,
	419, 481, 0, 420, 421, 422, 0, 423, 424, 0,
	0, 425, 426, 427, 428, 430, 0, 431, 0, 429,
	432, 433, 434, 482, 483, 484, 204, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 440, 441,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 442, 564, 0, 0, 0, 213,
	214, 215, 443, 444, 216, 445, 217, 218, 446, 0,
	219, 220, 221, 222, 223, 224, 0, 0, 225, 447,
	448, 449, 0, 226, 450, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 0, 240, 241, 0, 0,
	0, 0, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 451, 452, 0, 248, 0, 249, 0, 250, 0,
	0, 251, 252, 253, 0, 254, 0, 255, 256, 0,
	453, 257, 258, 260, 263, 259, 264, 265, 266, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 267, 268,
	269, 456, 270, 271, 0, 272, 0, 273, 0, 0,
	0, 274, 275, 0, 276, 457, 0, 458, 277, 0,
	278, 279, 280, 281, 282, 283, 459, 460, 461, 0,
	0, 465, 285, 0, 0, 0, 0, 284, 286, 293,
	0, 0, 287, 462, 289, 288, 290, 291, 292, 463,
	0, 464, 0, 294, 0, 0, 295, 296, 297, 0,
	298, 299, 0, 0, 300, 301, 302, 303, 0, 305,
	304, 0, 306, 466, 0, 307, 308, 0, 0, 309,
	310, 0, 0, 311, 0, 312, 313, 0, 0, 314,
	315, 317, 318, 316, 0, 319, 320, 322, 321, 0,
	0, 0, 0, 467, 468, 323, 324, 0, 325, 326,
	0, 0, 328, 329, 0, 0, 330, 469, 0, 331,
	0, 470, 332, 327, 333, 334, 335, 336, 337, 338,
	0, 339, 471, 340, 472, 341, 0, 342, 0, 343,
	344, 345, 346, 347, 348, 473, 349, 350, 0, 351,
	352, 353, 354, 355, 0, 357, 358, 359, 356, 360,
	361, 362, 363, 0, 364, 0, 365, 366, 367, 368,
	474, 369, 0, 370, 374, 375, 376, 377, 378, 379,
	380, 0, 387, 388, 381, 383, 384, 385, 382, 386,
	389, 390, 0, 391, 371, 372, 392, 0, 393, 475,
	394, 395, 0, 405, 396, 397, 398, 373, 399, 403,
	404, 400, 401, 402, 476, 0, 407, 408, 406, 0,
	409, 410, 411, 412, 413, 261, 414, 262, 415, 0,
	477, 478, 479, 416, 0, 0, 417, 418, 480, 419,
	481, 0, 420, 421, 422, 0, 423, 424, 0, 0,
	425, 426, 427, 428, 430, 0, 431, 0, 429, 432,
	433, 434, 482, 483, 484, 204, 436, 435, 485, 0,
	0, 0, 0, 437, 438, 486, 439, 440, 441, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 442, 564, 0, 0, 0, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 447, 448,
	449, 2135, 226, 450, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 2132, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	0, 2274, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 2138, 0, 0,
	274, 275, 0, 276, 457, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 0, 0,
	465, 285, 0, 0, 0, 2271, 284, 286, 293, 0,
	0, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 2273, 0, 0, 295, 296, 297, 0, 298,
	299, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 466, 0, 307, 308, 0, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 0, 0, 314, 315,
	317, 318, 316, 0, 319, 320, 322, 321, 0, 0,
	0, 0, 467, 468, 323, 324, 0, 325, 326, 0,
	0, 328, 329, 0, 0, 330, 469, 0, 331, 0,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 471, 340, 472, 341, 2137, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 0, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 0, 391, 371, 372, 392, 0, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 477,
	478, 479, 416, 0, 0, 417, 418, 480, 419, 481,
	0, 420, 421, 422, 0, 423, 424, 0, 2272, 425,
	426, 427, 428, 430, 0, 431, 0, 429, 432, 433,
	434, 482, 483, 484, 204, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	2135, 226, 450, 0, 0, 2129, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 2132, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 2138, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 2128, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 2137, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 2136, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 517, 0, 204,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 516,
	211, 506, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 509, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 510, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 459,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 511, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 505, 0, 204, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 506, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 509, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 510, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 511,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 204, 436, 435, 485, 0, 0, 0,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	226, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 509, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	510, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	316, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 0, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 511, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 0, 436, 435, 485, 1339, 0, 204, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 0, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 459, 460,
	461, 0, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 0, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 0, 0, 295, 296,
	297, 0, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 0, 307, 308, 0,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 0,
	0, 314, 315, 317, 318, 316, 0, 319, 320, 322,
	321, 0, 0, 0, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 0, 328, 329, 0, 0, 330, 469,
	0, 331, 0, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 0, 365, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 0, 1342, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 0,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 1340, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 0, 1341, 435,
	485, 1117, 0, 204, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	226, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	0, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 1119, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	316, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 963, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 0, 436, 435, 485, 1114, 0, 204, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 0, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 1116, 460,
	461, 0, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 0, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 0, 0, 295, 296,
	297, 0, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 0, 307, 308, 0,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 0,
	0, 314, 315, 317, 318, 316, 0, 319, 320, 322,
	321, 0, 0, 0, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 963, 328, 329, 0, 0, 330, 469,
	0, 331, 0, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 0, 365, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 0, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 0,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 0, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 0, 436, 435,
	485, 1021, 0, 204, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	226, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	0, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 1023, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	316, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 963, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 0, 436, 435, 485, 653, 0, 204, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 0, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 459, 460,
	461, 0, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 0, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 0, 0, 295, 296,
	297, 0, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 0, 307, 308, 0,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 0,
	0, 314, 315, 317, 318, 316, 0, 319, 320, 322,
	321, 0, 0, 0, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 0, 328, 329, 0, 0, 330, 469,
	0, 331, 0, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 0, 365, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 0, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 0,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 652, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 0, 436, 435,
	485, 494, 0, 204, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 493, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	226, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	0, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	316, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 0, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 492, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 204, 436, 435, 485, 0, 0, 0, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	442, 0, 2073, 0, 0, 213, 214, 215, 443, 444,
	216, 445, 217, 218, 446, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 447, 448, 449, 0, 226,
	450, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 0, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 451, 452, 0,
	248, 0, 249, 0, 250, 0, 0, 251, 252, 253,
	0, 254, 0, 255, 256, 0, 453, 257, 258, 260,
	263, 259, 264, 265, 266, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 267, 268, 269, 456, 270, 271,
	0, 272, 0, 273, 0, 0, 0, 274, 275, 0,
	276, 457, 0, 458, 277, 0, 278, 279, 280, 281,
	282, 283, 459, 460, 461, 0, 0, 465, 285, 0,
	0, 0, 0, 284, 286, 293, 0, 0, 287, 462,
	289, 288, 290, 291, 292, 463, 0, 464, 0, 294,
	0, 0, 295, 296, 297, 0, 298, 299, 0, 0,
	300, 301, 302, 303, 0, 305, 304, 0, 306, 466,
	0, 307, 308, 0, 0, 309, 310, 0, 0, 311,
	0, 312, 313, 0, 0, 314, 315, 317, 318, 316,
	0, 319, 320, 322, 321, 0, 0, 0, 0, 467,
	468, 323, 324, 0, 325, 326, 0, 0, 328, 329,
	0, 0, 330, 469, 0, 331, 0, 470, 332, 327,
	333, 334, 335, 336, 337, 338, 0, 339, 471, 340,
	472, 341, 0, 342, 0, 343, 344, 345, 346, 347,
	348, 473, 349, 350, 0, 351, 352, 353, 354, 355,
	0, 357, 358, 359, 356, 360, 361, 362, 363, 0,
	364, 0, 365, 366, 367, 368, 474, 369, 0, 370,
	374, 375, 376, 377, 378, 379, 380, 0, 387, 388,
	381, 383, 384, 385, 382, 386, 389, 390, 0, 391,
	371, 372, 392, 0, 393, 475, 394, 395, 0, 405,
	396, 397, 398, 373, 399, 403, 404, 400, 401, 402,
	476, 0, 407, 408, 406, 0, 409, 410, 411, 412,
	413, 261, 414, 262, 415, 0, 477, 478, 479, 416,
	0, 0, 417, 418, 480, 419, 481, 0, 420, 421,
	422, 0, 423, 424, 0, 0, 425, 426, 427, 428,
	430, 0, 431, 0, 429, 432, 433, 434, 482, 483,
	484, 0, 436, 435, 485, 204, 2262, 0, 0, 437,
	438, 486, 439, 440, 441, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 447, 448,
	449, 0, 226, 450, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 0, 0, 0,
	274, 275, 0, 276, 457, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 0, 0,
	465, 285, 0, 0, 0, 0, 284, 286, 293, 0,
	0, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 294, 0, 0, 295, 296, 297, 0, 298,
	299, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 466, 0, 307, 308, 0, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 0, 0, 314, 315,
	317, 318, 316, 0, 319, 320, 322, 321, 0, 0,
	0, 0, 467, 468, 323, 324, 0, 325, 326, 0,
	0, 328, 329, 0, 0, 330, 469, 0, 331, 0,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 471, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 0, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 0, 391, 371, 372, 392, 0, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 477,
	478, 479, 416, 0, 0, 417, 418, 480, 419, 481,
	0, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 0, 431, 0, 429, 432, 433,
	434, 482, 483, 484, 204, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 2808, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 204, 436, 435, 485, 0, 0, 0,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	226, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	0, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	316, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 963, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 0, 436, 435, 485, 204, 2262, 0, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 442, 0, 0, 0, 0, 213,
	214, 215, 443, 444, 216, 445, 217, 218, 446, 0,
	219, 220, 221, 222, 223, 224, 0, 0, 225, 447,
	448, 449, 0, 226, 450, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 0, 240, 241, 0, 0,
	0, 0, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 451, 452, 0, 248, 0, 249, 0, 250, 0,
	0, 251, 252, 253, 0, 254, 0, 255, 256, 0,
	453, 257, 258, 260, 263, 259, 264, 265, 266, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 267, 268,
	269, 456, 270, 271, 0, 272, 0, 273, 0, 0,
	0, 274, 275, 0, 276, 457, 0, 458, 277, 0,
	278, 279, 280, 281, 282, 283, 459, 460, 461, 0,
	0, 465, 285, 0, 0, 0, 0, 284, 286, 293,
	0, 0, 287, 462, 289, 288, 290, 291, 292, 463,
	0, 464, 0, 294, 0, 0, 295, 296, 297, 0,
	298, 299, 0, 0, 300, 301, 302, 303, 0, 305,
	304, 0, 306, 466, 0, 307, 308, 0, 0, 309,
	310, 0, 0, 311, 0, 312, 313, 0, 0, 314,
	315, 317, 318, 316, 0, 319, 320, 322, 321, 0,
	0, 0, 0, 467, 468, 323, 324, 0, 325, 326,
	0, 0, 328, 2259, 0, 0, 330, 469, 0, 331,
	0, 470, 332, 327, 333, 334, 335, 336, 337, 338,
	0, 339, 471, 340, 472, 341, 0, 342, 0, 343,
	344, 345, 346, 347, 348, 473, 349, 350, 0, 351,
	352, 353, 354, 355, 0, 357, 358, 359, 356, 360,
	361, 362, 363, 0, 364, 0, 365, 366, 367, 368,
	474, 369, 0, 370, 374, 375, 376, 377, 378, 379,
	380, 0, 387, 388, 381, 383, 384, 385, 382, 386,
	389, 390, 0, 391, 371, 372, 392, 0, 393, 475,
	394, 395, 0, 405, 396, 397, 398, 373, 399, 403,
	404, 400, 401, 402, 476, 0, 407, 408, 406, 0,
	409, 410, 411, 412, 413, 261, 414, 262, 415, 0,
	477, 478, 479, 416, 0, 0, 417, 418, 480, 419,
	481, 0, 420, 421, 422, 0, 423, 424, 0, 0,
	425, 426, 427, 428, 430, 0, 431, 0, 429, 432,
	433, 434, 482, 483, 484, 0, 436, 435, 485, 2206,
	0, 204, 0, 437, 438, 486, 439, 440, 441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 442,
	0, 0, 0, 0, 213, 214, 215, 443, 444, 216,
	445, 217, 218, 446, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 447, 448, 449, 0, 226, 450,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 451, 452, 0, 248,
	0, 249, 0, 250, 0, 0, 251, 252, 253, 0,
	254, 0, 255, 256, 0, 453, 257, 258, 260, 263,
	259, 264, 265, 266, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 267, 268, 269, 456, 270, 271, 0,
	272, 0, 273, 0, 0, 0, 274, 275, 0, 276,
	457, 0, 458, 277, 0, 278, 279, 280, 281, 282,
	283, 459, 460, 461, 0, 0, 465, 285, 0, 0,
	0, 0, 284, 286, 293, 0, 0, 287, 462, 289,
	288, 290, 291, 292, 463, 0, 464, 0, 294, 0,
	0, 295, 296, 297, 0, 298, 299, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 466, 0,
	307, 308, 0, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 0, 0, 314, 315, 317, 318, 316, 0,
	319, 320, 322, 321, 0, 0, 0, 0, 467, 468,
	323, 324, 0, 325, 326, 0, 0, 328, 329, 0,
	0, 330, 469, 0, 331, 0, 470, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 471, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	473, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	0, 365, 366, 367, 368, 474, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 0, 387, 388, 381,
	383, 384, 385, 382, 386, 389, 390, 0, 391, 371,
	372, 392, 0, 393, 475, 394, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 404, 400, 401, 402, 476,
	0, 407, 408, 406, 0, 409, 410, 411, 412, 413,
	261, 414, 262, 415, 0, 477, 478, 479, 416, 0,
	0, 417, 418, 480, 419, 481, 0, 420, 421, 422,
	0, 423, 424, 0, 0, 425, 426, 427, 428, 430,
	0, 431, 0, 429, 432, 433, 434, 482, 483, 484,
	204, 436, 435, 485, 0, 0, 0, 0, 437, 438,
	486, 439, 440, 441, 0, 0, 0, 207, 208, 209,
	210, 211, 1809, 212, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 213, 214, 215, 443, 444, 216, 445,
	217, 218, 446, 0, 219, 220, 221, 222, 223, 224,
	0, 0, 225, 447, 448, 449, 0, 226, 450, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 0,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 451, 452, 0, 248, 0,
	249, 0, 250, 0, 0, 251, 252, 253, 0, 254,
	0, 255, 256, 0, 453, 257, 258, 260, 263, 259,
	264, 265, 266, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 267, 268, 269, 456, 270, 271, 0, 272,
	0, 273, 0, 0, 0, 274, 275, 0, 276, 457,
	0, 458, 277, 0, 278, 279, 280, 281, 282, 283,
	459, 460, 461, 0, 0, 465, 285, 0, 0, 0,
	0, 284, 286, 293, 0, 0, 287, 462, 289, 288,
	290, 291, 292, 463, 0, 464, 0, 294, 0, 0,
	295, 296, 297, 0, 298, 299, 0, 0, 300, 301,
	302, 303, 0, 305, 304, 0, 306, 466, 0, 307,
	308, 0, 0, 309, 310, 0, 0, 311, 0, 312,
	313, 0, 0, 314, 315, 317, 318, 316, 0, 319,
	320, 322, 321, 0, 0, 0, 0, 467, 468, 323,
	324, 0, 325, 326, 0, 0, 328, 329, 0, 0,
	330, 469, 0, 331, 0, 470, 332, 327, 333, 334,
	335, 336, 337, 338, 0, 339, 471, 340, 472, 341,
	0, 342, 0, 343, 344, 345, 346, 347, 348, 473,
	349, 350, 0, 351, 352, 353, 354, 355, 0, 357,
	358, 359, 356, 360, 361, 362, 363, 0, 364, 0,
	365, 366, 367, 368, 474, 369, 0, 370, 374, 375,
	376, 377, 378, 379, 380, 0, 387, 388, 381, 383,
	384, 385, 382, 386, 389, 390, 0, 391, 371, 372,
	392, 0, 393, 475, 394, 395, 0, 405, 396, 397,
	398, 373, 399, 403, 404, 400, 401, 402, 476, 0,
	407, 408, 406, 0, 409, 410, 411, 412, 413, 261,
	414, 262, 415, 0, 477, 478, 479, 416, 0, 0,
	417, 418, 480, 419, 481, 0, 420, 421, 422, 0,
	423, 424, 0, 0, 425, 426, 427, 428, 430, 0,
	431, 0, 429, 432, 433, 434, 482, 483, 484, 0,
	436, 435, 485, 1803, 0, 204, 0, 437, 438, 486,
	439, 440, 441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 447, 448,
	449, 0, 226, 450, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 0, 0, 0,
	274, 275, 0, 276, 457, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 0, 0,
	465, 285, 0, 0, 0, 0, 284, 286, 293, 0,
	0, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 294, 0, 0, 295, 296, 297, 0, 298,
	299, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 466, 0, 307, 308, 0, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 0, 0, 314, 315,
	317, 318, 316, 0, 319, 320, 322, 321, 0, 0,
	0, 0, 467, 468, 323, 324, 0, 325, 326, 0,
	0, 328, 329, 0, 0, 330, 469, 0, 331, 0,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 471, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 0, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 0, 391, 371, 372, 392, 0, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 477,
	478, 479, 416, 0, 0, 417, 418, 480, 419, 481,
	0, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 0, 431, 0, 429, 432, 433,
	434, 482, 483, 484, 0, 436, 435, 485, 1801, 0,
	204, 0, 437, 438, 486, 439, 440, 441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 213, 214, 215, 443, 444, 216, 445,
	217, 218, 446, 0, 219, 220, 221, 222, 223, 224,
	0, 0, 225, 447, 448, 449, 0, 226, 450, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 0,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 451, 452, 0, 248, 0,
	249, 0, 250, 0, 0, 251, 252, 253, 0, 254,
	0, 255, 256, 0, 453, 257, 258, 260, 263, 259,
	264, 265, 266, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 267, 268, 269, 456, 270, 271, 0, 272,
	0, 273, 0, 0, 0, 274, 275, 0, 276, 457,
	0, 458, 277, 0, 278, 279, 280, 281, 282, 283,
	459, 460, 461, 0, 0, 465, 285, 0, 0, 0,
	0, 284, 286, 293, 0, 0, 287, 462, 289, 288,
	290, 291, 292, 463, 0, 464, 0, 294, 0, 0,
	295, 296, 297, 0, 298, 299, 0, 0, 300, 301,
	302, 303, 0, 305, 304, 0, 306, 466, 0, 307,
	308, 0, 0, 309, 310, 0, 0, 311, 0, 312,
	313, 0, 0, 314, 315, 317, 318, 316, 0, 319,
	320, 322, 321, 0, 0, 0, 0, 467, 468, 323,
	324, 0, 325, 326, 0, 0, 328, 329, 0, 0,
	330, 469, 0, 331, 0, 470, 332, 327, 333, 334,
	335, 336, 337, 338, 0, 339, 471, 340, 472, 341,
	0, 342, 0, 343, 344, 345, 346, 347, 348, 473,
	349, 350, 0, 351, 352, 353, 354, 355, 0, 357,
	358, 359, 356, 360, 361, 362, 363, 0, 364, 0,
	365, 366, 367, 368, 474, 369, 0, 370, 374, 375,
	376, 377, 378, 379, 380, 0, 387, 388, 381, 383,
	384, 385, 382, 386, 389, 390, 0, 391, 371, 372,
	392, 0, 393, 475, 394, 395, 0, 405, 396, 397,
	398, 373, 399, 403, 404, 400, 401, 402, 476, 0,
	407, 408, 406, 0, 409, 410, 411, 412, 413, 261,
	414, 262, 415, 0, 477, 478, 479, 416, 0, 0,
	417, 418, 480, 419, 481, 0, 420, 421, 422, 0,
	423, 424, 0, 0, 425, 426, 427, 428, 430, 0,
	431, 0, 429, 432, 433, 434, 482, 483, 484, 0,
	436, 435, 485, 537, 0, 204, 0, 437, 438, 486,
	439, 440, 441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 447, 448,
	1001, 0, 226, 450, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 0, 0, 0,
	274, 275, 0, 276, 457, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 459, 460, 461, 0, 0,
	465, 285, 0, 0, 0, 0, 284, 286, 293, 0,
	0, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 294, 0, 0, 295, 296, 297, 0, 298,
	299, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 466, 0, 307, 308, 0, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 0, 0, 314, 315,
	317, 318, 538, 0, 319, 320, 322, 321, 0, 0,
	0, 0, 467, 468, 323, 324, 0, 325, 326, 0,
	0, 328, 329, 0, 0, 330, 469, 0, 331, 0,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 471, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 0, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 534, 377, 378, 379, 380,
	0, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 0, 391, 371, 372, 392, 0, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 533,
	478, 479, 416, 0, 0, 417, 418, 480, 419, 481,
	0, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 0, 431, 0, 429, 432, 433,
	434, 482, 483, 484, 0, 436, 435, 485, 1754, 0,
	204, 0, 437, 438, 486, 439, 440, 441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 213, 214, 215, 443, 444, 216, 445,
	217, 218, 446, 0, 219, 220, 221, 222, 223, 224,
	0, 0, 225, 447, 448, 449, 0, 226, 450, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 0,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 451, 452, 0, 248, 0,
	249, 0, 250, 0, 0, 251, 252, 253, 0, 254,
	0, 255, 256, 0, 453, 257, 258, 260, 263, 259,
	264, 265, 266, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 267, 268, 269, 456, 270, 271, 0, 272,
	0, 273, 0, 0, 0, 274, 275, 0, 276, 457,
	0, 458, 277, 0, 278, 279, 280, 281, 282, 283,
	1753, 460, 461, 0, 0, 465, 285, 0, 0, 0,
	0, 284, 286, 293, 0, 0, 287, 462, 289, 288,
	290, 291, 292, 463, 0, 464, 0, 294, 0, 0,
	295, 296, 297, 0, 298, 299, 0, 0, 300, 301,
	302, 303, 0, 305, 304, 0, 306, 466, 0, 307,
	308, 0, 0, 309, 310, 0, 0, 311, 0, 312,
	313, 0, 0, 314, 315, 317, 318, 316, 0, 319,
	320, 322, 321, 0, 0, 0, 0, 467, 468, 323,
	324, 0, 325, 326, 0, 0, 328, 329, 0, 0,
	330, 469, 0, 331, 0, 470, 332, 327, 333, 334,
	335, 336, 337, 338, 0, 339, 471, 340, 472, 341,
	0, 342, 0, 343, 344, 345, 346, 347, 348, 473,
	349, 350, 0, 351, 352, 353, 354, 355, 0, 357,
	358, 359, 356, 360, 361, 362, 363, 0, 364, 0,
	365, 366, 367, 368, 474, 369, 0, 370, 374, 375,
	376, 377, 378, 379, 380, 0, 387, 388, 381, 383,
	384, 385, 382, 386, 389, 390, 0, 391, 371, 372,
	392, 0, 393, 475, 394, 395, 0, 405, 396, 397,
	398, 373, 399, 403, 404, 400, 401, 402, 476, 0,
	407, 408, 406, 0, 409, 410, 411, 412, 413, 261,
	414, 262, 415, 0, 477, 478, 479, 416, 0, 0,
	417, 418, 480, 419, 481, 0, 420, 421, 422, 0,
	423, 424, 0, 0, 425, 426, 427, 428, 430, 0,
	431, 0, 429, 432, 433, 434, 482, 483, 484, 204,
	436, 435, 485, 0, 0, 0, 0, 437, 438, 486,
	439, 440, 441, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 459,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 1742, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 1736, 0, 204, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 1735, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 1731, 0, 204,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1733,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 537, 0, 204, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 527, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 538, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 534, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 1274, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 533, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 1259, 0, 204,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1258,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 1255, 0, 204, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 1254, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 1252, 0, 204,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1251,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 1249, 0, 204, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 1248, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 1245, 0, 204,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1244,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 1221, 0, 204, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 1209, 0, 204,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1208,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 1193, 0, 204, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 1139, 0, 204,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 1141,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 0, 436,
	435, 485, 1133, 0, 204, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 459, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 0, 436, 435, 485, 537, 0, 204,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 1001, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 459,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 538, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 534,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 533, 478, 479, 416, 0, 0, 417,
	1002, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 204, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 207, 208, 209, 210, 211,
	984, 212, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 0, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 459, 460,
	461, 0, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 0, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 0, 0, 295, 296,
	297, 0, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 0, 307, 308, 0,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 0,
	0, 314, 315, 317, 318, 316, 0, 319, 320, 322,
	321, 0, 0, 0, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 0, 328, 329, 0, 0, 330, 469,
	0, 331, 0, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 0, 365, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 0, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 0,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 0, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 0, 436, 435,
	485, 537, 0, 204, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	527, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 525, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	0, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 526, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	538, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 0, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 528, 369, 0,
	370, 374, 375, 534, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 529, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 533, 478, 479,
	416, 0, 0, 417, 531, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 0, 436, 435, 485, 521, 0, 204, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 0, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 459, 460,
	461, 0, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 0, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 0, 0, 295, 296,
	297, 0, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 0, 307, 308, 0,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 0,
	0, 314, 315, 317, 318, 316, 0, 319, 320, 322,
	321, 0, 0, 0, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 0, 328, 329, 0, 0, 330, 469,
	0, 331, 0, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 0, 365, 366,
	367, 368, 474, 369, 0, 370, 522, 375, 376, 377,
	378, 379, 380, 0, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 0,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 0, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 0, 436, 435,
	485, 519, 0, 204, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	226, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	0, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	316, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 0, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 0, 436, 435, 485, 513, 0, 204, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 0, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 459, 460,
	461, 0, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 0, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 0, 0, 295, 296,
	297, 0, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 0, 307, 308, 0,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 0,
	0, 314, 315, 317, 318, 316, 0, 319, 320, 322,
	321, 0, 0, 0, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 0, 328, 329, 0, 0, 330, 469,
	0, 331, 0, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 0, 365, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 0, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 0,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 0, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 0, 436, 435,
	485, 489, 0, 204, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	226, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	0, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	316, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 0, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 349, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 204, 436, 435, 485, 0, 0, 0, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 213, 214, 215, 443, 444,
	216, 445, 217, 218, 446, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 447, 448, 449, 0, 226,
	450, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 0, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 451, 452, 0,
	248, 0, 249, 0, 250, 0, 0, 251, 252, 253,
	0, 254, 0, 255, 256, 0, 453, 257, 258, 260,
	263, 259, 264, 265, 266, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 267, 268, 269, 456, 270, 271,
	0, 272, 0, 273, 0, 0, 0, 274, 275, 0,
	276, 457, 0, 458, 277, 0, 278, 279, 280, 281,
	282, 283, 459, 460, 461, 0, 0, 465, 285, 0,
	0, 0, 0, 284, 286, 293, 0, 0, 287, 462,
	289, 288, 290, 291, 292, 463, 0, 464, 0, 294,
	0, 0, 295, 296, 297, 0, 298, 299, 0, 0,
	300, 301, 302, 303, 0, 305, 304, 0, 306, 466,
	0, 307, 308, 0, 0, 309, 310, 0, 0, 311,
	0, 312, 313, 0, 0, 314, 315, 317, 318, 316,
	0, 319, 320, 322, 321, 0, 0, 0, 0, 467,
	468, 323, 324, 0, 325, 326, 0, 0, 328, 329,
	0, 0, 330, 469, 0, 331, 0, 470, 332, 327,
	333, 334, 335, 336, 337, 338, 0, 339, 471, 340,
	472, 341, 0, 342, 0, 343, 344, 345, 346, 347,
	348, 473, 349, 350, 0, 351, 352, 353, 354, 355,
	0, 357, 358, 359, 356, 360, 361, 362, 363, 0,
	364, 0, 365, 366, 367, 368, 474, 369, 0, 370,
	374, 375, 376, 377, 378, 379, 380, 0, 387, 388,
	381, 383, 384, 385, 382, 386, 389, 390, 0, 391,
	371, 372, 392, 0, 393, 475, 394, 395, 0, 405,
	396, 397, 398, 373, 399, 403, 404, 400, 401, 402,
	476, 0, 407, 408, 406, 0, 409, 410, 411, 412,
	413, 261, 414, 262, 415, 0, 477, 478, 479, 416,
	0, 0, 417, 418, 480, 419, 481, 0, 420, 421,
	422, 0, 423, 424, 0, 0, 425, 426, 427, 428,
	430, 0, 431, 0, 429, 432, 433, 434, 482, 483,
	484, 204, 436, 435, 485, 0, 0, 0, 0, 437,
	438, 486, 439, 440, 441, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 442,
	0, 0, 0, 0, 213, 214, 215, 443, 444, 216,
	445, 217, 218, 446, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 447, 448, 449, 0, 226, 450,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 451, 452, 0, 248,
	0, 249, 0, 250, 0, 0, 251, 252, 253, 0,
	254, 0, 255, 256, 0, 453, 257, 258, 260, 263,
	259, 264, 265, 266, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 267, 268, 269, 456, 270, 271, 0,
	272, 0, 273, 0, 0, 0, 274, 275, 0, 276,
	457, 0, 458, 277, 0, 278, 279, 280, 281, 282,
	283, 2517, 460, 461, 0, 0, 465, 285, 0, 0,
	0, 0, 284, 286, 293, 0, 0, 287, 462, 289,
	288, 290, 291, 292, 463, 0, 464, 0, 294, 0,
	0, 295, 296, 297, 0, 298, 299, 0, 0, 300,
	301, 302, 303, 0, 305, 304, 0, 306, 466, 0,
	307, 308, 0, 0, 309, 310, 0, 0, 311, 0,
	312, 313, 0, 0, 314, 315, 317, 318, 316, 0,
	319, 320, 322, 321, 0, 0, 0, 0, 467, 468,
	323, 324, 0, 325, 326, 0, 0, 328, 329, 0,
	0, 330, 469, 0, 331, 0, 470, 332, 327, 333,
	334, 335, 336, 337, 338, 0, 339, 471, 340, 472,
	341, 0, 342, 0, 343, 344, 345, 346, 347, 348,
	473, 349, 350, 0, 351, 352, 353, 354, 355, 0,
	357, 358, 359, 356, 360, 361, 362, 363, 0, 364,
	0, 365, 366, 367, 368, 474, 369, 0, 370, 374,
	375, 376, 377, 378, 379, 380, 0, 387, 388, 381,
	383, 384, 385, 382, 386, 389, 390, 0, 391, 371,
	372, 392, 0, 393, 475, 394, 395, 0, 405, 396,
	397, 398, 373, 399, 403, 404, 400, 401, 402, 476,
	0, 407, 408, 406, 0, 409, 410, 411, 412, 413,
	261, 414, 262, 415, 0, 477, 478, 479, 416, 0,
	0, 417, 418, 480, 419, 481, 0, 420, 421, 422,
	0, 423, 424, 0, 0, 425, 426, 427, 428, 430,
	0, 431, 0, 429, 432, 433, 434, 482, 483, 484,
	204, 436, 435, 485, 0, 0, 0, 0, 437, 438,
	486, 439, 440, 441, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 213, 214, 215, 443, 444, 216, 445,
	217, 218, 446, 0, 219, 220, 221, 222, 223, 224,
	0, 0, 225, 447, 448, 449, 0, 226, 450, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 0,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 451, 452, 0, 248, 0,
	249, 0, 250, 0, 0, 251, 252, 253, 0, 254,
	0, 255, 256, 0, 453, 257, 258, 260, 263, 259,
	264, 265, 266, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 267, 268, 269, 456, 270, 271, 0, 272,
	0, 273, 0, 0, 0, 274, 275, 0, 276, 457,
	0, 458, 277, 0, 278, 279, 280, 281, 282, 283,
	2515, 460, 461, 0, 0, 465, 285, 0, 0, 0,
	0, 284, 286, 293, 0, 0, 287, 462, 289, 288,
	290, 291, 292, 463, 0, 464, 0, 294, 0, 0,
	295, 296, 297, 0, 298, 299, 0, 0, 300, 301,
	302, 303, 0, 305, 304, 0, 306, 466, 0, 307,
	308, 0, 0, 309, 310, 0, 0, 311, 0, 312,
	313, 0, 0, 314, 315, 317, 318, 316, 0, 319,
	320, 322, 321, 0, 0, 0, 0, 467, 468, 323,
	324, 0, 325, 326, 0, 0, 328, 329, 0, 0,
	330, 469, 0, 331, 0, 470, 332, 327, 333, 334,
	335, 336, 337, 338, 0, 339, 471, 340, 472, 341,
	0, 342, 0, 343, 344, 345, 346, 347, 348, 473,
	349, 350, 0, 351, 352, 353, 354, 355, 0, 357,
	358, 359, 356, 360, 361, 362, 363, 0, 364, 0,
	365, 366, 367, 368, 474, 369, 0, 370, 374, 375,
	376, 377, 378, 379, 380, 0, 387, 388, 381, 383,
	384, 385, 382, 386, 389, 390, 0, 391, 371, 372,
	392, 0, 393, 475, 394, 395, 0, 405, 396, 397,
	398, 373, 399, 403, 404, 400, 401, 402, 476, 0,
	407, 408, 406, 0, 409, 410, 411, 412, 413, 261,
	414, 262, 415, 0, 477, 478, 479, 416, 0, 0,
	417, 418, 480, 419, 481, 0, 420, 421, 422, 0,
	423, 424, 0, 0, 425, 426, 427, 428, 430, 0,
	431, 0, 429, 432, 433, 434, 482, 483, 484, 204,
	436, 435, 485, 0, 0, 0, 0, 437, 438, 486,
	439, 440, 441, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 442, 0, 0,
	0, 0, 213, 214, 215, 443, 444, 216, 445, 217,
	218, 446, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 447, 448, 449, 0, 226, 450, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 451, 452, 0, 248, 0, 249,
	0, 250, 0, 0, 251, 252, 253, 0, 254, 0,
	255, 256, 0, 453, 257, 258, 260, 263, 259, 264,
	265, 266, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 267, 268, 269, 456, 270, 271, 0, 272, 0,
	273, 0, 0, 0, 274, 275, 0, 276, 457, 0,
	458, 277, 0, 278, 279, 280, 281, 282, 283, 2504,
	460, 461, 0, 0, 465, 285, 0, 0, 0, 0,
	284, 286, 293, 0, 0, 287, 462, 289, 288, 290,
	291, 292, 463, 0, 464, 0, 294, 0, 0, 295,
	296, 297, 0, 298, 299, 0, 0, 300, 301, 302,
	303, 0, 305, 304, 0, 306, 466, 0, 307, 308,
	0, 0, 309, 310, 0, 0, 311, 0, 312, 313,
	0, 0, 314, 315, 317, 318, 316, 0, 319, 320,
	322, 321, 0, 0, 0, 0, 467, 468, 323, 324,
	0, 325, 326, 0, 0, 328, 329, 0, 0, 330,
	469, 0, 331, 0, 470, 332, 327, 333, 334, 335,
	336, 337, 338, 0, 339, 471, 340, 472, 341, 0,
	342, 0, 343, 344, 345, 346, 347, 348, 473, 349,
	350, 0, 351, 352, 353, 354, 355, 0, 357, 358,
	359, 356, 360, 361, 362, 363, 0, 364, 0, 365,
	366, 367, 368, 474, 369, 0, 370, 374, 375, 376,
	377, 378, 379, 380, 0, 387, 388, 381, 383, 384,
	385, 382, 386, 389, 390, 0, 391, 371, 372, 392,
	0, 393, 475, 394, 395, 0, 405, 396, 397, 398,
	373, 399, 403, 404, 400, 401, 402, 476, 0, 407,
	408, 406, 0, 409, 410, 411, 412, 413, 261, 414,
	262, 415, 0, 477, 478, 479, 416, 0, 0, 417,
	418, 480, 419, 481, 0, 420, 421, 422, 0, 423,
	424, 0, 0, 425, 426, 427, 428, 430, 0, 431,
	0, 429, 432, 433, 434, 482, 483, 484, 204, 436,
	435, 485, 0, 0, 0, 0, 437, 438, 486, 439,
	440, 441, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 213, 214, 215, 443, 444, 216, 445, 217, 218,
	446, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 447, 448, 449, 0, 226, 450, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 451, 452, 0, 248, 0, 249, 0,
	250, 0, 0, 251, 252, 253, 0, 254, 0, 255,
	256, 0, 453, 257, 258, 260, 263, 259, 264, 265,
	266, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	267, 268, 269, 456, 270, 271, 0, 272, 0, 273,
	0, 0, 0, 274, 275, 0, 276, 457, 0, 458,
	277, 0, 278, 279, 280, 281, 282, 283, 2223, 460,
	461, 0, 0, 465, 285, 0, 0, 0, 0, 284,
	286, 293, 0, 0, 287, 462, 289, 288, 290, 291,
	292, 463, 0, 464, 0, 294, 0, 0, 295, 296,
	297, 0, 298, 299, 0, 0, 300, 301, 302, 303,
	0, 305, 304, 0, 306, 466, 0, 307, 308, 0,
	0, 309, 310, 0, 0, 311, 0, 312, 313, 0,
	0, 314, 315, 317, 318, 316, 0, 319, 320, 322,
	321, 0, 0, 0, 0, 467, 468, 323, 324, 0,
	325, 326, 0, 0, 328, 329, 0, 0, 330, 469,
	0, 331, 0, 470, 332, 327, 333, 334, 335, 336,
	337, 338, 0, 339, 471, 340, 472, 341, 0, 342,
	0, 343, 344, 345, 346, 347, 348, 473, 349, 350,
	0, 351, 352, 353, 354, 355, 0, 357, 358, 359,
	356, 360, 361, 362, 363, 0, 364, 0, 365, 366,
	367, 368, 474, 369, 0, 370, 374, 375, 376, 377,
	378, 379, 380, 0, 387, 388, 381, 383, 384, 385,
	382, 386, 389, 390, 0, 391, 371, 372, 392, 0,
	393, 475, 394, 395, 0, 405, 396, 397, 398, 373,
	399, 403, 404, 400, 401, 402, 476, 0, 407, 408,
	406, 0, 409, 410, 411, 412, 413, 261, 414, 262,
	415, 0, 477, 478, 479, 416, 0, 0, 417, 418,
	480, 419, 481, 0, 420, 421, 422, 0, 423, 424,
	0, 0, 425, 426, 427, 428, 430, 0, 431, 0,
	429, 432, 433, 434, 482, 483, 484, 204, 436, 435,
	485, 0, 0, 0, 0, 437, 438, 486, 439, 440,
	441, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 442, 0, 0, 0, 0,
	213, 214, 215, 443, 444, 216, 445, 217, 218, 446,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	447, 448, 449, 0, 226, 450, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 451, 452, 0, 248, 0, 249, 0, 250,
	0, 0, 251, 252, 253, 0, 254, 0, 255, 256,
	0, 453, 257, 258, 260, 263, 259, 264, 265, 266,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 267,
	268, 269, 456, 270, 271, 0, 272, 0, 273, 0,
	0, 0, 274, 275, 0, 276, 457, 0, 458, 277,
	0, 278, 279, 280, 281, 282, 283, 459, 460, 461,
	0, 0, 465, 285, 0, 0, 0, 0, 284, 286,
	293, 0, 0, 287, 462, 289, 288, 290, 291, 292,
	463, 0, 464, 0, 294, 0, 0, 295, 296, 297,
	0, 298, 299, 0, 0, 300, 301, 302, 303, 0,
	305, 304, 0, 306, 466, 0, 307, 308, 0, 0,
	309, 310, 0, 0, 311, 0, 312, 313, 0, 0,
	314, 315, 317, 318, 316, 0, 319, 320, 322, 321,
	0, 0, 0, 0, 467, 468, 323, 324, 0, 325,
	326, 0, 0, 328, 329, 0, 0, 330, 469, 0,
	331, 0, 470, 332, 327, 333, 334, 335, 336, 337,
	338, 0, 339, 471, 340, 472, 341, 0, 342, 0,
	343, 344, 345, 346, 347, 348, 473, 349, 350, 0,
	351, 352, 353, 354, 355, 0, 357, 358, 359, 356,
	360, 361, 362, 363, 0, 364, 0, 365, 366, 367,
	368, 474, 369, 0, 370, 522, 375, 376, 377, 378,
	379, 380, 0, 387, 388, 381, 383, 384, 385, 382,
	386, 389, 390, 0, 391, 371, 372, 392, 0, 393,
	475, 394, 395, 0, 405, 396, 397, 398, 373, 399,
	403, 404, 400, 401, 402, 476, 0, 407, 408, 406,
	0, 409, 410, 411, 412, 413, 261, 414, 262, 415,
	0, 477, 478, 479, 416, 0, 0, 417, 418, 480,
	419, 481, 0, 420, 421, 422, 0, 423, 424, 0,
	0, 425, 426, 427, 428, 430, 0, 431, 0, 429,
	432, 433, 434, 482, 483, 484, 204, 436, 435, 485,
	0, 0, 0, 0, 437, 438, 486, 439, 440, 441,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 442, 0, 1766, 0, 0, 213,
	214, 215, 443, 444, 216, 445, 217, 218, 446, 0,
	219, 220, 221, 222, 223, 224, 0, 0, 225, 447,
	448, 449, 0, 226, 450, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 0, 240, 241, 0, 0,
	0, 0, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 451, 452, 0, 248, 0, 249, 0, 250, 0,
	0, 251, 252, 253, 0, 254, 0, 255, 256, 0,
	453, 257, 258, 260, 263, 259, 264, 265, 266, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 267, 268,
	269, 456, 270, 271, 0, 272, 0, 273, 0, 0,
	0, 274, 275, 0, 276, 457, 0, 458, 277, 0,
	278, 279, 280, 281, 282, 283, 459, 460, 461, 0,
	0, 465, 285, 0, 0, 0, 0, 284, 286, 293,
	0, 0, 287, 462, 289, 288, 290, 291, 292, 463,
	0, 464, 0, 294, 0, 0, 295, 296, 297, 0,
	298, 299, 0, 0, 300, 301, 302, 303, 0, 305,
	304, 0, 306, 466, 0, 307, 308, 0, 0, 309,
	310, 0, 0, 311, 0, 312, 313, 0, 0, 314,
	315, 317, 318, 316, 0, 319, 320, 322, 321, 0,
	0, 0, 0, 467, 468, 323, 324, 0, 325, 326,
	0, 0, 328, 329, 0, 0, 330, 469, 0, 331,
	0, 470, 332, 327, 333, 334, 335, 336, 337, 338,
	0, 339, 471, 340, 472, 341, 0, 342, 0, 343,
	344, 345, 346, 347, 348, 473, 349, 350, 0, 351,
	352, 353, 354, 355, 0, 357, 358, 359, 356, 360,
	361, 362, 363, 0, 364, 0, 365, 366, 367, 368,
	474, 369, 0, 370, 374, 375, 376, 377, 378, 379,
	380, 0, 387, 388, 381, 383, 384, 385, 382, 386,
	389, 390, 0, 0, 371, 372, 392, 0, 393, 475,
	394, 395, 0, 405, 396, 397, 398, 373, 399, 403,
	404, 400, 401, 402, 476, 0, 407, 408, 406, 0,
	409, 410, 411, 412, 413, 261, 414, 262, 415, 0,
	477, 478, 479, 416, 0, 0, 417, 418, 480, 419,
	481, 0, 420, 421, 422, 0, 423, 424, 0, 0,
	425, 426, 427, 428, 430, 0, 431, 0, 429, 432,
	433, 434, 482, 483, 484, 204, 436, 435, 485, 0,
	0, 0, 0, 437, 438, 486, 439, 440, 441, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 442, 0, 0, 0, 0, 213, 214,
	215, 443, 444, 216, 445, 217, 218, 446, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 447, 448,
	449, 0, 226, 450, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	451, 452, 0, 248, 0, 249, 0, 250, 0, 0,
	251, 252, 253, 0, 254, 0, 255, 256, 0, 453,
	257, 258, 260, 263, 259, 264, 265, 266, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 267, 268, 269,
	456, 270, 271, 0, 272, 0, 273, 0, 0, 0,
	274, 275, 0, 276, 457, 0, 458, 277, 0, 278,
	279, 280, 281, 282, 283, 1229, 460, 461, 0, 0,
	465, 285, 0, 0, 0, 0, 284, 286, 293, 0,
	0, 287, 462, 289, 288, 290, 291, 292, 463, 0,
	464, 0, 294, 0, 0, 295, 296, 297, 0, 298,
	299, 0, 0, 300, 301, 302, 303, 0, 305, 304,
	0, 306, 466, 0, 307, 308, 0, 0, 309, 310,
	0, 0, 311, 0, 312, 313, 0, 0, 314, 315,
	317, 318, 316, 0, 319, 320, 322, 321, 0, 0,
	0, 0, 467, 468, 323, 324, 0, 325, 326, 0,
	0, 328, 329, 0, 0, 330, 469, 0, 331, 0,
	470, 332, 327, 333, 334, 335, 336, 337, 338, 0,
	339, 471, 340, 472, 341, 0, 342, 0, 343, 344,
	345, 346, 347, 348, 473, 349, 350, 0, 351, 352,
	353, 354, 355, 0, 357, 358, 359, 356, 360, 361,
	362, 363, 0, 364, 0, 365, 366, 367, 368, 474,
	369, 0, 370, 374, 375, 376, 377, 378, 379, 380,
	0, 387, 388, 381, 383, 384, 385, 382, 386, 389,
	390, 0, 391, 371, 372, 392, 0, 393, 475, 394,
	395, 0, 405, 396, 397, 398, 373, 399, 403, 404,
	400, 401, 402, 476, 0, 407, 408, 406, 0, 409,
	410, 411, 412, 413, 261, 414, 262, 415, 0, 477,
	478, 479, 416, 0, 0, 417, 418, 480, 419, 481,
	0, 420, 421, 422, 0, 423, 424, 0, 0, 425,
	426, 427, 428, 430, 0, 431, 0, 429, 432, 433,
	434, 482, 483, 484, 204, 436, 435, 485, 0, 0,
	0, 0, 437, 438, 486, 439, 440, 441, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 213, 214, 215,
	443, 444, 216, 445, 217, 218, 446, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 447, 448, 449,
	0, 226, 450, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 451,
	452, 0, 248, 0, 249, 0, 250, 0, 0, 251,
	252, 253, 0, 254, 0, 255, 256, 0, 453, 257,
	258, 260, 263, 259, 264, 265, 266, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 267, 268, 269, 456,
	270, 271, 0, 272, 0, 273, 0, 0, 0, 274,
	275, 0, 276, 457, 0, 458, 277, 0, 278, 279,
	280, 281, 282, 283, 1172, 460, 461, 0, 0, 465,
	285, 0, 0, 0, 0, 284, 286, 293, 0, 0,
	287, 462, 289, 288, 290, 291, 292, 463, 0, 464,
	0, 294, 0, 0, 295, 296, 297, 0, 298, 299,
	0, 0, 300, 301, 302, 303, 0, 305, 304, 0,
	306, 466, 0, 307, 308, 0, 0, 309, 310, 0,
	0, 311, 0, 312, 313, 0, 0, 314, 315, 317,
	318, 316, 0, 319, 320, 322, 321, 0, 0, 0,
	0, 467, 468, 323, 324, 0, 325, 326, 0, 0,
	328, 329, 0, 0, 330, 469, 0, 331, 0, 470,
	332, 327, 333, 334, 335, 336, 337, 338, 0, 339,
	471, 340, 472, 341, 0, 342, 0, 343, 344, 345,
	346, 347, 348, 473, 349, 350, 0, 351, 352, 353,
	354, 355, 0, 357, 358, 359, 356, 360, 361, 362,
	363, 0, 364, 0, 365, 366, 367, 368, 474, 369,
	0, 370, 374, 375, 376, 377, 378, 379, 380, 0,
	387, 388, 381, 383, 384, 385, 382, 386, 389, 390,
	0, 391, 371, 372, 392, 0, 393, 475, 394, 395,
	0, 405, 396, 397, 398, 373, 399, 403, 404, 400,
	401, 402, 476, 0, 407, 408, 406, 0, 409, 410,
	411, 412, 413, 261, 414, 262, 415, 0, 477, 478,
	479, 416, 0, 0, 417, 418, 480, 419, 481, 0,
	420, 421, 422, 0, 423, 424, 0, 0, 425, 426,
	427, 428, 430, 0, 431, 0, 429, 432, 433, 434,
	482, 483, 484, 204, 436, 435, 485, 0, 0, 0,
	0, 437, 438, 486, 439, 440, 441, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 442, 0, 0, 0, 0, 213, 214, 215, 443,
	444, 216, 445, 217, 218, 446, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 447, 448, 449, 0,
	226, 450, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 451, 452,
	0, 248, 0, 249, 0, 250, 0, 0, 251, 252,
	253, 0, 254, 0, 255, 256, 0, 453, 257, 258,
	260, 263, 259, 264, 265, 266, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 267, 268, 269, 456, 270,
	271, 0, 272, 0, 273, 0, 0, 0, 274, 275,
	0, 276, 457, 0, 458, 277, 0, 278, 279, 280,
	281, 282, 283, 459, 460, 461, 0, 0, 465, 285,
	0, 0, 0, 0, 284, 286, 293, 0, 0, 287,
	462, 289, 288, 290, 291, 292, 463, 0, 464, 0,
	294, 0, 0, 295, 296, 297, 0, 298, 299, 0,
	0, 300, 301, 302, 303, 0, 305, 304, 0, 306,
	466, 0, 307, 308, 0, 0, 309, 310, 0, 0,
	311, 0, 312, 313, 0, 0, 314, 315, 317, 318,
	316, 0, 319, 320, 322, 321, 0, 0, 0, 0,
	467, 468, 323, 324, 0, 325, 326, 0, 0, 328,
	329, 0, 0, 330, 469, 0, 331, 0, 470, 332,
	327, 333, 334, 335, 336, 337, 338, 0, 339, 471,
	340, 472, 341, 0, 342, 0, 343, 344, 345, 346,
	347, 348, 473, 937, 350, 0, 351, 352, 353, 354,
	355, 0, 357, 358, 359, 356, 360, 361, 362, 363,
	0, 364, 0, 365, 366, 367, 368, 474, 369, 0,
	370, 374, 375, 376, 377, 378, 379, 380, 0, 387,
	388, 381, 383, 384, 385, 382, 386, 389, 390, 0,
	391, 371, 372, 392, 0, 393, 475, 394, 395, 0,
	405, 396, 397, 398, 373, 399, 403, 404, 400, 401,
	402, 476, 0, 407, 408, 406, 0, 409, 410, 411,
	412, 413, 261, 414, 262, 415, 0, 477, 478, 479,
	416, 0, 0, 417, 418, 480, 419, 481, 0, 420,
	421, 422, 0, 423, 424, 0, 0, 425, 426, 427,
	428, 430, 0, 431, 0, 429, 432, 433, 434, 482,
	483, 484, 204, 436, 435, 485, 0, 0, 0, 0,
	437, 438, 486, 439, 440, 441, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 213, 214, 215, 443, 444,
	216, 445, 217, 218, 446, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 447, 448, 449, 0, 226,
	450, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 0, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 451, 452, 0,
	248, 0, 249, 0, 250, 0, 0, 251, 252, 253,
	0, 254, 0, 255, 256, 0, 453, 257, 258, 260,
	263, 259, 264, 265, 266, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 267, 268, 269, 456, 270, 271,
	0, 272, 0, 273, 0, 0, 0, 274, 275, 0,
	276, 457, 0, 458, 0, 0, 278, 279, 280, 281,
	282, 283, 459, 460, 461, 0, 0, 465, 285, 0,
	0, 0, 0, 284, 286, 293, 0, 0, 287, 462,
	289, 288, 290, 291, 292, 463, 0, 464, 0, 294,
	0, 0, 295, 296, 297, 0, 298, 299, 0, 0,
	300, 301, 302, 303, 0, 305, 304, 0, 306, 466,
	0, 307, 308, 0, 0, 309, 310, 0, 0, 311,
	0, 312, 313, 0, 0, 314, 315, 317, 318, 316,
	0, 319, 320, 322, 321, 0, 0, 0, 0, 467,
	468, 323, 324, 0, 325, 326, 0, 0, 328, 329,
	0, 0, 330, 469, 0, 331, 0, 470, 332, 327,
	333, 334, 0, 336, 337, 338, 0, 339, 471, 340,
	472, 341, 0, 342, 0, 343, 344, 345, 0, 347,
	348, 473, 349, 350, 0, 351, 352, 353, 354, 355,
	0, 357, 358, 359, 356, 360, 361, 362, 363, 0,
	364, 0, 365, 366, 367, 368, 474, 0, 0, 370,
	374, 375, 376, 377, 378, 379, 380, 0, 387, 388,
	381, 383, 384, 385, 382, 386, 389, 390, 0, 391,
	371, 372, 392, 0, 393, 475, 394, 395, 0, 405,
	396, 397, 398, 373, 399, 403, 404, 400, 401, 402,
	476, 0, 407, 408, 406, 0, 409, 410, 411, 412,
	413, 261, 414, 262, 415, 0, 477, 478, 479, 416,
	0, 0, 417, 418, 480, 419, 481, 0, 420, 421,
	422, 0, 423, 424, 0, 0, 425, 426, 427, 428,
	430, 0, 431, 0, 429, 432, 433, 434, 482, 483,
	484, 0, 436, 435, 485, 0, 0, 0, 0, 437,
	438, 486, 439, 440, 441, 1381, 1382, 0, 1414, 1415,
	1416, 1424, 1425, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 1384, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1383, 0, 0,
	0, 0, 0, 0, 0, 1403, 0, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 1381,
	1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 1384, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1406, 1407, 1408, 1409,
	0, 1383, 0, 0, 0, 0, 1389, 0, 0, 1403,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 0, 0, 0,
	1406, 1407, 1408, 1409, 0, 0, 0, 0, 0, 1419,
	1389, 0, 0, 0, 0, 0, 1404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 1421, 1431, 0, 0, 1411,
	1412, 1413, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 1410, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 0, 1381, 1382, 0, 1414, 1415, 1416, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 1422, 0, 0, 0, 0, 0, 1384,
	0, 1420, 1430, 0, 1395, 1396, 1402, 1401, 1397, 1423,
	0, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391,
	0, 0, 0, 0, 0, 1383, 0, 0, 2381, 0,
	0, 0, 0, 1403, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 1381, 1382, 0,
	1414, 1415, 1416, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1384, 0, 1420, 1430, 0, 1395, 1396,
	1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385, 1386,
	1387, 1388, 1390, 1391, 1406, 1407, 1408, 1409, 0, 1383,
	0, 0, 2380, 0, 1389, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1431, 0, 0, 1411, 1412, 1413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 0, 0, 0, 1406, 1407,
	1408, 1409, 0, 0, 0, 0, 0, 1419, 1389, 0,
	0, 0, 0, 0, 1404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 1421, 1431, 0, 0, 1411, 1412, 1413,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 1410, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1405, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 0,
	0, 1381, 1382, 0, 1414, 1415, 1416, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1417, 1422, 0, 0, 0, 0, 0, 1384, 0, 1420,
	1430, 0, 1395, 1396, 1402, 1401, 1397, 1423, 0, 1394,
	1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 0, 0,
	0, 0, 0, 1383, 0, 0, 2377, 0, 0, 0,
	0, 1403, 0, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 1381, 1382, 0, 1414, 1415,
	1416, 1424, 1425, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 1384, 0, 1420, 1430, 0, 1395, 1396, 1402, 1401,
	1397, 1423, 0, 1394, 1392, 1393, 1385, 1386, 1387, 1388,
	1390, 1391, 1406, 1407, 1408, 1409, 0, 1383, 0, 0,
	2376, 0, 1389, 0, 0, 1403, 0, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1431, 0,
	0, 1411, 1412, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 0, 0, 0, 0, 0,
	1398, 1399, 0, 0, 0, 0, 1406, 1407, 1408, 1409,
	0, 0, 0, 0, 0, 1419, 1389, 0, 0, 0,
	0, 0, 1404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 1410, 0, 0, 0, 1404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 0, 0, 1381,
	1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 1422,
	0, 0, 0, 0, 0, 1384, 0, 1420, 1430, 0,
	1395, 1396, 1402, 1401, 1397, 1423, 0, 1394, 1392, 1393,
	1385, 1386, 1387, 1388, 1390, 1391, 0, 0, 0, 0,
	0, 1383, 0, 0, 2375, 0, 0, 0, 0, 1403,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 0,
	0, 0, 0, 1381, 1382, 0, 1414, 1415, 1416, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1384,
	0, 1420, 1430, 0, 1395, 1396, 1402, 1401, 1397, 1423,
	0, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391,
	1406, 1407, 1408, 1409, 0, 1383, 0, 0, 1960, 0,
	1389, 0, 0, 1403, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1431, 0, 0, 1411,
	1412, 1413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 0, 0, 0, 1406, 1407, 1408, 1409, 0, 0,
	0, 0, 0, 1419, 1389, 0, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 1421,
	1431, 0, 0, 1411, 1412, 1413, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	1410, 0, 0, 0, 1404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1405, 0, 0, 0, 0, 1381, 1382, 0,
	1414, 1415, 1416, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 1422, 0, 0,
	0, 0, 0, 1384, 0, 1420, 1430, 0, 1395, 1396,
	1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385, 1386,
	1387, 1388, 1390, 1391, 0, 0, 0, 0, 3185, 1383,
	0, 0, 0, 0, 0, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 1381, 1382, 0, 1414, 1415, 1416, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 1384, 0, 1420,
	1430, 0, 1395, 1396, 1402, 1401, 1397, 1423, 0, 1394,
	1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 1406, 1407,
	1408, 1409, 3181, 1383, 0, 0, 0, 0, 1389, 0,
	0, 1403, 0, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1431, 0, 0, 1411, 1412, 1413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 0,
	0, 0, 1406, 1407, 1408, 1409, 0, 0, 0, 0,
	0, 1419, 1389, 0, 0, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 1421, 1431, 0,
	0, 1411, 1412, 1413, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 0, 0, 0, 0, 0,
	1398, 1399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 1410, 0,
	0, 0, 1404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 0, 0, 1381, 1382, 0, 1414, 1415,
	1416, 1424, 1425, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 1422, 0, 0, 0, 0,
	0, 1384, 0, 1420, 1430, 0, 1395, 1396, 1402, 1401,
	1397, 1423, 0, 1394, 1392, 1393, 1385, 1386, 1387, 1388,
	1390, 1391, 0, 0, 0, 0, 3122, 1383, 0, 0,
	0, 0, 0, 0, 0, 1403, 0, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 1381,
	1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 1384, 0, 1420, 1430, 0,
	1395, 1396, 1402, 1401, 1397, 1423, 0, 1394, 1392, 1393,
	1385, 1386, 1387, 1388, 1390, 1391, 1406, 1407, 1408, 1409,
	3121, 1383, 0, 0, 0, 0, 1389, 0, 0, 1403,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 0, 0, 0,
	1406, 1407, 1408, 1409, 0, 0, 0, 0, 0, 1419,
	1389, 0, 0, 0, 0, 0, 1404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 1421, 1431, 0, 0, 1411,
	1412, 1413, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 1410, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 0, 1381, 1382, 0, 1414, 1415, 1416, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 1422, 0, 0, 0, 0, 0, 1384,
	0, 1420, 1430, 0, 1395, 1396, 1402, 1401, 1397, 1423,
	0, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391,
	0, 0, 0, 0, 3035, 1383, 0, 0, 0, 0,
	0, 0, 0, 1403, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 1381, 1382, 0,
	1414, 1415, 1416, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1384, 0, 1420, 1430, 0, 1395, 1396,
	1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385, 1386,
	1387, 1388, 1390, 1391, 1406, 1407, 1408, 1409, 2955, 1383,
	0, 0, 0, 0, 1389, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1431, 0, 0, 1411, 1412, 1413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 0, 0, 0, 1406, 1407,
	1408, 1409, 0, 0, 0, 0, 0, 1419, 1389, 0,
	0, 0, 0, 0, 1404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 1421, 1431, 0, 0, 1411, 1412, 1413,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 1410, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1405, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 0,
	0, 1381, 1382, 0, 1414, 1415, 1416, 1424, 1425, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1417, 1422, 0, 0, 0, 0, 0, 1384, 0, 1420,
	1430, 0, 1395, 1396, 1402, 1401, 1397, 1423, 0, 1394,
	1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 0, 0,
	0, 0, 2911, 1383, 0, 0, 0, 0, 0, 0,
	0, 1403, 0, 0, 0, 0, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 1381, 1382, 0, 1414, 1415,
	1416, 1424, 1425, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 1384, 0, 1420, 1430, 0, 1395, 1396, 1402, 1401,
	1397, 1423, 0, 1394, 1392, 1393, 1385, 1386, 1387, 1388,
	1390, 1391, 1406, 1407, 1408, 1409, 2910, 1383, 0, 0,
	0, 0, 1389, 0, 0, 1403, 0, 0, 0, 0,
	0, 0, 1400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1431, 0,
	0, 1411, 1412, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 0, 0, 0, 0, 0,
	1398, 1399, 0, 0, 0, 0, 1406, 1407, 1408, 1409,
	0, 0, 0, 0, 0, 1419, 1389, 0, 0, 0,
	0, 0, 1404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 0,
	0, 0, 0, 0, 1398, 1399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 1410, 0, 0, 0, 1404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 0, 0, 1381,
	1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 1422,
	0, 0, 0, 0, 0, 1384, 0, 1420, 1430, 0,
	1395, 1396, 1402, 1401, 1397, 1423, 0, 1394, 1392, 1393,
	1385, 1386, 1387, 1388, 1390, 1391, 0, 0, 0, 0,
	2909, 1383, 0, 0, 0, 0, 0, 0, 0, 1403,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 0,
	0, 0, 0, 1381, 1382, 0, 1414, 1415, 1416, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1384,
	0, 1420, 1430, 0, 1395, 1396, 1402, 1401, 1397, 1423,
	0, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391,
	1406, 1407, 1408, 1409, 2875, 1383, 0, 0, 0, 0,
	1389, 0, 0, 1403, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1431, 0, 0, 1411,
	1412, 1413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 0, 0, 0, 1406, 1407, 1408, 1409, 0, 0,
	0, 0, 0, 1419, 1389, 0, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 1421,
	1431, 0, 0, 1411, 1412, 1413, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	1410, 0, 0, 0, 1404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1405, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 1395, 1396,
	1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385, 1386,
	1387, 1388, 1390, 1391, 0, 0, 0, 0, 2694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1381, 1382, 0, 1414,
	1415, 1416, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 1384, 0, 0, 1430, 0, 0, 0, 1420,
	0, 0, 1395, 1396, 1402, 1401, 1397, 1423, 0, 1394,
	1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 1383, 0,
	2334, 0, 0, 0, 0, 0, 1403, 0, 0, 0,
	0, 0, 0, 1400, 0, 0, 0, 0, 0, 0,
	1381, 1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 2305, 0, 1384, 0, 0, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1406, 1407, 1408,
	1409, 0, 1383, 0, 0, 0, 0, 1389, 3265, 0,
	1403, 0, 0, 0, 0, 0, 0, 1400, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 1431, 0, 0, 1411, 1412, 1413, 0,
	0, 0, 0, 0, 2306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 0, 0,
	0, 1406, 1407, 1408, 1409, 0, 0, 0, 0, 0,
	1419, 1389, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 0, 1421, 1431, 0, 0,
	1411, 1412, 1413, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 0, 0, 0, 3264, 0, 0, 1398,
	1399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 1410, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1405, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1405,
	0, 0, 0, 0, 1381, 1382, 0, 1414, 1415, 1416,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 1422, 0, 0, 0, 0, 0,
	1384, 0, 1420, 1430, 0, 1395, 1396, 1402, 1401, 1397,
	1423, 0, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390,
	1391, 0, 0, 0, 0, 0, 1383, 0, 0, 0,
	0, 0, 0, 0, 1403, 0, 0, 0, 0, 0,
	0, 1400, 2048, 0, 0, 0, 0, 0, 0, 1381,
	1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 2047, 0, 0, 1384, 1420, 0, 1430, 1395,
	1396, 1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385,
	1386, 1387, 1388, 1390, 1391, 1406, 1407, 1408, 1409, 0,
	0, 1383, 0, 0, 0, 1389, 0, 2422, 0, 1403,
	2421, 0, 0, 0, 0, 0, 1400, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 0, 0, 0, 0,
	1406, 1407, 1408, 1409, 0, 0, 0, 0, 1419, 0,
	1389, 0, 0, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 1421, 1431, 0, 0, 1411,
	1412, 1413, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 0, 0, 0, 0, 0, 1398, 1399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 1410, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1405, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 0, 1381, 1382, 0, 1414, 1415, 1416, 1424,
	1425, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 1422, 0, 0, 0, 0, 0, 1384,
	1420, 0, 1430, 1395, 1396, 1402, 1401, 1397, 1423, 0,
	1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 0,
	0, 0, 0, 0, 0, 1383, 0, 0, 0, 0,
	0, 0, 0, 1403, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 0, 1381, 1382, 0,
	1414, 1415, 1416, 1424, 1425, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1384, 0, 1420, 1430, 0, 1395, 1396,
	1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385, 1386,
	1387, 1388, 1390, 1391, 1406, 1407, 1408, 1409, 0, 1383,
	0, 0, 0, 0, 1389, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1431, 0, 0, 1411, 1412, 1413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 0, 0, 0,
	0, 0, 1398, 1399, 0, 0, 0, 0, 1406, 1407,
	1408, 1409, 0, 0, 0, 0, 0, 1419, 1389, 0,
	0, 0, 0, 0, 1404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 1421, 1431, 0, 0, 1411, 1412, 1413,
	0, 0, 0, 0, 1418, 781, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 0, 0, 0, 0, 0, 1398, 1399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 1410, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1405, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1395, 1396, 1402, 1401, 1397, 1423, 0, 1394,
	1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 0, 0,
	0, 0, 0, 2684, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1381, 1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 1384, 0, 0, 1430,
	0, 0, 0, 1420, 0, 0, 1395, 1396, 1402, 1401,
	1397, 1423, 0, 1394, 1392, 1393, 1385, 1386, 1387, 1388,
	1390, 1391, 1383, 0, 0, 0, 0, 0, 0, 0,
	1403, 0, 0, 0, 0, 0, 0, 1400, 0, 0,
	0, 0, 0, 0, 1381, 1382, 0, 1414, 1415, 1416,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 2423, 0, 0,
	1384, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1406, 1407, 1408, 1409, 0, 1383, 0, 0, 0,
	0, 1389, 0, 0, 1403, 0, 2428, 0, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1431, 0, 0,
	1411, 1412, 1413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 0, 0, 0, 1406, 1407, 1408, 1409, 0,
	0, 0, 0, 0, 1419, 1389, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 0,
	1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 0, 0,
	0, 0, 0, 1398, 1399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 1410, 0, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1405,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1405, 0, 0, 0, 0, 1381, 1382,
	0, 1414, 1415, 1416, 1424, 1425, 1426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1422, 0,
	0, 0, 0, 0, 1384, 0, 1420, 1430, 0, 1395,
	1396, 1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385,
	1386, 1387, 1388, 1390, 1391, 0, 0, 0, 0, 0,
	1383, 0, 0, 0, 0, 0, 0, 0, 1403, 0,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 0,
	0, 0, 1381, 1382, 0, 1414, 1415, 1416, 1424, 1425,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 2374, 0, 0, 1384, 0,
	1420, 1430, 0, 1395, 1396, 1402, 1401, 1397, 1423, 0,
	1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 1406,
	1407, 1408, 1409, 0, 1383, 0, 0, 0, 0, 1389,
	0, 0, 1403, 0, 0, 0, 0, 0, 0, 1400,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 1431, 0, 0, 1411, 1412,
	1413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	1428, 0, 0, 0, 0, 0, 0, 1398, 1399, 0,
	0, 0, 0, 1406, 1407, 1408, 1409, 0, 0, 0,
	0, 0, 1419, 1389, 0, 0, 0, 0, 0, 1404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 1421, 1431,
	0, 0, 1411, 1412, 1413, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 1428, 2390, 0, 0, 0, 0,
	0, 1398, 1399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 1410,
	0, 0, 0, 1404, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1405, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1405, 0, 0, 0, 0, 1381, 1382, 0, 1414,
	1415, 1416, 1424, 1425, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1422, 0, 0, 0,
	0, 0, 1384, 0, 1420, 1430, 0, 1395, 1396, 1402,
	1401, 1397, 1423, 0, 1394, 1392, 1393, 1385, 1386, 1387,
	1388, 1390, 1391, 0, 0, 0, 0, 0, 1383, 0,
	0, 0, 0, 0, 0, 0, 1403, 0, 0, 0,
	0, 0, 0, 1400, 0, 0, 0, 0, 0, 0,
	1381, 1382, 0, 1414, 1415, 1416, 1424, 1425, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 1384, 0, 1420, 1430,
	0, 1395, 1396, 1402, 1401, 1397, 1423, 0, 1394, 1392,
	1393, 1385, 1386, 1387, 1388, 1390, 1391, 1406, 1407, 1408,
	1409, 0, 1383, 0, 0, 0, 0, 1389, 0, 0,
	1403, 0, 0, 0, 0, 0, 0, 1400, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 1431, 0, 0, 1411, 1412, 1413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 0, 0,
	0, 1406, 1407, 1408, 1409, 0, 0, 0, 0, 0,
	1419, 1389, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 0, 1421, 1431, 0, 0,
	1411, 1412, 1413, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 0, 0, 0, 0, 0, 0, 1398,
	1399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 1410, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1405, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1405,
	0, 0, 0, 0, 1381, 1382, 0, 1414, 1415, 1416,
	1424, 1425, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 0, 0,
	1384, 0, 1420, 1430, 0, 1395, 1396, 1402, 1401, 1397,
	1423, 0, 1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390,
	1391, 0, 0, 0, 0, 0, 1383, 0, 0, 0,
	0, 0, 0, 0, 1403, 0, 0, 0, 0, 0,
	0, 1400, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1395,
	1396, 1402, 1401, 1397, 1423, 0, 1394, 1392, 1393, 1385,
	1386, 1387, 1388, 1390, 1391, 1406, 1407, 1408, 1409, 0,
	0, 0, 0, 0, 0, 1389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1590, 0,
	1421, 1431, 0, 0, 1411, 1412, 1413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 0, 0,
	0, 0, 0, 1398, 1399, 1602, 1584, 1591, 1574, 1612,
	1611, 0, 0, 1576, 1575, 0, 0, 0, 1419, 0,
	0, 1622, 1623, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1613, 0, 1609, 1608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1607, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 1606, 1604, 1605, 0, 0, 0, 0,
	0, 0, 0, 1405, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1586, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 0, 1595, 1589, 1597, 1599, 1600,
	1601, 1596, 0, 1594, 0, 0, 0, 0, 0, 0,
	0, 0, 1618, 1619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 1610, 722, 0, 0,
	1587, 1588, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1395, 1396, 1402, 1401, 1397, 1423, 698,
	1394, 1392, 1393, 1385, 1386, 1387, 1388, 1390, 1391, 0,
	0, 696, 0, 0, 0, 0, 0, 1603, 0, 0,
	0, 1571, 1569, 1570, 1573, 1572, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 0, 0, 0, 699,
	0, 0, 0, 727, 0, 0, 0, 0, 0, 705,
	706, 0, 0, 0, 0, 716, 1579, 1580, 1582, 1583,
	0, 0, 0, 579, 0, 0, 0, 0, 723, 700,
	0, 1598, 1581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1621, 0, 0, 0, 580, 0, 0, 0,
	0, 0, 0, 0, 721, 0, 0, 0, 0, 0,
	1577, 0, 1614, 1615, 1616, 1617, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 599, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 0,
	1585, 0, 695, 0, 0, 1592, 1620, 582, 0, 0,
	583, 0, 0, 0, 0, 0, 0, 702, 703, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 0,
	0, 0, 584, 0, 0, 0, 0, 0, 0, 709,
	603, 0, 0, 0, 0, 0, 704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 586, 0, 0,
	587, 609, 0, 0, 0, 612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 608,
	0, 0, 0, 0, 0, 590, 0, 0, 713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 711, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 0, 0, 0, 694, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 714, 0, 0,
	0, 712, 0, 0, 0, 728, 729, 0, 592, 0,
	0, 726, 0, 0, 0, 0, 0, 0, 715, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 611, 0, 717, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 0,
	607, 0, 606, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 0, 0, 602, 0, 0, 0, 0, 613, 0,
	610, 0, 0, 0, 600,
}
var sqlPact = [...]int{

	178, -1000, -16, -1000, -1000, -1000, -1000, -1000, 205, 204,
	185, 179, 177, 173, 172, 171, 169, -1000, -1000, -1000,
	166, -1000, -1000, 163, -1000, -1000, 152, 150, 149, -1000,
	148, 147, -1000, -1000, -1000, -1000, 145, 143, 141, 54078,
	1569, 53679, 40759, 1411, 2032, 37930, 53274, 37525, 52869, 52464,
	139, -1000, 52059, 137, 135, 130, -1000, -1000, 126, 1280,
	35125, 121, 114, 113, 1742, 112, 103, -1000, 101, -1000,
	64771, 1193, -1000, 95, 92, -1000, 6184, 808, 40354, 2044,
	91, 90, 7740, 2034, -1000, -1000, 1233, -1000, -1000, 89,
	83, 82, 77, 76, 75, 74, 73, 65, -1000, 64,
	62, 61, 59, 58, 54, 52, 50, 47, 44, 43,
	41, 40, 35, 31, 30, -1000, 64683, 1444, 1271, 1264,
	1260, 1254, 1256, 794, 28, 26, 25, 24, 19, 18,
	-1000, -1000, 16, 14, 12, 1, -1000, -1, -2, 250,
	-3, -5, -6, -8, -10, 2734, 1978, 1191, 680, 15757,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	57669, 54078, -12, -156, -13, -1000, 2280, 806, 26546, 178,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 393,
	-1000, -1000, -1000, 255, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1489, 619, -1000,
	-1000, -1000, 51654, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 54078, -1000, 1565, 15, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 618, -1000, 1560, 138, 1475, -1000, -1000, -1000,
	-1000, -1000, 54078, -1000, -1000, 2553, 2552, 1525, 605, 51255,
	-1000, 1749, -1000, 748, 16185, -1000, 934, -1000, 16185, 251,
	-1000, -1000, -1000, -1000, -1000, 39949, 11891, 39544, 39139, 33505,
	50850, 11476, 50445, 1000, -1000, -1000, -1000, -1000, -1000, -20,
	36322, 54078, -1000, 249, -1000, -1000, -1000, -1000, -1000, -1000,
	22759, 496, 22317, 573, 21875, 358, -1000, -1000, -1000, -1000,
	2551, 2550, 877, 2548, 2236, 57270, 1334, 2547, 1277, 946,
	809, 2546, 2545, 2543, 2542, 2541, 2533, 1148, 50040, 2024,
	33090, 32675, 54078, 54078, 1841, 49635, -1000, -1000, 1080, 1063,
	-1000, -1000, -1000, -1000, 2109, 2023, 2012, 49230, -1000, -1000,
	2529, 2527, 2526, 2525, 2524, 56871, 1331, 2523, 1756, 2519,
	2518, 2514, 2512, 2511, 2510, 2509, 2508, -1000, 48825, 48420,
	48015, 47610, 47205, 32260, 31845, -1000, -1000, -1000, 28162, 5276,
	46800, 28994, 54078, -1000, -1000, 23187, 69, -1000, -1000, -1000,
	1970, -1000, 23187, 69, -1000, 1443, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1964, 1226, 2395, 31430, 1618, 1082, 2108,
	2507, 1752, 2101, 2098, 2096, 2084, 2078, 2506, 1221, 2503,
	1137, 2502, 2063, 2061, 2427, 1537, 38734, 2501, 2500, 2263,
	2056, 1968, -1000, -1000, -1000, -1000, 1119, -1000, -1000, -1000,
	42359, -1000, -1000, 1481, -1000, -1000, 1481, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 997, 56073, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1338, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1738, -1000, 1515, -1000, -1000, 2497, 1978, 1773, 2267, 2267,
	2267, 2309, 369, 366, -1000, 250, -1000, -1000, 63905, -1000,
	-1000, 23187, 23187, 23187, 23187, 23187, 1440, -1000, -1000, -1000,
	597, 641, -1000, 594, 514, -1000, -1000, -1000, -1000, -1000,
	-1000, 589, 2428, -1000, 812, -1000, -1000, -1000, -1000, 2406,
	-1000, 14017, -1000, -1000, -1000, 403, 588, 23187, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 240, 757, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	504, 1364, 502, 502, 502, -1000, -1000, 788, -1000, -1000,
	-1000, 745, -1000, 744, -1000, -1000, -1000, 2021, 585, 584,
	-1000, 583, 581, 580, -1000, -1000, -1000, 579, 578, 577,
	576, 575, 572, 571, 570, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 786, -1000, -1000, -1000, 568, 567, 564,
	557, 551, 546, 543, 542, 533, -21, 54078, -1000, 393,
	-21, -1000, -1000, 529, -1000, 17041, 17041, 17041, -1000, -1000,
	1543, 23187, -1000, 1844, -1000, 3581, -238, 684, 27352, -1000,
	25721, 684, 647, 31011, -1000, 1966, -1000, -1000, 515, 238,
	-1000, -1000, -1000, -1000, -1000, 1962, 54078, 12304, 54078, 54078,
	-1000, -1000, 23187, -1000, -1000, 33918, 35923, 54078, 38329, 2354,
	64444, 35923, 54078, 2020, -1000, -1000, -1000, 54078, -1000, 23187,
	-1000, 2352, 1724, -28, -1000, -1000, -1000, -1000, -1000, 1740,
	1790, 865, 996, -1000, 16185, 2227, -1000, -1000, -1000, 237,
	12304, -1000, 1413, 2162, 1035, -1000, 1599, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1316, 2159, -1000, 1666, 2156,
	1315, -1000, -1000, 768, 2152, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1548, -1000, -1000, 2259, -1000, -1000,
	1631, 2151, -189, 33918, 36322, -23, -1000, -1000, -43, -1000,
	11061, 63905, -1000, -1000, -1000, 63905, 698, -1000, -1000, 2150,
	-1000, 63905, 696, -1000, -1000, 2145, -1000, -1000, -1000, 2495,
	-1000, 2494, 1691, 2490, 2487, 2485, -1000, 1111, 1357, 2478,
	-1000, 2476, -1000, -1000, -1000, -1000, -1000, -1000, 46395, 45990,
	800, -1000, 1518, -1000, -1000, 45585, 761, 1677, -1000, -1000,
	1672, -1000, 770, -1000, 2475, 45186, 1868, 761, 1671, -1000,
	-1000, -1000, -1000, -1000, 54078, -1000, 54078, -1000, 54078, -1000,
	1149, -1000, 56472, -238, -1000, -1000, -1000, -1000, -1000, 2143,
	2473, 2472, 2469, -1000, 54078, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 156, 2141, -1000, -1000, 156, 2140, -1000,
	156, 2139, -1000, 153, 2135, -1000, -1000, 1546, 2134, -1000,
	-113, 2131, -1000, -1000, -113, 2129, -1000, -31, -1000, -1000,
	-1000, 806, -1000, 27757, 44781, 33918, 760, 620, 63905, -1000,
	33918, 63905, -1000, -1000, 44376, 43971, -1000, -1000, 1090, 1772,
	-1000, -1000, -1000, -1000, 33918, 33918, -1000, 43566, -1000, -1000,
	-1000, 1474, 2253, 54078, -1000, -1000, 2013, -1000, 35524, 54078,
	-1000, 54078, -1000, 54078, -1000, 54078, -1000, 54078, -1000, -1000,
	-1000, -1000, -1000, 2116, 1282, 1266, -1000, 54078, -1000, 54078,
	-1000, -1000, -1000, 1739, -1000, -1000, -1000, -1000, 54078, -1000,
	-1000, -1000, -1000, -1000, -1000, 2001, -1000, 1229, -1000, 1086,
	-1000, -1000, 165, -1000, -1000, -28, -1000, 56073, -1000, -1000,
	1978, 1773, -1000, 54078, -1000, -1000, -1000, 1978, 1492, 1811,
	21433, 1802, 23187, 250, -1000, -1000, 250, 250, 15315, -1000,
	-1000, 64444, 64444, 12304, 1041, 23187, 23187, 23187, 23187, 23187,
	23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187,
	23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187,
	23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187, 23187,
	1708, 23187, 994, 23187, 23187, 23187, 23187, 1350, -1000, -1000,
	1442, 418, 1466, -1000, 2390, 2390, 2390, 64283, 64283, 490,
	2468, 641, -1000, 23187, -1000, 69, 23187, 12719, -1000, 2415,
	1105, -1000, -1000, 366, 6739, 1662, -1000, 362, 13161, -1000,
	-1000, -1000, 14017, 514, 20991, 23187, 779, 63905, 10648, 2019,
	1903, -1000, 2414, -1000, -1000, 2406, -1000, -1000, -1000, 1040,
	1039, 1033, 1017, 512, 693, 691, 686, 683, 431, 23187,
	23187, 23187, 23187, 23187, 23187, 23187, 23187, -1000, 20563, 20121,
	19679, 19237, 18795, 24471, 18353, 23187, 14445, 54078, -21, 2351,
	23187, 129, -1000, 62398, -1000, 129, 129, 511, -32, 63905,
	1810, 1808, 26949, 1850, 1456, 1456, 1456, -1000, 509, 639,
	684, 8153, 41158, 1464, 684, 684, 234, 254, 360, 25318,
	1844, 41158, -1000, -1000, 54078, 508, 12719, 12304, 1107, -33,
	235, 1821, 1818, 234, -1000, -45, 760, 993, -111, -1000,
	4071, -46, -1000, 840, -1000, -1000, -1000, -1000, 527, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 782, 507, 506, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 504, 1364, 502, 502,
	502, -1000, -1000, -1000, 745, -1000, 744, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1954, -43, 38329, 728, -47, 880,
	-28, -1000, 1481, -1000, 1408, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2426, -1000,
	2403, -1000, -1000, 2413, -22, -1000, -1000, 12304, -1000, -29,
	1285, -1000, 37120, 2255, 2252, 2247, 1144, -1000, 1112, 2304,
	42359, 2339, 364, -1000, 1952, -1000, -1000, 743, 1081, 991,
	42359, 1666, -1000, 64444, -1000, 1859, 2296, 1083, 1076, 1083,
	1083, 1085, -1000, 42359, 988, 1400, 33918, -1000, 985, -1000,
	-30, 2338, 81, -1000, 1948, 980, -1000, -1000, 54078, 12304,
	694, -23, 36322, 54078, 230, -1000, 23187, 69, 23187, 69,
	-1000, -1000, 2110, -1000, -1000, -1000, 2467, 1291, 1755, -1000,
	-1000, -1000, 501, 1660, 1666, 1656, -1000, -1000, 43167, 54078,
	1838, -26, 54078, -1000, -1000, 1385, -1000, 2105, 2088, 465,
	2466, -1000, 1509, 1652, -1000, -1000, -1000, 55674, 1020, 2087,
	775, 291, 2350, 291, 30205, -1000, 54078, -1000, 54078, -1000,
	-1000, -1000, 2464, -1000, 54078, -1000, -1000, 54078, -1000, 54078,
	-1000, 54078, -1000, 54078, 54078, -1000, 54078, 33918, 33918, 33918,
	4071, 34720, -54, 359, -1000, 42762, 54078, 836, 36721, -208,
	694, -1000, 694, -1000, 54078, 1995, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 54078, -1000, 54078, -1000, -1000,
	-1000, -1000, -1000, -1000, 1173, -1000, 1987, -1000, 1979, -1000,
	228, -1000, -1000, -1000, 1389, 54078, 54078, 54078, -1000, 42359,
	-1000, -1000, 1978, -1000, -1000, -1000, -1000, -1000, 63905, -1000,
	463, -1000, -1000, 63905, 1243, 1842, -1000, 1842, -24, -1000,
	62019, 1786, 54078, -1000, -1000, -1000, -1000, -1000, 742, 1209,
	1209, 1075, 1075, 1075, 1075, 2326, 231, 889, 617, 7293,
	7293, 7293, 7293, 7293, 7293, 7293, 7293, 451, 1055, 1055,
	451, 451, 451, 451, 451, 1055, 1055, 1055, 7293, 7293,
	7293, 64283, 63979, 5746, 23187, 23187, 965, 1415, 418, 4919,
	23187, 3325, 3325, 3325, 3325, -1000, 1586, -1000, -1000, -1000,
	-1000, 1947, 500, 24471, 24471, -1000, -1000, -1000, -1000, 13589,
	23187, -1000, -1000, -1000, -1000, 17911, -1000, -1000, 61572, -245,
	355, -177, -9, -1000, 23187, 23187, 23187, 354, -1000, 353,
	-1000, -1000, 964, -1000, 962, 945, 943, -1000, 498, 227,
	23187, 54078, -1000, 59304, 637, -174, -1000, -55, 1067, -1000,
	23187, 217, -1000, 1450, 497, 495, 352, -60, 738, 724,
	716, 706, 23187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 63601, 59230, 58926, 58852, 6593, 58548, 58474,
	-61, 345, -1000, 1945, -177, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 344, -1000, -62, -1000, -63, -1000, 343, -1000,
	63527, -177, 341, 5012, -1000, 24471, 24471, 24471, -1000, 338,
	-1000, 62323, -1000, 63223, 17483, 17483, 17483, 337, 63149, 23187,
	-177, -1000, 492, -72, 775, 17041, 26140, 12304, -1000, 775,
	775, 23187, -1000, 23187, 26949, 26949, 1719, 1794, 26949, -1000,
	-1000, -1000, -1000, 41158, 659, 684, 41158, -1000, 2406, 1758,
	-1000, -1000, -1000, 54078, 393, -1000, 41158, 41158, 12304, 684,
	-1000, 335, 29397, -9, 214, -1000, -1000, 12304, 1843, 1843,
	-1000, 1944, 54078, 2368, -1000, -1000, 64444, -1000, 530, 917,
	-1000, 2411, 483, -1000, 2406, 2406, 54078, 115, 16185, -1000,
	1481, -1000, -1000, 1184, -1000, 1342, -1000, -1000, -1000, -1000,
	16185, -1000, 1496, 54078, 54078, 54078, -1000, -1000, 1651, 55275,
	1650, 64444, 54078, -1000, -1000, 482, 481, 1783, 1762, 54078,
	54078, 54876, 54477, 54078, 1379, 23187, 1698, 1178, 69, -1000,
	69, 476, 1009, 54078, 54078, 1304, -1000, -1000, -1000, -1000,
	-1000, 54078, -1000, -1000, 2410, -1000, 1083, -1000, -1000, -1000,
	1083, 1666, 1289, 54078, 33918, 764, 54078, 1403, 69, -1000,
	69, 474, 12304, 1366, -1000, 1886, -1000, 1589, -1000, -1000,
	10235, 63905, -1000, 63905, -1000, 54078, -1000, 798, 54078, 36721,
	2349, 2083, -1000, 1666, 2079, 393, -1000, -1000, 100, 760,
	33918, 54078, -26, 33918, 33918, 33918, 2462, 473, 2460, -1000,
	54078, 2075, 1507, 1649, 2106, 672, 54078, 1468, 23187, 1346,
	-1000, 29802, 816, 54078, 1236, 94, -1000, -1000, -1000, 6,
	54078, -1000, 2456, -1000, -1000, 156, 156, 156, -1000, 153,
	1546, -1000, -113, -113, -1000, -1000, 4071, 760, -27, 472,
	-1000, 688, 685, 28581, 33918, -73, -1000, -1000, -1000, -1000,
	-1000, 54078, 599, 1863, 54078, -1000, 760, -1000, 763, -1000,
	1064, -43, -43, -1000, 1168, 1166, 54078, 12304, 54078, 54078,
	12304, 54078, -1000, -1000, -1000, -1000, -1000, 1243, -1000, 23187,
	-1000, -1000, -1000, 15315, -1000, -1000, -1000, 54078, -232, 23187,
	23187, 4172, 3896, 23187, 24471, 24471, -1000, 23187, 394, -1000,
	-1000, -1000, -1000, -1000, 1943, 470, 23187, 64444, 4904, 4432,
	-1000, 332, 7217, 451, -1000, 23187, -1000, 330, 16613, -1000,
	62702, -25, -25, -1000, 2425, 1655, 1371, 1314, 1212, 2409,
	9822, -177, -75, -1000, -1000, 396, -1000, 2065, -1000, 23187,
	62776, 9409, -1000, 30608, 776, 1468, -1000, -1000, 2406, -1000,
	-1000, -1000, -1000, 61498, 64444, 64444, 23187, 23187, -1000, 23187,
	23187, 23187, -1000, -1000, 23187, -1000, -1000, -1000, -1000, 1942,
	23187, -1000, 64444, 64444, 24471, 24471, 24471, 24471, 24471, 24471,
	24471, 24471, 24471, 24471, 24471, 24471, 24471, 24471, 24471, 24471,
	24471, 24471, 24471, 1712, 24471, 2384, 2384, 2384, -1000, 1977,
	1942, 23187, 23187, 64444, 326, 323, 322, -1000, 23187, -177,
	4071, -1000, 1900, -1000, -78, -1000, 1844, -1000, -1000, 1900,
	1900, -81, 63905, -1000, 1719, -1000, 469, 23187, 26949, -1000,
	635, -1000, -82, -1000, 41158, -1000, 631, -246, -1000, 681,
	-1000, 393, -1000, -1000, -1000, 157, 41158, -1000, -83, -1000,
	2348, 320, 12304, -1000, -1000, -1000, -1000, -1000, 69, -43,
	1469, -1000, 2408, -1000, 630, 317, 2406, 316, 313, -43,
	54078, -1000, -28, -1000, -1000, -1000, -1000, -1000, -1000, 933,
	920, -1000, 2072, -1000, 1647, -1000, 815, -1000, 1251, 23187,
	23187, 468, 466, 1370, 2455, 2071, 1546, 2070, 1546, -1000,
	-1000, 753, -1000, 63905, 460, 459, -1000, -29, 1273, -1000,
	-1000, 23187, 23187, 41960, -1000, 2259, -1000, 919, -1000, -1000,
	-1000, 1666, 918, -1000, -1000, 1383, -1000, -1000, -1000, -1000,
	23187, -1000, -30, 916, 760, 1934, 1022, -1000, 2452, 2450,
	2446, 312, -34, -1000, 69, 54078, 54078, 2347, 54078, -1000,
	-1000, -1000, -1000, 761, -1000, -1000, 2441, -1000, 834, 12304,
	54078, 2068, 1751, 672, 34321, -1000, 761, 1811, -1000, 63905,
	-1000, 1236, 14873, 2249, -88, -1000, 154, -1000, -1000, -1000,
	775, 30205, 26949, 23187, 2437, -89, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 41561, 41561, 33918, 33918, 33918, 760,
	54078, 54078, 36721, 456, 54078, 54078, 452, -1000, -1000, -1000,
	1472, 54078, -1000, -1000, -1000, -1000, -1000, 1406, 1579, -1000,
	1478, 61194, -1000, 2260, 12304, 2328, 3325, 23187, 23187, 203,
	4404, 3423, 3325, 23187, 23187, 64444, 5398, -90, 23187, 23187,
	-1000, 23187, 626, 63905, 2419, 23187, 311, 308, 307, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 303, -1000, -1000,
	-1000, -1000, -1000, 63905, 23187, 116, -1000, -1000, -1000, 58068,
	-1000, 23187, 302, 301, -1000, 300, 298, 7070, 6214, 61120,
	60816, 60742, 63905, 1977, 63905, -1000, -1000, 983, 983, 1077,
	1077, 1077, 1077, 2384, 807, 1030, 528, 959, 959, 959,
	1183, 912, 912, 959, 959, 959, 1926, 1754, 450, 5064,
	-1000, -1000, 63905, 63905, 293, -1000, -1000, -1000, -177, 283,
	1894, 2295, -1000, 26949, 1894, 1894, -1000, -1000, 54078, 63905,
	-1000, -238, -1000, 2406, -1000, -1000, 1758, -1000, 8579, -1000,
	12304, -1000, -1000, 29397, -1000, 448, -1000, 70, -1000, -1000,
	625, -1000, -1000, 272, -1000, -1000, -43, 54078, 54078, 54078,
	2067, -1000, 3649, -1000, 60438, -91, -1000, 62019, 23187, 54078,
	-1000, 1358, 1845, 862, -1000, 54078, -1000, 54078, -1000, -1000,
	54078, 54078, 54078, 54078, 54078, -96, 63905, -48, -1000, 674,
	-1000, 54078, 54078, 33918, -97, 12304, -1000, 33918, 1015, -1000,
	-1000, -1000, 1856, -1000, 438, 1666, 69, -1000, -1000, -1000,
	437, 54078, 1505, 436, 12304, 1750, 672, 34321, -1000, 1020,
	1236, -1000, -1000, -74, -1000, 478, 69, 54078, 2436, 1468,
	-1000, -112, 63905, -1000, 673, -1000, -98, -1000, -1000, 267,
	-1000, 2211, 2210, -1000, 23187, 435, 433, 54078, 1635, -1000,
	-1000, -1000, 12304, 1057, -1000, -1000, -1000, 2260, 3325, 3325,
	23187, 23187, 23187, 3325, 5398, -110, -1000, 3325, 3325, -177,
	-1000, -1000, 62702, -1000, -1000, -1000, -1000, 63905, 8996, 1410,
	-1000, 60364, -1000, -1000, -1000, -1000, 23187, 23187, -1000, -1000,
	-1000, -1000, -1000, 24471, 1922, 420, 64444, -1000, -1000, 771,
	23187, 23187, 1844, 771, 771, -117, 684, -1000, -1000, -1000,
	2406, 70, -1000, 2434, 12304, -1000, -1000, -1000, -1000, -1000,
	54078, -1000, 54078, -1000, 12304, 54078, 1923, 1637, -1000, -1000,
	1761, 419, 24471, 54078, 714, -1000, 1352, 23187, -1000, -118,
	-119, 1632, -1000, -1000, 1624, 23187, -1000, 64444, 1546, 1546,
	-120, -126, -1000, 915, 911, 908, 54078, 16185, -1000, -1000,
	-1000, 899, -1000, -113, 23187, 1403, 1877, 36721, 2345, -1000,
	-1000, 23187, -1000, 54078, 23187, 1487, -1000, 672, 34321, -1000,
	2106, -1000, 2175, 54078, 2245, -1000, -1000, -1000, 1811, 418,
	-1000, 760, 413, 412, -127, 23187, 23187, -133, -132, -1000,
	713, 708, -1000, -1000, 54078, -1000, 3325, 3325, 3325, -1000,
	266, -1000, -1000, 1468, 2294, -1000, 60060, 59986, 434, 24471,
	64444, -134, -1000, 54078, 63905, -177, -1000, -1000, -1000, 41158,
	432, -1000, -1000, 1764, -1000, -1000, -1000, 54078, 1641, -1000,
	-1000, 23187, 5064, 411, 23187, -1000, 1856, 410, -1000, -1000,
	-1000, -1000, 1292, -1000, -1000, 63905, 2278, -1000, -1000, 409,
	408, 54078, 54078, 405, 663, -1000, 404, 63905, -1000, -1000,
	1425, 260, 69, -136, 834, -139, 54078, 34321, -1000, 1751,
	1012, -144, 54078, 1236, -1000, -1000, 33918, 33918, 1352, -157,
	-162, -1000, 1635, -1000, 54078, -1000, 54078, -1000, -1000, 1436,
	23187, -1000, -1000, 434, -163, -1000, -151, -1000, 2343, -1000,
	-1000, -1000, -1000, 2058, 59682, 1711, 54078, 59608, 1403, 54078,
	54078, 830, 12304, 1406, 1406, -1000, -1000, 23187, 16185, 23187,
	54078, 1856, -1000, 1352, 402, 1352, 397, -1000, 1750, 1135,
	-1000, 775, -1000, -1000, -165, -171, 1856, 1352, -1000, -1000,
	-179, -185, 258, 24043, 24043, 24043, -177, -1000, 54078, 395,
	2043, -1000, 1480, 1416, 102, 842, -1000, -190, 393, -1000,
	23187, -1000, -191, -1000, 811, -205, -1000, 810, -206, -1000,
	-207, 391, 1403, 1856, 23187, 1856, 23187, -1000, 30205, -1000,
	760, 760, 1403, 1856, -1000, -1000, -1000, -1000, -1000, 24899,
	1549, 1262, 61945, -1000, -1000, -1000, -1000, 54078, -1000, 1485,
	1482, 1128, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1711,
	63905, -1000, 1406, 1876, -1000, 1406, 1919, -1000, -1000, 54078,
	-1000, 1403, -213, 1403, -218, -196, -1000, -1000, -1000, 1403,
	2360, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2192, -1000,
	844, 1646, 1646, 1480, -1000, 381, -1000, 374, -219, 774,
	1352, 774, 1352, -1000, -1000, 23615, -1000, 2371, -1000, -1000,
	1768, -1000, -1000, 23187, 23187, 1535, -1000, 2432, 1856, -1000,
	1856, -1000, -1000, -1000, -1000, -220, -221, -1000, -1000, -1000,
	-1000, 1403, 1403, 1403, 898, 774, 774, -1000, 372, -1000,
	-1000, 23187, -236, 1403, -1000,
}
var sqlPgo = [...]int{

	0, 3056, 3054, 2040, 3053, 3051, 3049, 3048, 3043, 3038,
	3033, 3031, 3030, 3028, 3024, 3022, 3021, 3019, 3018, 3017,
	3016, 3014, 3011, 3010, 3009, 3006, 3005, 3002, 3001, 3000,
	2993, 2992, 2991, 2990, 2989, 2987, 2986, 2985, 2984, 2983,
	2982, 2981, 2979, 2976, 2974, 29, 2973, 2972, 2970, 2968,
	2967, 2962, 2961, 2960, 2959, 2958, 2955, 2951, 2949, 2947,
	2942, 2939, 2934, 2933, 2930, 2929, 2919, 2918, 2916, 2915,
	2914, 2911, 2909, 2908, 2905, 99, 2904, 2901, 2900, 2896,
	2893, 2891, 2889, 2886, 2883, 2881, 2879, 2878, 2876, 2870,
	148, 2867, 2864, 2863, 2861, 2860, 2859, 2857, 2856, 2854,
	2853, 175, 2852, 2851, 2850, 2849, 2847, 2845, 2844, 2843,
	2842, 2841, 2836, 2834, 2831, 2828, 2827, 2824, 2823, 2822,
	2808, 2806, 2800, 2797, 2794, 2792, 2791, 2789, 194, 117,
	2788, 2787, 2786, 2783, 2781, 2777, 85, 81, 23, 2776,
	82, 122, 188, 5138, 169, 2775, 2774, 2773, 2772, 2771,
	58, 114, 119, 107, 127, 120, 2770, 2769, 63, 51,
	30, 19, 89, 2768, 2765, 2764, 1933, 80, 2763, 2762,
	187, 170, 2757, 897, 2756, 126, 71, 101, 84, 59,
	2755, 97, 26, 2754, 144, 28, 2750, 106, 67, 21,
	4332, 77, 197, 62, 110, 168, 149, 158, 157, 124,
	263, 2748, 176, 121, 140, 2747, 2746, 2745, 35, 133,
	6, 8, 123, 18, 2744, 5, 2743, 11, 2742, 2741,
	2740, 2739, 44, 118, 34, 45, 2737, 20, 9, 152,
	2735, 166, 2734, 88, 2733, 181, 142, 139, 56, 161,
	2732, 2731, 2730, 2729, 2728, 87, 14, 90, 2727, 2725,
	100, 167, 2724, 41, 130, 72, 94, 195, 159, 93,
	154, 164, 2723, 2722, 2721, 145, 2720, 2717, 102, 153,
	2715, 2711, 24, 36, 165, 37, 2710, 2707, 112, 2705,
	143, 2701, 2699, 2698, 196, 125, 150, 3, 57, 86,
	10, 162, 104, 69, 68, 2694, 2858, 1175, 1420, 2693,
	103, 78, 32, 74, 109, 185, 33, 2688, 2687, 1013,
	2685, 2684, 2683, 2682, 128, 2681, 2675, 2674, 96, 60,
	70, 2673, 105, 38, 73, 189, 75, 155, 179, 183,
	2672, 132, 2670, 135, 98, 2669, 137, 178, 66, 2662,
	391, 2661, 151, 2657, 2655, 2654, 2653, 52, 2652, 2646,
	272, 2642, 108, 2641, 2640, 136, 163, 173, 25, 2638,
	55, 156, 2635, 138, 27, 2634, 134, 54, 0, 4103,
	3400, 2631, 147, 95, 2630, 2620, 2614, 2613, 31, 12,
	4, 7, 16, 13, 612, 111, 2610, 2609, 76, 91,
	115, 2608, 192, 160, 2606, 2605, 2603, 39, 2601, 17,
	2599, 15, 2598, 2597, 22, 2, 2596, 2595, 174, 2594,
	2593, 2592, 2591, 2360, 2590, 190, 2587, 92, 2583, 113,
	129, 2582, 2579, 2577, 2571, 180, 2570, 184, 2568, 2565,
	2564, 2562, 146, 1, 2192, 2561, 2558, 65, 141, 64,
	2557, 2556, 131,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 415, 415, 18, 28, 19, 29, 13, 417,
	417, 417, 417, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 414, 414, 154, 154, 153, 149,
	149, 418, 418, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 366, 366, 367, 367, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 423, 423, 424, 424,
	425, 425, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 60, 60, 50, 410,
	410, 236, 236, 335, 335, 62, 62, 63, 63, 63,
	63, 63, 63, 64, 64, 64, 64, 64, 64, 64,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	71, 71, 71, 72, 72, 72, 69, 69, 69, 67,
	67, 67, 66, 66, 66, 70, 70, 70, 68, 68,
	68, 237, 237, 73, 73, 73, 73, 73, 73, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 337,
	337, 74, 74, 307, 307, 77, 77, 266, 266, 78,
	78, 78, 78, 78, 79, 79, 79, 79, 89, 89,
	89, 89, 413, 413, 229, 229, 170, 170, 170, 170,
	84, 84, 84, 84, 85, 85, 85, 86, 86, 134,
	134, 95, 95, 95, 95, 95, 94, 94, 94, 94,
	94, 94, 40, 40, 40, 41, 41, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 45, 45, 97, 97,
	419, 419, 99, 96, 96, 96, 98, 98, 98, 98,
	100, 101, 101, 101, 101, 101, 101, 102, 102, 360,
	360, 244, 244, 358, 358, 359, 359, 206, 206, 206,
	206, 206, 207, 207, 207, 365, 365, 365, 365, 365,
	365, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 119, 119,
	119, 128, 128, 128, 128, 128, 128, 128, 121, 121,
	121, 112, 112, 104, 104, 104, 104, 108, 108, 108,
	108, 108, 105, 105, 109, 109, 111, 111, 113, 113,
	113, 113, 113, 113, 106, 106, 106, 106, 115, 115,
	115, 115, 114, 114, 124, 124, 124, 124, 124, 124,
	321, 321, 120, 120, 120, 120, 123, 123, 123, 123,
	118, 118, 118, 122, 122, 125, 125, 125, 125, 107,
	107, 107, 428, 428, 428, 126, 126, 117, 117, 127,
	127, 127, 127, 127, 127, 127, 116, 116, 116, 416,
	416, 110, 411, 411, 408, 408, 408, 408, 408, 408,
	408, 409, 409, 412, 412, 82, 82, 82, 55, 55,
	56, 56, 427, 427, 427, 427, 427, 427, 427, 427,
	208, 208, 209, 209, 289, 289, 289, 289, 210, 210,
	156, 156, 156, 213, 214, 214, 211, 211, 212, 212,
	212, 216, 216, 215, 218, 218, 217, 288, 376, 376,
	377, 377, 377, 377, 377, 377, 377, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 374, 374, 374,
	375, 372, 372, 373, 373, 373, 373, 429, 429, 287,
	287, 222, 222, 379, 379, 379, 379, 380, 380, 380,
	380, 380, 383, 382, 381, 381, 381, 381, 381, 317,
	317, 317, 59, 59, 59, 255, 255, 254, 254, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 131, 131, 57, 57, 57, 162, 162,
	54, 54, 54, 431, 431, 58, 58, 58, 432, 432,
	61, 61, 61, 61, 61, 61, 53, 53, 53, 53,
	53, 433, 433, 272, 272, 271, 271, 227, 227, 323,
	174, 174, 150, 150, 150, 21, 23, 23, 16, 16,
	16, 16, 16, 16, 31, 31, 32, 32, 27, 27,
	420, 420, 421, 421, 83, 83, 87, 87, 87, 93,
	93, 130, 130, 130, 130, 130, 130, 130, 35, 35,
	35, 35, 47, 47, 47, 47, 91, 435, 435, 435,
	92, 92, 434, 434, 169, 169, 169, 169, 171, 171,
	284, 284, 285, 285, 436, 436, 286, 286, 286, 164,
	163, 165, 165, 52, 52, 52, 158, 158, 159, 159,
	160, 160, 161, 161, 437, 437, 80, 80, 80, 133,
	133, 202, 202, 280, 280, 280, 223, 223, 179, 179,
	283, 283, 281, 281, 281, 253, 253, 253, 132, 132,
	232, 232, 246, 246, 247, 247, 332, 332, 248, 90,
	90, 143, 143, 141, 141, 141, 141, 141, 141, 438,
	438, 142, 142, 142, 144, 144, 144, 144, 144, 144,
	144, 147, 147, 147, 147, 148, 148, 148, 146, 146,
	390, 390, 390, 392, 392, 393, 389, 389, 391, 391,
	430, 430, 257, 257, 257, 220, 221, 219, 219, 439,
	439, 225, 225, 224, 226, 226, 322, 322, 322, 251,
	251, 251, 251, 275, 275, 273, 273, 274, 274, 276,
	276, 277, 277, 277, 278, 278, 279, 279, 250, 250,
	303, 303, 145, 145, 145, 231, 231, 231, 233, 233,
	294, 294, 294, 295, 295, 293, 293, 293, 293, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 325, 325,
	234, 234, 326, 282, 282, 406, 406, 406, 407, 407,
	320, 320, 327, 327, 327, 327, 327, 327, 318, 318,
	319, 319, 333, 334, 334, 260, 260, 260, 260, 258,
	258, 259, 259, 328, 328, 328, 328, 252, 252, 329,
	329, 329, 330, 290, 290, 338, 338, 338, 338, 352,
	230, 230, 230, 440, 440, 339, 339, 339, 339, 339,
	339, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 342, 342, 342, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 351, 351, 351, 351, 351, 343,
	343, 348, 348, 349, 349, 349, 344, 345, 350, 350,
	350, 350, 441, 441, 354, 354, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 347, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 267,
	267, 268, 268, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	298, 298, 298, 298, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 384,
	384, 384, 384, 384, 384, 384, 384, 387, 387, 388,
	388, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	394, 394, 395, 395, 397, 397, 398, 398, 399, 400,
	400, 400, 401, 402, 402, 396, 396, 403, 403, 403,
	403, 404, 404, 405, 405, 405, 405, 405, 309, 309,
	310, 310, 316, 316, 316, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 172, 172, 172, 172, 172, 242, 242, 240, 240,
	240, 243, 243, 241, 241, 239, 239, 238, 238, 306,
	306, 304, 304, 308, 308, 261, 261, 353, 353, 353,
	353, 353, 353, 353, 262, 262, 262, 270, 263, 263,
	264, 264, 264, 264, 264, 300, 301, 265, 265, 265,
	302, 302, 311, 315, 315, 314, 313, 313, 312, 312,
	291, 291, 292, 292, 249, 249, 442, 442, 245, 245,
	331, 331, 331, 331, 204, 204, 235, 235, 203, 203,
	197, 197, 198, 198, 198, 198, 228, 228, 355, 355,
	355, 356, 357, 305, 189, 188, 176, 177, 187, 186,
	185, 175, 178, 182, 183, 184, 180, 181, 193, 192,
	191, 190, 336, 199, 199, 200, 200, 200, 201, 201,
	201, 201, 173, 173, 194, 194, 195, 196, 196, 166,
	166, 166, 167, 167, 168, 168, 364, 364, 362, 362,
	362, 363, 363, 363, 363, 361, 361, 361, 361, 361,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 2, 0, 1, 0,
	1, 0, 3, 3, 3, 3, 3, 6, 4, 4,
	4, 3, 5, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 1, 1, 2, 1, 2, 7, 3, 6, 1,
	2, 1, 3, 2, 0, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	3, 5, 2, 3, 0, 3, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 4, 7, 2, 6, 4,
	7, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 5, 4, 6, 4, 3,
	0, 1, 3, 2, 4, 2, 4, 1, 6, 3,
	1, 1, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 1, 3, 2, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 3, 4, 4, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 3,
	4, 3, 1, 1, 1, 2, 3, 2, 3, 6,
	6, 7, 9, 6, 3, 4, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 9, 12,
	7, 10, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 4, 7, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 5, 8, 4, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 1, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 1, 1, 8, 7, 5, 0, 1,
	6, 7, 6, 5, 3, 4, 14, 17, 14, 17,
	4, 0, 2, 2, 0, 1, 0, 1, 3, 2,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 1, 3, 1, 3,
	8, 5, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 2, 3, 4, 3, 4, 5, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 3, 4, 1, 5, 3, 4, 5, 1, 5,
	1, 3, 2, 0, 3, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 1, 1,
	3, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 1, 5,
	5, 3, 1, 1, 1, 2, 2, 2, 4, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 8, 6, 4, 6, 6, 6,
	4, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 1, 2,
	3, 2, 3, 2, 3, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 1, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 2,
	2, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 442, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 119, 102, 106, 125, 151, 273, 302, 312, 296,
	-98, -99, 331, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -422,
	82, -391, -65, -68, -70, -426, 111, 124, 161, 266,
	-85, -86, 298, 300, -42, -41, 120, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 334, 380, 39, 343,
	68, 114, 306, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -390,
	-66, -67, -69, -71, -72, 297, -144, -142, 439, 392,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	410, 418, -147, -145, -146, -148, 319, 400, 357, 443,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, -190,
	-194, -195, -196, -166, 4, -368, -370, 21, 22, 23,
	24, 25, 27, 37, 38, 39, 42, 44, 45, 48,
	49, 50, 51, 52, 53, 56, 61, 66, 67, 68,
	69, 70, 75, 72, 73, 74, 77, 79, 80, 81,
	84, 85, 93, 94, 95, 96, 97, 98, 102, 104,
	106, 109, 110, 111, 113, 115, 116, 119, 120, 123,
	121, 363, 365, 122, 124, 125, 126, 136, 137, 138,
	140, 141, 143, 145, 149, 150, 152, 156, 158, 159,
	160, 161, 162, 163, 175, 170, 176, 180, 183, 182,
	184, 185, 186, 177, 191, 194, 195, 196, 198, 199,
	202, 203, 204, 205, 208, 207, 210, 213, 214, 217,
	218, 221, 223, 224, 227, 228, 231, 229, 230, 233,
	234, 236, 235, 243, 244, 246, 247, 261, 250, 251,
	254, 257, 260, 262, 263, 264, 265, 266, 267, 269,
	271, 273, 275, 277, 278, 279, 280, 281, 282, 284,
	285, 287, 288, 289, 290, 291, 296, 293, 294, 295,
	297, 298, 299, 300, 302, 304, 305, 306, 307, 309,
	311, 332, 333, 345, 312, 313, 314, 315, 316, 317,
	318, 322, 326, 323, 324, 325, 327, 320, 321, 328,
	329, 331, 334, 336, 338, 339, 342, 343, 344, 346,
	349, 350, 351, 347, 348, 341, 356, 354, 355, 358,
	359, 360, 361, 362, 364, 366, 371, 374, 375, 377,
	380, 381, 382, 384, 385, 388, 389, 390, 391, 396,
	392, 394, 397, 398, 399, 405, 404, 411, 412, 414,
	415, 416, 32, 40, 41, 43, 46, 57, 58, 59,
	62, 99, 100, 118, 127, 128, 139, 153, 155, 164,
	165, 166, 181, 187, 189, 169, 211, 241, 242, 255,
	259, 270, 272, 283, 308, 337, 352, 368, 369, 370,
	376, 378, 400, 401, 402, 406, 413, 248, -184, 2,
	-166, -166, 273, 26, 2, 26, 269, 321, 359, 361,
	2, 190, 2, -413, -229, 2, 26, -170, -166, 82,
	151, 319, -184, 2, -413, -229, 24, 2, -166, 2,
	-171, 2, 312, -166, 442, 77, 218, 61, 308, 328,
	-101, 375, -100, 368, 314, -102, -360, 2, 231, -166,
	442, 442, 442, 442, 2, 357, 264, 404, 320, 393,
	95, 280, 174, -408, 2, 4, -370, -368, -198, -197,
	357, 95, -196, -166, 432, -195, 442, 442, 442, 2,
	195, 196, 279, 278, 328, 329, 442, 442, 442, 2,
	25, 55, 76, 79, 101, 126, 146, 149, 252, -423,
	224, 261, 277, 327, 356, 366, 377, -427, 344, 56,
	393, -431, 382, 109, -271, 95, 361, 359, 218, 150,
	389, 304, 154, 387, 104, 180, 391, 390, 442, 442,
	25, 55, 64, 79, 109, 126, 146, 149, -425, 261,
	277, 311, 327, 356, 366, 382, 377, 2, 404, 320,
	357, 174, 95, 393, 304, 276, -75, 2, 439, 29,
	331, -140, 357, 2, -166, 195, 196, 2, 442, 442,
	-408, 2, 195, 196, 2, 316, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 2, -128, 328, 344, 159, 38, 61, 26, 66,
	96, 152, 174, 175, 203, 76, 77, 278, 218, 196,
	-321, 329, 358, 315, 354, 375, 82, 394, 305, 416,
	-416, 121, 4, 95, 231, 330, 368, 70, 362, 363,
	-430, 2, 357, -434, 2, 375, 375, 2, -434, 2,
	-434, 2, -169, 2, 375, 372, -435, 375, 413, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, -142, -144, -143, 442, 442, 442, 442, 442, -128,
	328, 2, 61, 26, -438, 144, -224, -225, 386, 188,
	117, 253, -141, -143, 2, -390, -358, 2, -296, 248,
	-298, 430, 431, 425, 237, 417, -309, 101, 226, 225,
	387, -299, -311, 118, 308, -243, 8, 9, 5, 6,
	7, -173, -340, -305, -347, 379, 129, 240, -201, 445,
	10, 439, -387, -143, -310, 33, 155, 54, -362, -200,
	-341, -349, -345, -346, -440, 44, 50, 49, 366, 230,
	322, 323, 338, 324, 325, 42, 396, 170, 246, 247,
	182, 4, 189, -199, -166, -384, -385, -368, -369, 181,
	187, 183, 337, 184, 185, 186, 41, 283, 140, 141,
	139, 110, 100, 99, 242, 46, 45, 43, 401, -350,
	97, 368, 369, 370, 371, 198, 199, 64, 87, 88,
	86, 91, 90, 92, 89, 330, 393, 55, 32, 164,
	165, 169, 241, 166, 62, -386, 348, 83, 130, 148,
	179, 167, 192, 193, 197, 212, 215, 232, 239, 256,
	258, 303, 335, -441, 402, 57, 58, 127, 128, 153,
	211, 259, 270, 352, 376, 378, -392, 284, -393, -184,
	-392, 442, 442, 444, 442, -219, -220, -221, 2, 26,
	107, 439, 2, -324, 2, 437, -328, -143, 206, -327,
	439, -325, -190, 249, -388, 309, -384, -385, -173, -166,
	-200, 4, 226, 225, -3, -222, 439, 441, 357, 65,
	2, -266, 439, -166, 26, -140, 248, 372, 444, -307,
	439, 248, 147, 250, -166, 2, 2, 332, 2, 439,
	-101, 59, 375, -285, 2, -286, -163, -164, -165, 194,
	275, 282, 416, -358, -419, 147, 422, 372, -358, -244,
	441, 2, -328, 164, -190, 2, -188, -361, 4, -368,
	-370, -369, -371, 64, 26, 28, 29, 30, 31, 33,
	34, 35, 36, 47, 54, 55, 60, 63, 65, 76,
	82, 86, 87, 89, 88, 90, 91, 92, 101, 103,
	105, 107, 108, 112, 114, 117, 129, 131, 144, 146,
	147, 151, 154, 157, 168, 174, 178, 188, 190, 206,
	209, 216, 219, 220, 237, 238, 240, 245, 248, 249,
	252, 253, 268, 274, 286, 301, 319, 330, 340, 353,
	357, 367, 372, 373, 379, 386, 387, 393, 395, 403,
	407, 408, 409, 410, 2, -328, 164, 2, -191, 164,
	-328, -194, 2, -366, 164, -364, 10, -363, 5, 4,
	-368, -370, -369, 2, -175, -166, 2, -187, -361, 2,
	-203, 164, -190, 372, 444, -235, -197, -198, -228, -166,
	441, -296, 2, -90, 2, -296, 164, 2, -90, 164,
	2, -296, 164, 2, -90, 164, 2, 2, 2, 377,
	2, 79, 164, -166, 357, 94, 2, 295, -424, 311,
	381, 404, 2, 2, 2, 2, 2, 2, 357, 320,
	-432, 284, -180, 2, -166, 144, -366, 164, 2, -366,
	164, 2, -192, -194, -192, 174, 191, -175, 164, 2,
	361, 359, 361, 359, 147, 2, 190, 2, 190, 2,
	-329, 2, -330, -190, 2, 2, 2, 2, 2, 164,
	-166, 357, 94, 2, 205, 2, 2, 2, 2, 2,
	2, 2, 2, -237, 164, 2, -190, -237, 164, 2,
	-237, 164, 2, -204, 164, 2, -203, -175, 164, 2,
	-367, 164, 2, -366, -367, 164, 2, -337, 2, -336,
	-363, 400, -75, 439, 328, 439, -366, -190, -296, -90,
	147, -296, -90, 2, 95, 357, -128, 2, 144, 395,
	2, 8, 2, -366, 281, 136, 2, 332, 2, 278,
	329, 61, 416, 147, 2, 2, -411, 2, 248, 147,
	2, 147, 2, 147, 2, 147, 2, 147, 2, 2,
	278, 329, 2, 374, 204, 122, 2, 147, 2, 147,
	2, 5, 2, 194, 275, 345, 2, -190, -428, 2,
	357, 404, 320, 2, 2, 72, 73, 147, 2, 147,
	416, 2, -252, -328, -284, -285, -284, 372, -171, -438,
	-224, -225, -128, 332, 2, 2, -438, -251, -273, -274,
	216, 131, 245, -257, 26, 107, -257, -257, 48, 440,
	440, 11, 12, 63, 37, 430, 431, 432, 433, 142,
	434, 435, 428, 429, 427, 420, 421, 424, 200, 201,
	78, 423, 422, 71, 222, 310, 132, 133, 134, 135,
	292, 171, 172, 173, 14, 15, 16, 30, 252, 215,
	417, 167, 335, 425, 17, 18, 19, 192, 193, 239,
	40, 168, -172, -205, -296, -296, -296, -296, -296, 258,
	439, -249, -291, 437, -143, 439, 439, 439, 5, 439,
	5, -357, 8, -143, -296, -309, 440, -241, 439, -143,
	-309, -304, 439, 308, 437, 439, -312, -296, 441, -394,
	411, -343, 439, 272, -342, 439, -342, -342, 405, 412,
	418, 412, 418, 144, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 405, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 444, -392, -222,
	439, -245, -331, -296, 432, -245, -245, 248, -238, -296,
	83, -260, 197, 232, 148, 212, 303, 179, -357, -75,
	-293, 445, -320, 418, -143, -325, -166, -143, -327, 439,
	-324, -320, 432, -190, 439, 147, 439, 441, 147, -228,
	-361, -190, -199, -166, -200, -238, -366, -408, -228, -170,
	34, -306, -338, -339, -351, -340, -348, -344, -347, 288,
	289, 287, 291, 290, 44, 50, 49, 366, 230, 322,
	323, 338, 324, 325, 42, 396, 170, 246, 247, 182,
	4, 43, 401, -350, 189, 181, 187, 183, 337, 184,
	185, 186, 41, 283, 140, 141, 139, 110, 100, 99,
	242, 46, 45, 97, 368, 369, 370, 371, 198, 199,
	402, 348, 57, 58, -408, -228, 144, -360, -238, 34,
	-285, 2, -436, 444, 214, -207, 221, 236, 158, 249,
	414, -365, 5, 4, -305, -317, 101, 218, -347, 9,
	431, -355, 8, 430, -359, -358, 85, 441, -361, -152,
	293, -151, 23, 27, 111, 398, 123, -212, 176, 264,
	118, 341, -415, -417, 313, 364, 365, 74, 243, 293,
	118, -254, -256, 34, 93, 234, 260, 51, 162, 225,
	226, 343, 406, 118, 293, 410, 118, -417, 293, -417,
	-154, 341, -415, -417, 313, 293, -153, -212, 118, 445,
	-366, -235, 444, 444, -361, 432, 118, 118, 118, 118,
	2, 2, 237, 2, 2, 2, 149, -427, -425, 2,
	2, 2, -190, 164, -191, 164, 2, -194, 404, 248,
	-410, -236, 357, -190, -162, -389, 410, 237, 237, 34,
	439, 2, -177, 164, 2, -167, -166, 174, -389, 237,
	-329, -202, -190, -202, 331, -184, 34, -293, 118, 2,
	2, 2, -166, -155, 444, 53, 299, 118, -155, 118,
	-155, 118, -155, 444, 118, -155, 118, 444, 118, 118,
	440, 444, -337, -366, -138, 410, 147, 82, 439, -367,
	-175, 2, -190, 2, 357, 198, -366, -366, -360, 26,
	333, 2, 73, -190, -412, 144, -409, 304, -408, -190,
	-190, -190, -190, -190, 144, 2, 374, 2, 374, 2,
	-166, -166, 214, -190, 144, 357, 174, 357, -155, 444,
	-171, -438, -251, -360, -438, -274, -273, -276, -296, 26,
	-279, 138, 233, -296, -298, -142, -142, -142, -226, -322,
	-296, 274, 174, -352, -338, -338, -189, -361, 368, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, 215, 167, 335, 40, 168, -296,
	372, -296, -296, -296, -296, 229, 237, 240, 379, 129,
	388, 107, 243, -442, 353, 36, -302, -143, -242, 439,
	-316, 31, 340, 26, -309, 439, 2, -291, -296, -292,
	-239, -238, -238, 440, 403, 26, 107, 432, 2, 8,
	-267, -269, 415, 228, 98, 160, 227, -268, 318, 440,
	444, 34, 440, -296, -239, -308, -304, -238, -315, -314,
	407, -361, 432, -395, 137, 154, 8, -357, 368, 368,
	368, 368, 439, 440, 2, 440, 2, 440, 2, 440,
	2, 440, 2, -296, -296, -296, -296, -296, -296, -296,
	-238, -261, 2, -353, -238, 4, 415, 228, 98, 160,
	227, 318, -261, 2, -238, 2, -238, 2, -262, 2,
	-296, -238, -263, -297, -298, 430, 431, 425, -309, -264,
	2, -296, -239, -296, 47, 209, 373, -265, -296, 147,
	-238, -393, 34, -238, -231, 444, 147, 34, 4, -231,
	-231, 439, 440, 444, 197, 197, -324, -260, 197, -258,
	256, -258, -258, -406, 439, 438, -320, -176, 437, 446,
	-361, -319, -318, 34, -184, 254, -320, -320, 441, 440,
	-319, -190, 439, -238, -361, 346, 440, 441, 192, 192,
	440, -138, 372, 410, -75, 440, 444, -230, 33, 437,
	-269, 439, -354, 405, 439, 439, 147, -229, -419, 440,
	375, -286, -206, 282, 339, 294, 326, 9, 8, 8,
	444, -361, 444, 372, -420, 76, 65, -288, 164, 65,
	-372, -178, 76, -373, -166, 60, 387, 274, 146, -420,
	76, -420, 76, 76, 331, 344, 48, -328, 37, -90,
	210, 147, 416, 357, 372, -328, -256, -338, 93, 225,
	226, 48, -356, -355, 431, -356, 48, -356, -356, -356,
	410, -191, -328, 372, 265, -366, 372, 444, 37, -90,
	210, 147, 372, -203, -176, -334, -333, 419, -197, -166,
	441, -296, -90, -296, -90, 118, 2, -432, 205, 439,
	-222, 237, -255, -254, 237, -193, 2, -190, -228, -335,
	190, 444, -236, 265, 118, 118, 439, 115, 280, 2,
	248, 237, -177, 164, -158, 360, 118, -290, 408, -280,
	-90, 439, 101, 34, -280, -246, -247, -332, -248, -178,
	439, -184, -166, 2, -190, -237, -237, -237, -203, -204,
	-175, -366, -367, -367, -75, -336, 440, 440, -137, 251,
	-136, -166, 5, -140, 395, -209, -289, -288, -374, -375,
	-372, 174, 387, 191, 130, -138, -333, -334, -334, -190,
	144, -228, -228, 328, 144, 144, 441, 280, 95, 357,
	264, 174, -190, -203, -190, -328, -438, -277, -355, 439,
	-278, 308, 309, 444, -150, 35, 105, 202, -190, 416,
	116, -296, -296, 372, -442, 353, -302, 116, -296, 229,
	240, 379, 129, 388, 107, 243, 147, 439, -297, -297,
	440, -240, -296, -296, 438, 448, 440, -439, 444, -224,
	-296, -238, -238, 440, 440, 372, 372, 372, 372, 439,
	441, -238, -228, 438, 438, 444, 440, -313, -314, 112,
	-296, 441, -400, 257, 439, 439, 440, 440, 444, 416,
	416, 416, 416, -296, 34, 444, 444, 444, 440, 444,
	444, 444, 440, 440, 147, 440, 440, 440, 440, -270,
	268, 440, 11, 12, 430, 431, 432, 433, 142, 434,
	435, 428, 429, 427, 420, 421, 422, 71, 222, 310,
	14, 15, 16, 192, 168, -297, -297, -297, 440, -300,
	-301, 147, 144, 34, -265, -265, -265, 440, 147, -238,
	439, 440, -290, -331, -233, 2, -324, -186, -361, -290,
	-290, -238, -296, -324, -324, -259, 395, 248, 197, -324,
	-318, 440, -407, -357, -320, -319, -357, -295, -294, 145,
	235, -184, -222, -319, -319, -361, -320, 440, -234, -326,
	-388, -439, 441, -361, -129, 5, 240, -129, 147, -228,
	24, -338, 437, 438, 8, 8, 439, -357, -357, -228,
	147, -358, -285, 385, 69, 282, -358, -151, -190, -178,
	-185, -166, 237, -288, 164, -157, 237, -338, -185, 439,
	439, 202, 202, -178, -185, 164, -178, 164, -185, -185,
	-414, 282, 244, -296, 217, 280, 238, -152, 293, -90,
	-90, 439, -419, 395, 106, -190, -193, 293, -199, -356,
	-356, -254, 293, -191, -366, 410, -175, -153, -90, -90,
	439, -176, -154, 293, -135, 163, 243, 432, -166, 404,
	-166, -208, -209, -166, 34, 118, 118, -222, 147, -138,
	-366, -190, -366, -366, -366, 2, 439, 2, -190, 118,
	248, 237, -159, 113, -437, 422, -175, -225, -224, -296,
	-253, -283, 301, 248, -223, -179, -178, 400, -184, -253,
	-232, 444, 147, 422, 441, -223, 2, -155, -155, -155,
	-155, -155, -75, -138, 444, 439, 422, 422, 439, -366,
	-366, 440, 444, -177, 174, 174, -183, -167, -138, -43,
	410, 357, 328, 328, -166, -187, -175, -190, -188, -203,
	-278, -296, -322, -190, 445, -296, -296, 116, 116, -296,
	-297, -297, -296, 116, 147, 439, -296, -306, 30, 30,
	440, 444, -292, -296, 440, 403, -439, -439, -439, 5,
	228, 160, 227, -268, 227, -268, -268, 8, 432, -361,
	440, -304, 114, -296, 367, -361, 432, -401, -181, 439,
	-166, 408, -224, -357, 440, -352, -338, -296, -296, -296,
	-296, -296, -296, -300, -296, -352, -338, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, 107, 237, 243, -297,
	-301, -300, -296, -296, -338, 440, 440, 440, -238, -75,
	-250, 154, -334, 444, -250, -250, 440, -259, 439, -296,
	-324, 438, 440, 444, -319, 438, 444, 447, 422, -222,
	441, -318, 440, 444, -282, 34, 440, -361, -90, 250,
	8, 438, 440, -357, 440, 440, -228, 372, 372, 118,
	237, 397, -376, -373, -296, -227, -323, -296, 439, 439,
	-149, 111, 331, -421, 2, 118, -155, 118, -155, 414,
	439, 439, 372, -420, 76, -238, -296, -139, 101, -360,
	-417, 372, 372, 265, -238, 372, -138, 147, 355, 2,
	2, 2, 440, -90, -190, -191, 34, -190, -162, 2,
	-272, 395, -176, -190, 118, -160, 208, -437, -364, -389,
	-275, -273, -253, -245, 238, 75, 440, 444, 441, -290,
	-247, -233, -296, 2, 440, -136, -137, -366, -366, -366,
	-138, -140, -140, -289, 439, -177, -167, 439, 251, -190,
	-214, -213, 264, 243, 249, 440, -150, -176, -296, -296,
	116, 30, 30, -296, -296, -306, 440, -296, -296, -238,
	438, 5, -296, 440, 440, 440, 440, -296, 441, -402,
	-166, -296, 440, 440, 440, 440, 444, 444, 440, 440,
	440, 440, -301, 147, 107, 243, 439, 440, 440, -303,
	157, 48, -324, -303, -303, -228, -293, -357, -294, -176,
	437, -361, -326, 439, 441, 438, 440, -178, -185, -288,
	118, -377, 76, -378, 63, 130, 82, 237, 240, 387,
	274, 60, 101, 286, 34, 440, 440, 444, -150, -227,
	-228, 237, 350, 101, 237, 101, 94, 382, -178, -185,
	-228, -228, -190, -178, -185, 440, 444, 422, -193, -191,
	-366, 440, -176, -367, 368, -210, 177, 439, -222, -255,
	-90, 439, -166, 248, 439, -176, -161, 207, -437, -364,
	-158, -253, -281, 439, 248, -90, -179, 2, -225, 422,
	440, 440, 94, 94, -227, 439, 439, -228, -44, -45,
	174, 76, 267, -188, 357, -150, -296, -296, -296, 440,
	-439, -361, 432, -396, 264, 440, -296, -296, -297, 147,
	439, -306, -397, 409, -296, -238, -397, -397, 440, -320,
	-357, 2, -288, -185, -189, -182, -166, 130, 164, 240,
	202, 439, -297, -190, 439, 2, -287, -429, 81, 351,
	-323, 440, 440, 240, 240, -296, -338, -155, -155, 440,
	440, 372, 372, 372, -360, -358, 372, -296, -211, -212,
	168, -208, 34, -227, -190, -227, 248, -437, -364, -159,
	108, -228, 76, -275, -302, -138, 439, 439, 440, -227,
	-227, 440, 444, 26, 439, 26, 439, -190, 440, -225,
	48, 440, 440, -297, -306, 440, -398, -399, -181, -319,
	438, -378, -182, 237, -296, -168, 439, -296, -210, 439,
	286, -174, 63, 439, 439, -178, -185, 439, 422, 439,
	262, 440, -90, 440, -272, 440, -190, -364, -160, 390,
	238, 440, -185, -253, -367, -367, -287, 440, 440, -45,
	-228, -228, -403, 280, 309, 156, -238, 440, 444, 34,
	118, 440, -379, 223, -166, 440, -211, -228, -190, -418,
	395, -189, -216, -215, -213, -218, -217, -213, -238, -358,
	-238, -190, -210, -287, 439, -287, 439, -161, 331, -290,
	440, 440, -210, -287, 440, 440, 440, -404, -405, 40,
	384, 85, -296, -404, -404, -399, -401, 130, -380, -383,
	-382, 248, 148, 263, 336, 440, 350, 406, 440, -222,
	-296, 440, 444, 400, 440, 444, 400, 440, 440, 439,
	-211, -210, -227, -210, -227, -246, -138, -138, -211, -210,
	-405, 271, 143, 308, 271, 143, -182, -382, 248, -383,
	248, 390, 104, -379, -215, 168, -217, 147, -228, -211,
	440, -211, 440, -290, -211, 30, -381, 234, 299, 53,
	331, -381, -380, 439, 439, 440, -433, 408, -287, -433,
	-287, -405, 22, 240, 101, -238, -238, -156, 53, 299,
	2, -210, -210, 440, 440, -211, -211, -211, 372, -433,
	-433, 439, -238, 440, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 329,
	330, 332, 333, 334, 336, 337, 338, 340, 342, 344,
	345, 347, 349, 350, 351, 352, 353, 355, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	401, 403, 0, 811, 813, 815, 817, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 283, 284, 286, 288, -2, -2, 0, 0,
	390, 392, 0, 0, 412, 413, 0, 899, -2, 406,
	408, 410, 471, 473, 475, 477, 479, 481, 483, 484,
	486, 488, 490, 492, 494, 496, 498, 500, 502, 504,
	506, 508, 510, 512, 514, 516, -2, -2, -2, 0,
	-2, -2, -2, 829, 33, 35, 37, 39, 41, 43,
	61, 251, 252, 254, 256, 258, 261, 262, 264, 938,
	290, 292, 294, 296, 298, 0, -2, 952, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 914, 916, 918, 920, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 331,
	335, 339, 341, 343, 346, 348, 354, 356, 358, 702,
	1531, 1544, 1545, 1546, 1549, 1550, 1551, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
	1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 0, 368, 366,
	1525, 369, 1704, 371, 373, 277, 278, 279, 280, 281,
	282, 0, 152, 0, 383, 377, 382, 384, 386, 387,
	388, 389, 364, 362, 0, 383, 1573, 381, 809, 810,
	804, 805, 1737, 839, 402, -2, -2, -2, 1837, -2,
	434, -2, 441, 1840, 1739, 444, 0, 446, -2, 449,
	812, 814, 816, 31, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, -2, -2, -2, -2, 0,
	0, 1607, 1502, 1546, 1505, 1500, 170, 172, 174, 175,
	0, 0, 0, 0, 0, 0, 198, 200, 203, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 229,
	0, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 0, 0, 0, 0, 632, 633, 0, 0,
	638, 753, 754, 775, 0, 0, 0, 0, 285, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 230, 323, 324, 0, 939,
	0, 0, 0, 150, 143, 0, 0, 627, 391, 393,
	0, 142, 0, 0, 808, 0, 407, 409, 411, 472,
	474, 476, 478, 480, 482, 485, 487, 489, 491, 493,
	495, 497, 499, 501, 503, 505, 507, 509, 511, 513,
	515, 517, 518, 0, 0, 0, 0, 0, 522, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 521, 523, 524, 525, 0, 570, 609, 610,
	0, 744, 940, 841, 819, 832, 841, 821, 822, 823,
	824, 825, 830, 831, 834, 0, 826, 827, 828, 34,
	36, 38, 40, 42, 44, 253, 255, 257, 259, 263,
	265, -2, 912, 913, 291, 293, 295, 297, 299, 394,
	0, 396, 0, 522, 903, 0, -2, 0, 944, 944,
	944, 0, 0, 913, 911, 0, 399, 400, 453, 454,
	1163, 0, 0, 0, 0, 0, 1400, 1247, -2, -2,
	0, 1280, 1282, 1816, 1837, 1399, 1284, 1285, 1286, 1287,
	1288, 0, 0, 1291, 0, 1293, 1294, 1295, 1296, 0,
	1298, 0, 1302, 1303, 1304, 0, 1821, 1479, 1542, -2,
	1071, 1072, 1073, 1074, 1075, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1538, 1533, 1371, 1318, -2, 1560, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1615, -2, -2, -2, -2, -2, -2, -2, 1127,
	-2, -2, -2, -2, -2, -2, -2, 1850, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 0, 1805, 1822,
	1823, 1828, 1830, 1824, 1813, 1341, -2, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1863, 1864, 1865,
	1866, 1867, 1868, 1128, -2, -2, -2, 1817, 1818, 1820,
	1829, 1833, 1834, 1839, 1843, 1844, 930, 1712, 933, 702,
	931, 915, 917, 0, 919, 0, 0, 0, 924, 947,
	945, 0, 983, 928, 929, 939, 998, 1021, 0, 1003,
	0, 1021, 1043, 0, 1008, 1732, 1319, 1320, 0, 1546,
	1543, -2, 1861, 1862, 2, 0, 0, 0, 0, 0,
	194, 365, 0, 370, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838, 404, 405, 0, 429, 0,
	433, 1812, -2, -2, 437, 842, 846, 847, 848, 0,
	0, 0, 0, 443, 0, 0, 430, 431, 447, 450,
	0, 52, 0, 1822, 1043, 53, 0, 1515, 1565, 1566,
	1567, 1568, 1569, 1850, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 55, 0, 1822, 58, 0, 1822,
	0, -2, 62, 0, 1822, 153, 154, 1556, 1557, 1561,
	1562, 1563, 1564, 65, 0, 1521, 67, 0, 1518, 75,
	0, 1822, 1499, 0, 0, 619, 1496, 1501, 620, 1506,
	0, 176, 177, 178, 179, 180, 1822, 182, 183, 0,
	185, 186, 1822, 188, 189, 0, 191, 206, 207, 0,
	209, 0, 1822, 0, 0, 0, 215, -2, 231, 0,
	228, 0, 219, 220, 222, 223, 224, 225, 0, 0,
	0, 759, 0, 267, 1526, 0, -2, 1822, 747, 750,
	1822, 752, 764, 1529, 0, -2, 0, 937, 1822, 855,
	634, 635, 636, 637, 0, 276, 0, 868, 0, 870,
	0, 889, 1049, 998, 232, 233, 234, 235, 236, 1822,
	0, 0, 0, 241, 0, 243, 244, 245, 246, 247,
	248, 249, 250, 135, 1822, 302, 321, 135, 1822, 305,
	135, 1822, 308, 135, 1822, 311, 1494, 135, 1822, 314,
	315, 1822, 317, 155, 318, 1822, 320, 0, -2, 359,
	1532, -2, 326, 0, -2, 0, 167, 0, 625, 626,
	0, 806, 807, 414, 0, 0, 519, 520, 0, 0,
	530, 531, 532, 533, 1710, 1630, 536, 0, 539, 560,
	574, 0, 0, 0, 543, 545, 624, 547, 0, 0,
	549, 0, 551, 0, 553, 0, 555, 0, 557, 559,
	561, 575, 563, 0, 0, 0, 573, 0, 579, 0,
	582, 583, 584, 0, 586, 587, 588, 589, 0, 591,
	592, -2, -2, 596, 598, 0, 604, 0, 608, 0,
	526, 527, 135, 1047, 818, -2, 820, 0, 836, 906,
	-2, 0, 395, 0, 398, 910, 904, 909, 961, 962,
	0, 0, 0, 0, 942, 943, 0, 0, 0, 901,
	902, 0, 0, 0, 0, 1405, 1406, 1407, 1408, 1409,
	1410, 1413, 1414, 1411, 1412, 1415, 1416, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1418, 1419, 1420, 0, 0, 1422,
	0, 1424, 0, 0, 0, 0, 0, 0, 1226, 1228,
	1487, 0, 0, 1421, 1168, 1169, 1170, 1205, 1206, 0,
	0, 1281, 1484, 1483, 1283, 0, 1436, 0, 1290, 0,
	1160, 1297, 1512, -2, 0, 1400, 1431, 0, 0, 1305,
	1306, 1307, 0, 0, 1436, 0, 0, 1478, 0, 1373,
	0, 1107, 0, 1108, 1109, 0, 1110, 1111, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1129, 0, 0,
	0, 0, 0, 1459, -2, 0, 0, 0, 932, 0,
	0, 987, 1488, 1492, 1493, 987, 987, 0, 0, 1437,
	0, 0, 0, 0, 1040, 1040, 1040, 1038, 1015, 0,
	1021, 0, 1031, 0, 1021, 1021, 0, -2, 1003, 0,
	0, 1031, 1044, 1045, 0, 0, 0, 0, 0, 0,
	1547, 0, 0, 1533, 1534, 0, 167, 0, 375, 385,
	939, 0, 1439, 1062, 1058, 1065, 1066, 1067, 1068, 1114,
	1115, 1116, 1117, 1118, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, -2, 1125, 1127, 1145, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1120, 0, 1095, 1095,
	1095, 1112, 1113, 1136, 1137, 1139, 1141, 1143, 1063, 1064,
	1130, 1131, 1132, 1133, 0, 379, 0, 0, 0, 0,
	-2, 439, 0, 844, 0, 849, 462, 463, 464, 851,
	852, 442, 465, 466, 467, 468, 469, 470, 0, 719,
	0, 721, 1508, 0, 440, 455, 445, 0, 451, 76,
	801, 103, 0, 801, 801, 0, 0, 122, 0, 0,
	0, 0, 0, 94, 99, 82, 83, 0, 0, 0,
	0, 59, 727, 0, 730, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 93, 0, 88,
	78, 0, 0, 96, 101, 0, 126, 128, 0, 0,
	1034, 618, 0, 0, 1547, 1504, 0, 0, 0, 0,
	208, 210, 0, 212, 213, 214, 0, 758, 0, 221,
	218, 260, 702, 1822, 726, 1822, 724, 1530, 0, 0,
	274, 269, 0, 271, 745, 0, 936, 0, 0, 0,
	0, 765, 0, 1822, 770, 1517, 1552, 1553, 857, 0,
	1054, 0, 871, 0, 0, 1050, 0, 1052, 0, 238,
	239, 240, 0, 300, 0, 133, 134, 0, 303, 0,
	306, 0, 309, 0, 0, 312, 0, 0, 0, 0,
	939, 0, 0, 0, 145, 0, 0, 0, 0, 167,
	1034, 416, 1034, 418, 0, 0, 534, 535, 537, 538,
	540, 541, 605, 542, 546, 0, 612, 1728, 622, 548,
	550, 552, 554, 556, 0, 565, 0, 567, 0, 569,
	577, 580, 585, 590, 0, 0, 0, 0, 743, 0,
	835, 907, 909, 397, 905, 959, 960, 965, 969, 970,
	973, 976, 977, 967, 1163, 925, 926, 927, 953, 954,
	784, 0, 0, 1164, 1059, 1165, 1166, 1514, 0, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, -2,
	-2, -2, -2, -2, -2, -2, -2, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, -2, -2,
	-2, 1203, 1204, -2, 1423, 1425, 0, 1487, 0, -2,
	0, -2, -2, -2, -2, 1223, 0, 1225, 1230, 1232,
	1234, 0, 0, 0, 0, 1486, 1244, 1470, 1471, 0,
	0, 1402, 1403, 1404, 1229, 0, 1250, 1485, 1482, 0,
	0, 1435, 950, 1309, 0, 0, 0, 0, 1316, 0,
	1513, 1159, 1146, 1147, 1148, 1149, 1150, 1151, 1161, 1301,
	1433, 0, 1432, 0, 0, 0, 1443, 0, 1477, 1473,
	0, 1535, 1541, 1381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 0, 1446, -2, -2, -2, -2, -2,
	-2, -2, 0, 1355, 0, 1367, 0, 1369, 0, 1357,
	1437, 1456, 0, 0, 1251, 0, 0, 0, 1400, 0,
	1360, 1437, 1464, 0, 0, 0, 0, 0, 1437, 0,
	1469, 934, 0, 0, 1054, 0, 0, 0, 1491, 1054,
	1054, 0, 982, 0, 0, 0, 0, 0, 0, 1035,
	1039, 1036, 1037, 0, 0, 1021, 1031, 995, 0, 0,
	1516, 1001, 1030, 0, 702, 1020, 1031, 1031, 0, -2,
	1005, 0, 0, 950, -2, 168, 701, 0, 0, 0,
	367, 0, 0, 0, 361, 363, 0, 1055, 1057, 0,
	1069, 0, 0, -2, 0, 0, 0, 0, 0, 432,
	0, 843, 850, 0, 459, 0, 461, 720, 1510, 1509,
	0, 452, 0, 0, 0, 0, 800, 105, 1822, 0,
	137, 0, 0, 692, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 728, 729, 731, 737,
	739, 0, 733, 1511, 0, 734, 0, 736, 738, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 1498, 158, 1033, 0, 1497, 1507,
	0, 181, 184, 187, 190, 0, 216, 0, 0, 641,
	0, 0, 722, 725, 0, 702, 757, 1528, 0, 167,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 763,
	0, 0, 0, 1822, 859, 865, 0, 952, 0, 887,
	873, 0, 0, 0, 887, 891, 892, 894, 895, 0,
	0, 1051, 0, 242, 322, 135, 135, 135, 1495, 135,
	135, 156, 316, 319, 325, 360, 939, 167, 165, 1692,
	163, 160, 162, 0, 0, 0, 642, 644, 645, 646,
	647, 1553, 0, 1657, 1553, 140, 167, 415, 420, 528,
	0, 623, 621, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 607, 611, 1048, 908, 0, 971, 0,
	968, 974, 975, 0, 956, 782, 783, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1245, 0, -2, 1224,
	1227, 1231, 1233, 1235, 0, 0, 0, 0, 0, 0,
	1426, 0, 1428, 1246, 1480, 1483, 1398, 0, 0, 949,
	950, 950, 950, 1315, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 1441, 1442, 0, 1308, 0, 1474, 0,
	0, 0, 1317, 0, 0, 0, 1119, 1093, 0, 1138,
	1140, 1142, 1144, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 1340, 1352, 0, 1354, 1366, 1368, 1356, 0,
	0, 1358, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1254, 1255, 1256, 1359, 1462,
	1463, 0, 0, 0, 0, 0, 0, 1365, 0, 1468,
	939, 984, 979, 1489, 1034, 986, 988, 1490, 1519, 979,
	979, 0, 1438, 1023, 0, 1025, 0, 0, 0, 1027,
	0, 1016, 0, 1018, 1031, 1000, 0, 0, 993, 0,
	992, 702, 1029, 1002, 1006, 1535, 0, 1046, 0, 1010,
	1013, 0, 0, 1548, 192, 195, 196, 193, 0, 374,
	0, 1440, 0, 1060, 0, 0, 0, 0, 0, 378,
	0, 428, -2, 457, 458, 460, 456, 104, 788, 0,
	0, 1520, 0, 107, 1822, 116, 0, 669, 0, 0,
	0, 0, 0, 803, 0, 1822, 135, 1822, 135, 118,
	121, 0, 125, 123, 0, 0, 660, 77, 801, 80,
	86, 0, 0, 0, 92, 0, 794, 0, 732, 735,
	741, 60, 0, 796, 786, 0, 785, 127, 81, 87,
	0, 798, 79, 0, 167, 0, 0, 1503, 0, 0,
	0, 0, 640, -2, 0, 0, 0, 0, 0, 268,
	273, 272, 748, -2, 751, 760, 0, 762, 774, 0,
	0, 0, 861, 865, 0, 864, 937, 964, 951, 1053,
	866, 887, 0, 0, 0, 876, 878, 875, 872, 869,
	1054, 0, 0, 0, 0, 0, 237, 301, 304, 307,
	310, 313, 327, 144, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 1553, 1553, 0, 1524, 141, 417,
	0, 0, 566, 568, 576, 599, 600, 655, 0, 603,
	0, 0, 955, 784, 0, 1167, 1208, 0, 0, -2,
	0, 0, 1212, 0, 0, 0, -2, 0, 0, 0,
	1427, 1429, 0, 1482, 1310, 0, 0, 0, 0, 1292,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 0, 1299, 1300,
	1401, 1444, 1472, 1476, 0, 1536, 1540, 1379, 1380, 1384,
	1527, 0, 0, 0, 1321, 0, 0, 0, 0, 0,
	0, 0, 1445, 1455, 1457, 1252, 1253, 1257, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, -2, -2, -2,
	1270, 1271, 1272, -2, -2, -2, 0, 0, 0, 1458,
	1460, 1461, 1465, 1466, 0, 1362, 1363, 1364, 1467, 0,
	981, 0, 985, 0, 981, 981, 946, 1024, 0, 1042,
	1026, 998, 1017, 0, 1007, 996, 0, 997, 0, 1028,
	0, 1004, 1009, 0, 1012, 0, 1310, -2, 151, 376,
	0, 1061, 1070, 0, 1122, 1126, 380, 0, 0, 0,
	0, 136, 667, 691, 0, 0, 777, 784, 0, 0,
	109, 0, 0, 0, 117, 0, 114, 0, 120, 124,
	0, 0, 0, 0, 0, 0, 89, 90, 91, 0,
	95, 0, 0, 0, 0, 0, 138, 0, 0, 211,
	756, 217, 649, 630, 702, 726, 0, 266, 746, 761,
	0, 0, 0, 0, 0, 863, 865, 0, 856, 857,
	887, 963, 867, 885, 886, 884, 0, 0, 0, 952,
	893, 890, 896, 897, 0, 164, 0, 159, 161, 0,
	147, 0, 0, 643, 0, 0, 0, 0, 0, 529,
	601, 654, 0, 0, 966, 972, 957, 784, 1210, 1214,
	0, 0, 0, 1216, -2, 0, 1238, -2, -2, 1430,
	1481, 1289, 950, 1311, 1313, 1314, 1162, 1475, 0, 1386,
	1383, 0, 1370, 1094, 1331, 1332, 0, 0, 1335, 1337,
	1338, 1339, 1454, 0, 0, 0, 0, 1361, 935, 1375,
	0, 0, 989, 1375, 1375, 0, 1021, 1019, 994, 990,
	0, 1536, 1011, 0, 0, 1056, 1121, 790, 792, 106,
	0, 668, 0, 671, 0, 0, 0, 0, 678, 679,
	0, 0, 0, 0, 0, 693, 700, 0, 779, 0,
	0, 0, 111, 130, 0, 0, 802, 0, 135, 135,
	0, 0, 789, 0, 0, 0, 0, 0, 795, 797,
	787, 0, 799, 157, 0, 657, 0, 641, 0, 723,
	755, 0, 773, 0, 0, 0, 853, 865, 0, 858,
	859, 275, 0, 0, 0, 874, 877, 879, 964, 0,
	166, 167, 0, 0, 0, 0, 0, 0, 419, 421,
	0, 0, 427, 653, 0, 958, 1218, -2, -2, 1239,
	0, 1537, 1539, 952, 0, 1372, 0, 0, -2, 0,
	0, 0, 921, 0, 980, 978, 922, 923, 1041, 1031,
	0, 1014, 108, 0, 672, 673, 1523, 675, 0, 677,
	680, 0, 682, 1555, 0, 686, 649, 0, 697, 698,
	778, 695, 0, 110, 112, 129, 781, 113, 119, 0,
	0, 0, 0, 0, 0, 97, 0, 1032, 628, 656,
	0, 0, 0, 0, 774, 0, 0, 0, 860, 861,
	0, 0, 0, 887, 898, 146, 0, 0, 700, 0,
	0, 690, 0, 423, 0, 425, 0, 602, 1312, 1390,
	0, 1333, 1334, -2, 0, 1278, 1374, 1376, 0, 999,
	991, 670, 674, 0, 0, 706, 0, 0, 657, 0,
	0, 132, 0, 0, 0, 791, 793, 0, 0, 0,
	0, 649, 631, 700, 0, 700, 0, 862, 863, 0,
	881, 1054, 883, 888, 0, 0, 649, 700, 689, 422,
	0, 0, 0, 0, 0, 0, 1385, 1279, 0, 0,
	0, 681, 711, 0, 0, 0, 694, 0, 702, 115,
	0, 780, 0, 661, 0, 0, 664, 0, 0, 98,
	0, 0, 657, 649, 0, 649, 0, 854, 0, 882,
	167, 167, 657, 649, 424, 426, 1382, 1387, 1391, -2,
	1786, 1604, 0, 1388, 1389, 1377, 1378, 0, 683, 707,
	708, 0, 703, 704, 705, 1554, 684, 685, 699, 706,
	131, 658, 0, 0, 659, 0, 0, 100, 102, 0,
	629, 657, 0, 657, 0, 1054, 148, 149, 687, 657,
	0, 1393, 1394, 1395, 1396, 1397, 676, 709, 0, 710,
	0, 0, 0, 711, 662, 0, 665, 0, 0, 771,
	700, 771, 700, 880, 688, 0, 712, 0, 715, 716,
	0, 713, 696, 0, 0, 652, 766, 0, 649, 768,
	649, 1392, 714, 717, 718, 0, 0, 648, 650, 651,
	772, 657, 657, 657, 0, 771, 771, 663, 0, 767,
	769, 0, 0, 657, 666,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 428, 3, 434, 429, 3,
	439, 440, 432, 430, 444, 431, 441, 433, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 448, 443,
	420, 422, 421, 424, 445, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 437, 3, 438, 435, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 446, 427, 447, 425,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 423, 57763, 426, 57764, 436,
	57765, 442, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1034
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1040
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1049
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1169
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1218
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1241
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1249
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1255
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1259
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1265
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1271
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1288
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1295
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1302
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1309
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1317
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1322
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1326
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1331
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1337
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1345
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1353
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1364
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1374
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1384
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1388
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1398
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1404
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1445
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1449
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1452
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1473
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1490
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1493
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1500
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1509
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1530
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1538
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1543
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1553
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1565
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1571
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1575
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1582
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1586
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1596
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1600
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1629
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1659
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1663
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1714
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1718
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1721
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1741
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1745
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1759
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1765
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1769
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1775
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1787
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1793
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1803
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1807
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1811
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1817
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1829
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1830
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1831
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1832
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1842
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1850
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1855
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1865
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1874
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1882
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1891
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1901
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1910
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1920
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1924
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1927
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1931
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "table")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1935
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1939
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1944
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1945
		{
			sqlVAL.str = ""
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1954
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1958
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1964
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1965
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1966
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1971
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1978
		{
			return unimplemented(sqllex, "create server")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1979
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1980
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1981
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1984
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1985
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1988
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1989
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1992
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1993
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1996
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1997
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1998
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1999
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2002
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2003
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2008
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2010
		{
			return unimplemented(sqllex, "drop server")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2011
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2012
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2013
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2014
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2018
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2019
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2020
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2024
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2025
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2026
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2036
		{

			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2048
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2058
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2062
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2068
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2079
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2083
		{

			sqlVAL.union.val = nil
		}
	case 275:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2097
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2107
		{
			return helpWith(sqllex, "DELETE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2114
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2117
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2118
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2119
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2120
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2121
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2130
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2131
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2132
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2133
		{
			return helpWith(sqllex, "DROP")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2136
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2137
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2138
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2139
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2140
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2148
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2152
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2155
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2170
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2178
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2193
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2201
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2208
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2216
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2224
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2231
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2239
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2243
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2246
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2254
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2258
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2261
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2265
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2291
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2294
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2296
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2300
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2304
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2311
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2315
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2318
		{
			return helpWith(sqllex, "DELETE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2320
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2321
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2322
		{
			return helpWith(sqllex, "INSERT")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2323
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2325
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2326
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2329
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2334
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2335
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2336
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2340
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2354
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2361
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2365
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2369
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2379
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2385
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2389
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2393
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2403
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2407
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2411
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2415
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2418
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2438
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2442
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2446
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2449
		{
			return helpWith(sqllex, "GRANT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2469
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2477
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2480
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2485
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2489
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2500
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2504
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2518
		{
			return helpWith(sqllex, "RESET")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2519
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2527
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2531
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2534
		{
			return helpWith(sqllex, "RESET")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2545
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2556
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2559
		{
			return helpWith(sqllex, "USE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2563
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2564
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2565
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2566
		{
			return unimplemented(sqllex, "set local")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2570
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2571
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2572
		{
			return helpWith(sqllex, "USE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2588
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2603
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2606
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2632
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2636
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2640
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2646
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2656
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2660
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2664
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2668
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2672
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2683
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2686
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2696
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2712
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2716
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2721
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2738
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2741
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2746
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2750
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2769
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return unimplemented(sqllex, "set from current")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2783
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2796
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2803
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2807
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2813
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2817
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2824
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2830
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2840
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2844
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2848
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2852
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2856
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2862
		{
			sqlVAL.union.val = tree.Low
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2866
		{
			sqlVAL.union.val = tree.Normal
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2870
		{
			sqlVAL.union.val = tree.High
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2881
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2885
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2889
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2894
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2898
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2911
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2912
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2913
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2914
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2915
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2917
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2918
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2919
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2920
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2922
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2923
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2924
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2925
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2926
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2927
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2928
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2929
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2930
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2934
		{
			return helpWith(sqllex, "SHOW")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2941
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2942
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2943
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2954
		{
			sqlVAL.str = "client_encoding"
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2957
		{
			sqlVAL.str = "timezone"
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2972
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2977
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2981
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2992
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3009
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3016
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3024
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3045
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3048
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3061
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3064
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3072
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3075
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3088
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3096
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3104
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3107
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3109
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3114
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3125
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3130
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3133
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3141
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3146
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3150
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3160
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3163
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3172
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3177
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3180
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3182
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3186
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3189
		{
			sqlVAL.union.val = true
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3190
		{
			sqlVAL.union.val = false
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3198
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3203
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3207
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3217
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3226
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3235
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3245
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3249
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3259
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3263
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3271
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3276
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3281
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3285
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3293
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3297
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3301
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3314
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3325
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3336
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3340
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3346
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[9].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3359
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3363
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3378
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3381
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3389
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3396
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3401
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3521
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3525
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3529
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3568
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3572
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3577
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3581
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3590
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3597
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3601
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3625
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:3673
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3687
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[7].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3698
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[10].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3721
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3722
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3723
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3724
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3725
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3726
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3727
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3728
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3733
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3739
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3749
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3755
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3769
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3776
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3781
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3786
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3792
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3799
		{
			sqlVAL.str = ""
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3806
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3812
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3819
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3826
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3832
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3842
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3852
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3862
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3873
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3888
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3894
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3898
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3902
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3906
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3910
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3914
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3918
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3936
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3940
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3944
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3952
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3956
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3968
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3972
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 687:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3983
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3993
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4005
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4015
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4027
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4032
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4038
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4044
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4055
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4065
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4089
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4093
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4099
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4108
		{
			return unimplemented(sqllex, "references match full")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4109
		{
			return unimplemented(sqllex, "references match partial")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4110
		{
			return unimplemented(sqllex, "references match simple")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4111
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4118
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4122
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4126
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4130
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4134
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4140
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4146
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4154
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4162
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4166
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4170
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4176
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4180
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4186
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4205
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[5].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 723:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4213
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[8].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4221
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4225
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4228
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4232
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4233
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4235
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4236
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4237
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4240
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4242
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4244
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4247
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4250
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4252
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4254
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4262
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4265
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4273
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4277
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4280
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4288
		{
			sqlVAL.union.val = nil
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4302
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4305
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4310
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4311
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4319
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[5].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4326
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4327
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4330
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4331
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4337
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4339
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4341
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4343
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4345
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4347
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4363
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4376
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4390
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4416
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4419
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4420
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4424
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4439
		{
			sqlVAL.union.val = false
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4445
		{
			sqlVAL.union.val = true
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4449
		{
			sqlVAL.union.val = false
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4455
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4468
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4479
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4480
		{
			sqlVAL.str = ""
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4484
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4488
		{
			sqlVAL.union.val = tree.Descending
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4492
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4498
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4505
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4509
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4515
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4519
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4523
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4527
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4531
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4533
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4537
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4541
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4547
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4551
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4557
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4561
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4566
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4567
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4570
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4571
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4582
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4592
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4601
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4604
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4612
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4615
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4619
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4620
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4621
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4637
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4640
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4642
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4645
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4655
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4658
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4660
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4663
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4667
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4672
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4673
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4674
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4682
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4689
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4692
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4693
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4697
		{
			sqlVAL.str = ""
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4701
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4705
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4709
		{
			sqlVAL.str = ""
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4715
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4719
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4725
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4729
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4735
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4739
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4752
		{
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4754
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4758
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4762
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4766
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4772
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4778
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4784
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4788
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 853:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4798
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4808
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4818
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4822
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4826
		{
			sqlVAL.str = ""
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4832
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4836
		{
			sqlVAL.str = ""
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4842
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4846
		{
			sqlVAL.str = ""
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4852
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4856
		{
			sqlVAL.str = ""
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4861
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4862
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4874
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4881
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4888
		{
			return helpWith(sqllex, "INSERT")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4899
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4906
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4910
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4918
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4928
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4932
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4938
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4962
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4966
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4970
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4976
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4980
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4982
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4988
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4993
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4997
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 888:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:5014
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5025
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5029
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5030
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5034
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5038
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5051
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5054
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5058
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5101
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5107
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5111
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5126
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5130
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5134
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5138
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5142
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5146
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5151
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5152
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5157
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5192
		{
			return helpWith(sqllex, "SELECT")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5193
		{
			return helpWith(sqllex, "VALUES")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5194
		{
			return helpWith(sqllex, "TABLE")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5216
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5229
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5243
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5255
		{
			return helpWith(sqllex, "SELECT")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5259
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5268
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5277
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5292
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5299
		{
			return helpWith(sqllex, "TABLE")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5311
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5315
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5319
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5323
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5333
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5341
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5342
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5346
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5350
		{
			sqlVAL.union.val = nil
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5355
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5356
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = true
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5364
		{
			sqlVAL.union.val = false
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5368
		{
			sqlVAL.union.val = false
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5374
		{
			sqlVAL.union.val = true
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5380
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5385
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5386
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5389
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5390
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5394
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5398
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5404
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5410
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5420
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5424
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5428
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5437
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5446
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5457
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5461
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5470
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5476
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5483
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5490
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5499
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5503
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5507
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5513
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5514
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5517
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5518
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5535
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5539
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5545
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5549
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5568
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5571
		{
			return helpWith(sqllex, "VALUES")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5573
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5585
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5588
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5596
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5600
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5606
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5610
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5616
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5622
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5627
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5643
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5651
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5678
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5692
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5701
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5708
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5710
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5714
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5718
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5722
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5738
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5744
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5748
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5754
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5760
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5766
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5768
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5771
		{
			sqlVAL.union.val = nil
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5772
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5773
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5777
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5787
		{
			sqlVAL.union.val = true
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5791
		{
			sqlVAL.union.val = false
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5811
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5815
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5827
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5831
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5837
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5841
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5848
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5854
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5861
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5867
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5871
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5875
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5879
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5885
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5886
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5897
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5906
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5907
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5908
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5913
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5930
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5934
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5940
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5948
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5973
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5987
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5996
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6005
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6018
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6020
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6029
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6040
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6041
		{
			return unimplemented(sqllex, "interval with precision")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6058
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6062
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6066
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6070
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6074
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6078
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6082
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6086
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6094
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6098
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6102
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6106
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6114
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6118
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6122
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6126
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6157
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6165
		{
			sqlVAL.union.val = nil
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6172
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6176
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6180
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6184
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6188
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6192
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6196
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6200
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6204
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6220
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6224
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6231
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6245
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6249
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6256
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6260
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6264
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6268
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6272
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6278
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6299
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6305
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6313
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6317
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6321
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6327
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6346
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6350
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6354
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6358
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = true
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = false
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6381
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6385
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6389
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6410
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = tree.Year
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = tree.Month
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = tree.Day
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = tree.Month
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6454
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6458
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6462
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6466
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6473
		{
			sqlVAL.union.val = nil
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = tree.Second
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6482
		{
			return unimplemented(sqllex, "interval second with precision")
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6510
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6514
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6517
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6526
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6531
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6535
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6539
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6543
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6547
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6551
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6555
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6559
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6563
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6567
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6571
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6575
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6579
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6591
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6595
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6599
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6603
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6607
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6611
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6615
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6619
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6623
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6627
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6631
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6639
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6647
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6659
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6675
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6679
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6687
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6691
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6695
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6699
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6703
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6707
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6711
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6715
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6719
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6723
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6727
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6731
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6735
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6739
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6743
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6747
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6751
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6755
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6763
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6767
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6770
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6772
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6776
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6780
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6784
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6788
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6792
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6796
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6800
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6804
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6808
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6816
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6820
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6824
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6828
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6832
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6836
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6853
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6857
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6861
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6866
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6878
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6882
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6886
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6890
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6898
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6902
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6906
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6910
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6914
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6918
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6930
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6934
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6938
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7052
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7056
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7060
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7065
		{
			return unimplemented(sqllex, "func const")
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7071
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7074
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7076
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7080
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7084
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7088
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7092
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7101
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7106
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7110
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7114
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7123
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7138
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7149
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7150
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7156
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7160
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7163
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7174
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7190
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7191
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7195
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation for")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7215
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7283
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7285
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7288
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7293
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7295
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7298
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7303
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7305
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7308
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7313
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7318
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7327
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7328
		{
			return unimplemented(sqllex, "treat")
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7342
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7346
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7349
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7354
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7359
		{
			return unimplemented(sqllex, "within group")
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7360
		{
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7364
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7375
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7395
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7403
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7411
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.str = ""
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7459
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7486
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7499
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7527
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7531
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7535
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7539
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7566
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7573
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7585
		{
			sqlVAL.union.val = tree.Any
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7589
		{
			sqlVAL.union.val = tree.Some
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7593
		{
			sqlVAL.union.val = tree.All
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7598
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7599
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7600
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = tree.Div
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7602
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7603
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7604
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7605
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7606
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7607
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7608
		{
			sqlVAL.union.val = tree.LT
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7609
		{
			sqlVAL.union.val = tree.GT
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7610
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7611
		{
			sqlVAL.union.val = tree.LE
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7612
		{
			sqlVAL.union.val = tree.GE
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7613
		{
			sqlVAL.union.val = tree.NE
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7617
		{
			sqlVAL.union.val = tree.Like
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7618
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7620
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7653
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7657
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7661
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7682
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7686
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7693
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7699
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7709
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7729
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7739
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7743
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7765
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7769
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7773
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7779
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7786
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7790
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7807
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7811
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7815
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7819
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7823
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7829
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7835
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7841
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7845
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7849
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7855
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7867
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7874
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7878
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7890
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7894
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7901
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7918
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7924
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7933
		{
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7934
		{
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7938
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7948
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7957
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7961
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7965
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7973
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7983
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7993
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8000
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8036
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8042
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8054
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8058
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8069
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8080
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8090
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8188
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8195
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8199
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8217
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8225
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8238
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8256
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8270
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8284
		{
			sqlVAL.str = ""
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8290
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8294
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
